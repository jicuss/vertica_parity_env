CREATE SCHEMA CTG_ANALYTICS;
CREATE SCHEMA CTG_ANALYTICS_ADMIN;
CREATE SCHEMA CTG_ANALYTICS_STG;
CREATE SCHEMA CTG_ANALYTICS_SRC;

CREATE SEQUENCE CTG_ANALYTICS.DIM_MARKETING_FORECAST_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL_SEQ  CACHE      1  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_CAMPAIGN_SEQ  CACHE      1000  MINVALUE   -2 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PAGE_SEQ  CACHE      5000  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PAGE_URL_SEQ  CACHE      50000  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_VISITOR_IVID_SEQ  CACHE      1000  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_VISITOR_OMT_SEQ  CACHE      1000000  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_AUTHENTICATION_SEQ  CACHE      125000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_FORM_SEQ  CACHE      1  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_TAXFILER_SEGMENT_SEQ  CACHE      1000 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_TAXORDER_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PRODUCT_ROLLUP_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_TAXFILER_SEQ  CACHE      5000 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP_SEQ  CACHE      25 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.SOLUTION_VARIABLES_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PRIORITY_CODE_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_STG.STG_ETX_ORDERS_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN_SEQ  CACHE      100000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_BUNDLE_ROLLUP_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.AGG_AUTH_ID_PRS_SEQ  CACHE      100000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_POST_KEYWORD_SEQ  CACHE      5000  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.ETL_BRIDGE_SEQ  CACHE      15 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_SOURCE_APPLICATION_SEQ  CACHE      1  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_TAXPREP_SESSION_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_UPSELL_INFORMATION_SEQ  CACHE      1000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_UPSELL_OFFER_SEQ  CACHE      1000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_GEO_LOCATION_SEQ  CACHE      100  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_FILING_TYPE_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TAXORDER_STATUS_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_SEGMENT_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_SITE_AREA_SEQ  CACHE      1  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE_SEQ  CACHE      1000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_SCREEN_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_SKU_ROLLUP_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_STATE_SEQ  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS.AGG_SESSION_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE_SEQ  CACHE      2000000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_RECIPE_SEQ  CACHE      10  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_AB_TEST_SEQ  CACHE      5 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER_SEQ  CACHE      10000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION_SEQ  CACHE      200000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_TAXPREP_METHOD_SEQ  CACHE      10 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE_SEQ  CACHE      10 ;
CREATE SEQUENCE CTG_ANALYTICS.AGG_CAMPAIGN_COST_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_VENDOR_SEQ  CACHE      1  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_TILE_SEQ  CACHE      10 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_EXPERIENCE_SEQ  CACHE      10  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED_SEQ  CACHE      10  MINVALUE   -1 ;
CREATE SEQUENCE CTG_ANALYTICS.URL_ID ;
CREATE SEQUENCE CTG_ANALYTICS.PAGE_ID ;
CREATE SEQUENCE CTG_ANALYTICS.CAMPAIGN_ID ;
CREATE SEQUENCE CTG_ANALYTICS.DEVICE_ID ;
CREATE SEQUENCE CTG_ANALYTICS.OPERATING_SYSTEM_ID ;
CREATE SEQUENCE CTG_ANALYTICS.NETWORK_ID ;
CREATE SEQUENCE CTG_ANALYTICS.BROWSER_ID ;
CREATE SEQUENCE CTG_ANALYTICS.VISITOR_ID ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.SEQ_COORDINATOR_INSTANCE_ID  CACHE      1 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.SEQ_BATCH_EVENT_ID  CACHE      2 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.SEQ_BATCH_EVENT_GROUP_MAP_ID  CACHE      2 ;
CREATE SEQUENCE CTG_ANALYTICS_STG.SEQ_BATCH_ID ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.SEQ_PRS_VERBATIM ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PRODUCT_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_PRODUCT_ALIAS_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.DIM_CUSTOMER_SEQ  CACHE      5000  MINVALUE   10000000000001 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.ESTORE_ORDER_SEQ  CACHE      10000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.DS_FORM_IMPORT  CACHE      1250000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR_SEQ  CACHE      25000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_IMPORT_DOC_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_IMPORT_PARTNER_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_IMPORT_SERVICE_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_IMPORT_PLATFORM_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE_SEQ  CACHE      10000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_TAXML_SEQ  CACHE      30000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP_SEQ  CACHE      2000000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL_SEQ  CACHE      1000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_AUTH_DATA_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_PRS_SEQ  CACHE      25000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM_SEQ  CACHE      10000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_SESSION_END_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_SESSION_START_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_TAX_ORDER_SEQ ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY_SEQ  CACHE      3000000 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY_SEQ  CACHE      1000000 ;
CREATE SEQUENCE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST_SEQ  CACHE      200000 ;
CREATE SEQUENCE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR_SEQ  CACHE      100000 ;
CREATE SEQUENCE CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER_SEQ  CACHE      100 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION_SEQ  CACHE      50000 ;
CREATE SEQUENCE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION_SEQ ;

CREATE TABLE CTG_ANALYTICS_SRC.DIM_TIME_BY_DAY
(
    DIM_TIME_BY_DAY_KEY int NOT NULL,
    CLNDR_544_WEEK_END_DT date,
    CLNDR_544_WEEK_NBR int,
    CLNDR_544_WEEK_START_DT date,
    CLNDR_WEEK_END_DT date,
    CLNDR_WEEK_START_DT date,
    CLNDR_WEEK_DURTN_CD varchar(100),
    FISCAL_MONTH_NBR int,
    FISCAL_YEAR_NBR int,
    FULL_DATE date,
    TY_DAY int,
    TY_SEASON_FLAG int,
    TY_WEEK int,
    TY_YEAR int,
    WKND_IND varchar(2),
    AUDIT_INS_KEY int,
    AUDIT_INS_TS varchar(20),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_TIME_BY_DAY ADD CONSTRAINT PK_DIM_TIME_BY_DAY PRIMARY KEY (DIM_TIME_BY_DAY_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TAX_HOURS
(
    TAX_HOUR int NOT NULL
);

ALTER TABLE CTG_ANALYTICS_SRC.TAX_HOURS ADD CONSTRAINT PK_TAX_HOURS PRIMARY KEY (TAX_HOUR) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_TRANS_CLICKSTREAM
(
    BATCH_EVENT_ID int,
    TRANS_ID int NOT NULL,
    VISITOR_ID int,
    AUTH_ID int,
    AUTH_ID_SOURCE int,
    PAGE_ID int,
    PAGE_URL_ID int,
    REFERRER_ID int,
    USER_AGENT_ID int,
    UA_BROWSER_ID int,
    UA_OPERATING_SYSTEM_ID int,
    TEST_ID int,
    GEO_ID int,
    BROWSER_ID int,
    COLOR_DEPTH_ID int,
    CONNECTION_TYPE_ID int,
    LANGUAGE_ID int,
    JAVASCRIPT_VERSION_ID int,
    OPERATING_SYSTEM_ID int,
    RESOLUTION_ID int,
    DIM_TIME_BY_DAY_KEY int,
    CAMPAIGN_ID int,
    SEARCH_ENGINE_ID int,
    COUNTRY_ID int,
    HIT_TIMESTAMP timestamp,
    TY_WEEK int,
    TY_YEAR int,
    HIT_TIME_GMT int,
    DATE_TIME date,
    SERVICE char(2),
    ACCEPT_LANGUAGE varchar(255),
    VISID varchar(255),
    USERID int,
    CID varchar(255),
    EVENT_LIST varchar(2000),
    HOMEPAGE char(1),
    IP varchar(255),
    PAGE_EVENT int,
    PAGE_EVENT_VAR1 varchar(300),
    PAGE_EVENT_VAR2 varchar(255),
    PAGE_TYPE varchar(255),
    PAGE_URL varchar(2000),
    PAGENAME varchar(350),
    DURATION_ON_PAGE int,
    PRODUCT_LIST varchar(1000),
    USER_SERVER varchar(255),
    CHANNEL varchar(255),
    PROP01 varchar(255),
    PROP02 varchar(255),
    PROP03 varchar(255),
    PROP04 varchar(255),
    PROP05 varchar(255),
    PROP06 varchar(255),
    PROP07 varchar(255),
    PROP08 varchar(255),
    PROP09 varchar(255),
    PROP10 varchar(255),
    PROP11 varchar(255),
    PROP12 varchar(255),
    PROP13 varchar(255),
    PROP14 varchar(255),
    PROP15 varchar(255),
    PROP16 varchar(255),
    PROP17 varchar(255),
    PROP18 varchar(255),
    PROP19 varchar(255),
    PROP20 varchar(255),
    PROP21 varchar(255),
    PROP22 varchar(255),
    PROP23 varchar(255),
    PROP24 varchar(255),
    PROP25 varchar(255),
    PROP26 varchar(255),
    PROP27 varchar(255),
    PROP28 varchar(255),
    PROP29 varchar(255),
    PROP30 varchar(255),
    PROP31 varchar(255),
    PROP32 varchar(255),
    PROP33 varchar(255),
    PROP34 varchar(255),
    PROP35 varchar(255),
    PROP36 varchar(255),
    PROP37 varchar(255),
    PROP38 varchar(255),
    PROP39 varchar(255),
    PROP40 varchar(255),
    PROP41 varchar(255),
    PROP42 varchar(255),
    PROP43 varchar(255),
    PROP44 varchar(255),
    PROP45 varchar(255),
    PROP46 varchar(255),
    PROP47 varchar(255),
    PROP48 varchar(255),
    PROP49 varchar(255),
    PROP50 varchar(255),
    PURCHASEID varchar(255),
    REFERRER varchar(500),
    STATE varchar(255),
    USER_AGENT varchar(2000),
    ZIP varchar(255),
    EXCLUDE_HIT int,
    HIER1 varchar(255),
    HIER2 varchar(255),
    HIER3 varchar(255),
    HIER4 varchar(255),
    HIER5 varchar(255),
    POST_BROWSER_HEIGHT int,
    POST_BROWSER_WIDTH int,
    POST_COOKIES char(1),
    POST_JAVA_ENABLED char(1),
    POST_PERSISTENT_COOKIE char(1),
    DOMAIN varchar(255),
    POST_T_TIME_INFO varchar(255),
    PLUGINS varchar(255),
    LAST_HIT_TIME_GMT int,
    FIRST_HIT_TIME_GMT int,
    VISIT_START_TIME_GMT int,
    LAST_PURCHASE_TIME_GMT varchar(11),
    LAST_PURCHASE_NUM int,
    FIRST_HIT_PAGE_URL varchar(500),
    FIRST_HIT_PAGENAME varchar(350),
    VISIT_START_PAGE_URL varchar(500),
    VISIT_START_PAGENAME varchar(350),
    FIRST_HIT_REFERRER varchar(500),
    VISIT_REFERRER varchar(500),
    VISIT_SEARCH_ENGINE int,
    VISIT_NUM int,
    VISIT_PAGE_NUM int,
    PREV_PAGE int,
    GEO_CITY varchar(255),
    GEO_COUNTRY varchar(4),
    GEO_REGION varchar(255),
    DUPLICATE_PURCHASE int,
    NEW_VISIT int,
    DAILY_VISITOR int,
    HOURLY_VISITOR int,
    MONTHLY_VISITOR int,
    YEARLY_VISITOR int,
    POST_CAMPAIGN varchar(255),
    EVAR01 varchar(255),
    EVAR02 varchar(255),
    EVAR03 varchar(255),
    EVAR04 varchar(255),
    EVAR05 varchar(255),
    EVAR06 varchar(255),
    EVAR07 varchar(255),
    EVAR08 varchar(255),
    EVAR09 varchar(255),
    EVAR10 varchar(255),
    EVAR11 varchar(255),
    EVAR12 varchar(255),
    EVAR13 varchar(255),
    EVAR14 varchar(255),
    EVAR15 varchar(255),
    EVAR16 varchar(255),
    EVAR17 varchar(255),
    EVAR18 varchar(255),
    EVAR19 varchar(255),
    EVAR20 varchar(255),
    EVAR21 varchar(255),
    EVAR22 varchar(255),
    EVAR23 varchar(255),
    EVAR24 varchar(255),
    EVAR25 varchar(255),
    EVAR26 varchar(255),
    EVAR27 varchar(255),
    EVAR28 varchar(255),
    EVAR29 varchar(255),
    EVAR30 varchar(255),
    EVAR31 varchar(255),
    EVAR32 varchar(255),
    EVAR33 varchar(255),
    EVAR34 varchar(255),
    EVAR35 varchar(255),
    EVAR36 varchar(255),
    EVAR37 varchar(255),
    EVAR38 varchar(255),
    EVAR39 varchar(255),
    EVAR40 varchar(255),
    EVAR41 varchar(255),
    EVAR42 varchar(255),
    EVAR43 varchar(255),
    EVAR44 varchar(255),
    EVAR45 varchar(255),
    EVAR46 varchar(255),
    EVAR47 varchar(255),
    EVAR48 varchar(255),
    EVAR49 varchar(255),
    EVAR50 varchar(255),
    POST_EVAR01 varchar(255),
    POST_EVAR02 varchar(255),
    POST_EVAR03 varchar(255),
    POST_EVAR04 varchar(255),
    POST_EVAR05 varchar(255),
    POST_EVAR06 varchar(255),
    POST_EVAR07 varchar(255),
    POST_EVAR08 varchar(255),
    POST_EVAR09 varchar(255),
    POST_EVAR10 varchar(255),
    POST_EVAR11 varchar(255),
    POST_EVAR12 varchar(255),
    POST_EVAR13 varchar(255),
    POST_EVAR14 varchar(255),
    POST_EVAR15 varchar(255),
    POST_EVAR16 varchar(255),
    POST_EVAR17 varchar(255),
    POST_EVAR18 varchar(255),
    POST_EVAR19 varchar(255),
    POST_EVAR20 varchar(255),
    POST_EVAR21 varchar(255),
    POST_EVAR22 varchar(255),
    POST_EVAR23 varchar(255),
    POST_EVAR24 varchar(255),
    POST_EVAR25 varchar(255),
    POST_EVAR26 varchar(255),
    POST_EVAR27 varchar(255),
    POST_EVAR28 varchar(255),
    POST_EVAR29 varchar(255),
    POST_EVAR30 varchar(255),
    POST_EVAR31 varchar(255),
    POST_EVAR32 varchar(255),
    POST_EVAR33 varchar(255),
    POST_EVAR34 varchar(255),
    POST_EVAR35 varchar(255),
    POST_EVAR36 varchar(255),
    POST_EVAR37 varchar(255),
    POST_EVAR38 varchar(255),
    POST_EVAR39 varchar(255),
    POST_EVAR40 varchar(255),
    POST_EVAR41 varchar(255),
    POST_EVAR42 varchar(255),
    POST_EVAR43 varchar(255),
    POST_EVAR44 varchar(255),
    POST_EVAR45 varchar(255),
    POST_EVAR46 varchar(255),
    POST_EVAR47 varchar(255),
    POST_EVAR48 varchar(255),
    POST_EVAR49 varchar(255),
    POST_EVAR50 varchar(255),
    CLICK_ACTION varchar(255),
    CLICK_ACTION_TYPE varchar(100),
    CLICK_CONTEXT varchar(255),
    CLICK_CONTEXT_TYPE varchar(50),
    CLICK_SOURCEID varchar(100),
    CLICK_TAG varchar(255),
    POST_KEYWORDS varchar(255),
    LOAD_DATE date,
    LOAD_HOUR varchar(4),
    FORM_ID_PARSED int,
    TAX_DATE_ID int,
    PAGE_URL_PARSED varchar(2000),
    REFERRER_URL_PARSED varchar(2000),
    GEO_STATE varchar(255),
    GEO_DMA varchar(255),
    TAXABLE_STATE_FLAG boolean,
    PRIOR_YEAR_TAXPREP_METHOD varchar(255),
    PRIOR_YEAR_TAXPREP_METHOD_SOURCE varchar(255)
);

ALTER TABLE CTG_ANALYTICS_STG.STG_TRANS_CLICKSTREAM ADD CONSTRAINT PK_STG_TRANS_CLICKSTREAM PRIMARY KEY (TRANS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_DIM_MARKETING_FORECAST
(
    FCST_DATE date NOT NULL,
    CORE_FLAG int NOT NULL,
    MOBILE_APP_FLAG int NOT NULL,
    FCST_TYPE varchar(10) NOT NULL,
    FCST_CATEGORY varchar(40) NOT NULL,
    TRAFFIC numeric(11,4) NOT NULL,
    NEAUTHS numeric(11,4) NOT NULL,
    UNITS numeric(11,4) NOT NULL,
    FCST_VERSION varchar(50) NOT NULL,
    TRAFFIC_MULTIPLIER numeric(11,4),
    NEAUTHS_MULTIPLIER numeric(11,4),
    UNITS_MULTIPLIER numeric(11,4)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_ORDERS
(
    TTO_ORDER_KEY int NOT NULL,
    BATCH_EVENT_ID int,
    ORDER_TIMESTAMP timestamp,
    AUTH_ID int,
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50),
    ORDER_NUMBER varchar(64),
    PRODUCT_CODE varchar(20),
    PAYMENT_METHOD varchar(100),
    PAYMENT_AMOUNT numeric(15,2),
    ORIGINAL_SKU_ID int,
    VOUCHER_CODE varchar(13),
    TAX_YEAR int,
    HOLD_REASON varchar(50),
    ORDER_ORIGIN varchar(30)
);

ALTER TABLE CTG_ANALYTICS_STG.STG_TTO_ORDERS ADD CONSTRAINT PK_STG_TTO_ORDERS PRIMARY KEY (TTO_ORDER_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP
(
    PROJECT_MAP_ID int NOT NULL,
    CHILD_PROJECT_ID int NOT NULL,
    PARENT_PROJECT_ID int NOT NULL,
    PROJECT_MAP_PARAMETER_LOCATION varchar(1000) NOT NULL,
    BATCH_LIMIT int NOT NULL DEFAULT 100000,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    PROJECT_MAP_NAME varchar(100) NOT NULL DEFAULT 'undefined'
);

ALTER TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP ADD CONSTRAINT PK_CONFIG_PROJECT_MAP PRIMARY KEY (PROJECT_MAP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE
(
    COORDINATOR_INSTANCE_ID int NOT NULL,
    START_TIMESTAMP timestamp NOT NULL,
    END_TIMESTAMP timestamp,
    STATUS char(1) NOT NULL,
    NUMBER_OF_PROJECT_EXECUTED int,
    ENABLED boolean NOT NULL DEFAULT true,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE ADD CONSTRAINT PK_ETL_COORDINATOR_INSTANCE PRIMARY KEY (COORDINATOR_INSTANCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT
(
    PROJECT_ID int NOT NULL,
    PROJECT_NAME varchar(100) NOT NULL,
    ENABLED boolean NOT NULL,
    PROJECT_GROUP varchar(100) NOT NULL,
    PROJECT_TYPE varchar(100) NOT NULL,
    PROJECT_LOCATION varchar(1000) NOT NULL,
    CONFIG_LOCATION varchar(1000),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT ADD CONSTRAINT PK_CONFIG_PROJECT PRIMARY KEY (PROJECT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT
(
    BATCH_EVENT_ID int NOT NULL,
    PROJECT_ID int NOT NULL,
    COORDINATOR_INSTANCE_ID int,
    START_TIMESTAMP timestamp,
    END_TIMESTAMP timestamp,
    STATUS char(1) NOT NULL,
    PROJECT_MAP_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT ADD CONSTRAINT PK_ETL_BATCH_EVENT PRIMARY KEY (BATCH_EVENT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP
(
    BATCH_EVENT_MAP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP_SEQ'),
    PROJECT_MAP_ID int NOT NULL,
    BATCH_EVENT_GROUP_MAP_ID int NOT NULL,
    WRITE_BATCH_EVENT_ID int NOT NULL,
    READ_BATCH_EVENT_ID int NOT NULL,
    COORDINATOR_INSTANCE_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP ADD CONSTRAINT PK_ETL_BATCH_EVENT_MAP PRIMARY KEY (BATCH_EVENT_MAP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_TRANSPOSE_INDEX
(
    INDEX_ID int NOT NULL
);

ALTER TABLE CTG_ANALYTICS_ADMIN.CONFIG_TRANSPOSE_INDEX ADD CONSTRAINT PK_CONFIG_TRANSPOSE_INDEX PRIMARY KEY (INDEX_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_SEASON_PART
(
    TAX_YEAR int NOT NULL,
    STARTING_DATE date NOT NULL,
    ENDING_DATE date,
    SEASON_PART varchar(100) NOT NULL,
    ACTIVE char(1) NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.CID_CLASSIFICATION_QB
(
    CID varchar(500),
    TAX_YEAR varchar(4),
    CHANNEL varchar(100),
    VENUE varchar(255),
    SEGMENT varchar(100),
    SUBVENUE varchar(500),
    PPC_DEVICE varchar(50),
    PPC_GEO varchar(50),
    PPC_KW_BUCKET varchar(50),
    PPC_KW_SUBBUCKET varchar(50),
    PPC_KW_ADGROUP varchar(400),
    AFF_PAYOUT_TYPE varchar(50),
    AFF_NETWORK_ID_RULE varchar(255),
    AFF_NETWORK_ID varchar(50),
    BN_DFA_SITE_NAME varchar(100),
    BN_DFA_PLACEMENT_NAME varchar(200),
    BN_DFA_CREATIVE_NAME varchar(100),
    BN_MEDIA_CATEGORY varchar(200),
    BN_PLACEMENT_DECLARED_TARGET varchar(100),
    BN_CREATIVE_MESSAGE varchar(100),
    EMAIL1 varchar(100),
    EMAIL2 varchar(100),
    EMAIL3 varchar(100),
    DATE_CREATED timestamp,
    DATE_MODIFIED timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_CID_CLASSIFICATION_QB
(
    CID varchar(500),
    TAX_YEAR varchar(4),
    CHANNEL varchar(100),
    VENUE varchar(255),
    SEGMENT varchar(100),
    SUBVENUE varchar(500),
    PPC_DEVICE varchar(50),
    PPC_GEO varchar(50),
    PPC_KW_BUCKET varchar(50),
    PPC_KW_SUBBUCKET varchar(50),
    PPC_KW_ADGROUP varchar(400),
    AFF_PAYOUT_TYPE varchar(50),
    AFF_NETWORK_ID_RULE varchar(255),
    AFF_NETWORK_ID varchar(50),
    BN_DFA_SITE_NAME varchar(100),
    BN_DFA_PLACEMENT_NAME varchar(200),
    BN_DFA_CREATIVE_NAME varchar(100),
    BN_MEDIA_CATEGORY varchar(200),
    BN_PLACEMENT_DECLARED_TARGET varchar(100),
    BN_CREATIVE_MESSAGE varchar(100),
    EMAIL1 varchar(100),
    EMAIL2 varchar(100),
    EMAIL3 varchar(100),
    DATE_CREATED timestamp,
    DATE_MODIFIED timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.PRODUCT_ROLLUP
(
    PRODUCT_ID int,
    PRODUCT_ENGINE_DSC varchar(100),
    PRODUCT_ROLLUP varchar(100),
    PAID_FLAG int,
    PRODUCT_NAME varchar(100),
    DISPLAY_PRODUCT_NAME_WITH_SORT varchar(100),
    PRODUCT_SORT int,
    DISPLAY_PRODUCT_NAME varchar(100),
    PRODUCT_EDTN_DSC varchar(250),
    PRODUCT_CODE_ROLLUP varchar(100),
    EFFECTIVE_START_TAX_YEAR int,
    EFFECTIVE_END_TAX_YEAR int,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date
);


CREATE TABLE CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
(
    SOLUTION_VARIABLE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.SOLUTION_VARIABLES_SEQ'),
    VARIABLE_NAME varchar(32),
    VARIABLE_VALUE varchar(256),
    ATTRIBUTE varchar(32),
    DESCRIPTION varchar(256),
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.SOLUTION_VARIABLES ADD CONSTRAINT PK_SOLUTION_VARIABLES PRIMARY KEY (SOLUTION_VARIABLE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_DIM_PRODUCT_ROLLUP
(
    PRODUCT_ID int,
    PRODUCT_ENGINE_DSC varchar(100),
    PRODUCT_ROLLUP varchar(100),
    PAID_FLAG int,
    PRODUCT_NAME varchar(100),
    DISPLAY_PRODUCT_NAME_WITH_SORT varchar(100),
    PRODUCT_SORT int,
    DISPLAY_PRODUCT_NAME varchar(100),
    PRODUCT_EDTN_DSC varchar(250),
    PRODUCT_CODE_ROLLUP varchar(100),
    EFFECTIVE_START_TAX_YEAR int,
    EFFECTIVE_END_TAX_YEAR int,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_AUTH_LOG
(
    BATCH_EVENT_ID int,
    AUTH_ID int,
    AUTH_DT timestamp,
    SOURCE varchar(50),
    ROLE varchar(1),
    TAX_YEAR int,
    AUTH_SOURCE int,
    SKU_ID int,
    IP_ADDRESS varchar(80),
    AUTHORIZATION_LEVEL int,
    AUTH_LOG_KEY int
);


CREATE TABLE CTG_ANALYTICS_STG.AUTH_MULTIFILER
(
    AUTH_ID int,
    TAX_YEAR int
);


CREATE TABLE CTG_ANALYTICS_STG.STG_ETX_ORDERS
(
    ETX_ORDER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_STG.STG_ETX_ORDERS_SEQ'),
    CHANGE_ID varchar(255),
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    ENGINE_ID int,
    PRODUCT_CODE varchar(30),
    PRODUCT_VERSION varchar(20),
    TAX_YEAR int,
    CREDIT_PRIORITY_CODE varchar(50),
    FILING_TYPE varchar(50),
    ORDER_AMOUNT numeric(15,2),
    ORDER_TYPE varchar(2),
    ETX_REF_NUM varchar(32),
    ORDER_TIMESTAMP timestamp,
    PRICE_PRIORITY_CODE varchar(50),
    PRODUCT_ALIAS_CODE varchar(50),
    STATUS_TYPE int,
    BATCH_EVENT_ID int,
    AUTH_ID int
);

ALTER TABLE CTG_ANALYTICS_STG.STG_ETX_ORDERS ADD CONSTRAINT PK_STG_ETX_ORDERS PRIMARY KEY (ETX_ORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_BRIDGE
(
    BRIDGE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.ETL_BRIDGE_SEQ'),
    PROJECT_ID int NOT NULL,
    TABLE_NAME varchar(100) NOT NULL,
    SOURCE_AUDIT_KEY int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BRIDGE ADD CONSTRAINT PK_ETL_BRIDGE PRIMARY KEY (BRIDGE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP
(
    ODS_PROJECT_TABLE_MAP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP_SEQ'),
    PROJECT_ID int NOT NULL,
    TABLE_NAME varchar(100) NOT NULL,
    SOURCE_AUDIT_KEY_EXPR varchar(255) NOT NULL,
    BATCH_LIMIT int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP ADD CONSTRAINT PK_ODS_PROJECT_TABLE_MAP PRIMARY KEY (ODS_PROJECT_TABLE_MAP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET
(
    USER_AGENT_ID int NOT NULL,
    USER_AGENT varchar(5000),
    DEVICE_FAMILY varchar(5000),
    OS_FAMILY varchar(5000),
    OS_MAJOR varchar(5000),
    OS_MINOR varchar(5000),
    OS_PATCH varchar(5000),
    OS_PATCH_MINOR varchar(5000),
    USER_AGENT_FAMILY varchar(5000),
    USER_AGENT_MAJOR varchar(5000),
    USER_AGENT_MINOR varchar(5000),
    USER_AGENT_PATCH varchar(5000),
    USER_AGENT_BROWSER_VERSION varchar(5000),
    DEVICE_TYPE varchar(15),
    PLATFORM_TYPE varchar(15),
    APP_TYPE varchar(15),
    LOAD_DATETIME timestamp,
    BATCH_EVENT_ID int NOT NULL DEFAULT (-1)
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET ADD CONSTRAINT PK_DIM_USER_AGENT_SUPERSET PRIMARY KEY (USER_AGENT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_DIM_USER_AGENT_SUPERSET
(
    USER_AGENT_ID int NOT NULL,
    USER_AGENT varchar(5000),
    DEVICE_FAMILY varchar(5000),
    OS_FAMILY varchar(5000),
    OS_MAJOR varchar(5000),
    OS_MINOR varchar(5000),
    OS_PATCH varchar(5000),
    OS_PATCH_MINOR varchar(5000),
    USER_AGENT_FAMILY varchar(5000),
    USER_AGENT_MAJOR varchar(5000),
    USER_AGENT_MINOR varchar(5000),
    USER_AGENT_PATCH varchar(5000),
    USER_AGENT_BROWSER_VERSION varchar(5000),
    LOAD_DATETIME timestamp
);


CREATE TABLE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER
(
    BATCH_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER_SEQ'),
    PROJECT_NAME varchar(255) NOT NULL,
    CONFIG_NAME varchar(500) NOT NULL,
    START_TIME timestamp NOT NULL,
    END_TIME timestamp,
    PROJECT_STATUS varchar(255) NOT NULL,
    RUNNING_HOUR varchar(255) NOT NULL,
    REFERENCE varchar(100)
);

ALTER TABLE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER ADD CONSTRAINT PK_AUDIT_PROJECT_HEADER PRIMARY KEY (BATCH_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL
(
    BATCHDTL_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL_SEQ'),
    BATCH_ID int NOT NULL,
    STEP_ID int NOT NULL,
    STEP_NAME varchar(255) NOT NULL,
    STEP_STATUS varchar(255) NOT NULL,
    START_TIME timestamp NOT NULL,
    END_TIME timestamp,
    RUNNINGHOUR varchar(255) NOT NULL,
    ERROR_MESSAGE varchar(255),
    INSERTED_ROWS int,
    UPDATED_ROWS int
);

ALTER TABLE CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL ADD CONSTRAINT PK_AUDIT_PROJECT_DETAIL PRIMARY KEY (BATCHDTL_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_SESSION_END_LOG
(
    SESSION_END_LOG_KEY int,
    SESSION_DATE timestamp,
    AUTH_ID int,
    SKU_ID int,
    ORIGINAL_SKU_ID int,
    PRICE_PRIORITY_CODE varchar(50),
    CURRENT_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50),
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_SESSIONSTART_LOG
(
    SESSIONSTART_LOG_KEY int,
    START_DATE timestamp,
    AUTH_ID int,
    SKU_ID int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_FORM_IMPORT
(
    DS_BIMA_LOG_KEY int NOT NULL,
    CREATION_TIMESTAMP timestamp NOT NULL,
    PRODUCTION_TEST_FLAG varchar(5),
    EVENTID varchar(200),
    CORRELATION_ID varchar(500),
    YEAR int,
    OPERATION varchar(200),
    SUCCEEDED boolean,
    CLIENT_APP varchar(100),
    CLIENT_SKU varchar(100),
    CLIENT_VERSION varchar(100),
    PROVIDER_ID varchar(100),
    PARTNER_ID varchar(100),
    PARTNER_STATUS_CODE varchar(100),
    OFX_STATUS varchar(500),
    OFX_MESSAGE varchar(1000),
    AUTHID varchar(100),
    ALTERNATE_ID varchar(100),
    USER_ID varchar(100),
    EIN varchar(1000),
    EMPLOYER_EMAIL varchar(100),
    DS_HTTP_STATUS int,
    DS_ERROR_CODE varchar(200),
    DS_ERROR_DETAILS varchar(2000),
    DS_DOC_TYPE varchar(500),
    DS_DOC_ID varchar(500),
    ORIGIN varchar(500),
    ELAPSED_MILLISECS int,
    SERVICE varchar(50),
    DEVICE_ID varchar(2000),
    ERO_ID varchar(2000),
    SUB_ENTITY_ID varchar(50),
    SUB_ENTITY_NAME varchar(50),
    OFX_VALIDATION varchar(4000),
    COST_BASIS_FLAG varchar(4000),
    FIRST_OFX_ERROR_CODE varchar(50),
    FIRST_OFX_ERROR_TEXT varchar(4000),
    LAST_OFX_ERROR_CODE varchar(50),
    LAST_OFX_ERROR_TEXT varchar(4000),
    DOCUMENT_COUNT int,
    CHECKSUM varchar(25),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    REQUEST_UUID varchar(200),
    MASHUP_FLAG boolean
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_FORM_IMPORT ADD CONSTRAINT Key36 PRIMARY KEY (DS_BIMA_LOG_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.PRE_STG_TTO_PRS_VERBATIM
(
    PRS_DATE varchar(19),
    AUTH_ID char(50),
    PRODUCT_ENGINE char(50),
    VERBATIM varchar(4000),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_CTG_OVERRIDE
(
    TRANS_ID int NOT NULL,
    PROP04_FIXED varchar(255),
    AUTH_ID_FIXED int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp()
);


CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_SQL_MAP
(
    SOURCE_NAME varchar(16) NOT NULL,
    ETL_STAGE varchar(16) NOT NULL,
    EXEC_ORDER int NOT NULL,
    ENABLED int NOT NULL,
    SQL_FILE varchar(64) NOT NULL,
    SESSION_TO_VALIDATE varchar(2000)
);


CREATE TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT
(
    CUSTOMER_SEGMENT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT_SEQ'),
    SEGMENT_CODE varchar(50),
    CURRENT_YEAR_SEGMENT varchar(50),
    TAX_YEAR int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT ADD CONSTRAINT PK_LKP_CUSTOMER_SEGMENT PRIMARY KEY (CUSTOMER_SEGMENT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TAXORDER_STATUS
(
    TAXORDER_STATUS_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TAXORDER_STATUS_SEQ'),
    STATUS varchar(100) NOT NULL,
    DESCRIPTION varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TAXORDER_STATUS ADD CONSTRAINT PK_TAXORDER_STATUS PRIMARY KEY (TAXORDER_STATUS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK
(
    ITEM_ALIAS_RANK_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK_SEQ'),
    ITEM_ALIAS_CODE varchar(250),
    ITEM_ALIAS_RANK int,
    TAX_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK ADD CONSTRAINT PK_LKP_ITEM_ALIAS_RANK PRIMARY KEY (ITEM_ALIAS_RANK_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_ETX_RT_ORDERS
(
    CHANGE_ID varchar(255),
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    ENGINE_ID int,
    PRODUCT_CODE varchar(30),
    PRODUCT_VERSION varchar(20),
    TAX_YEAR int,
    CREDIT_PRIORITY_CODE varchar(50),
    FILING_TYPE varchar(50),
    ORDER_AMOUNT numeric(15,2),
    ORDER_TYPE varchar(2),
    ETX_REF_NUM varchar(32),
    ORDER_TIMESTAMP timestamp,
    PRICE_PRIORITY_CODE varchar(50),
    PRODUCT_ALIAS_CODE varchar(50),
    STATUS_TYPE int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    AUTH_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION
(
    EFS_APPLICATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION_SEQ'),
    APPLICATION_NAME varchar(255) NOT NULL,
    APPROVED_FLAG boolean,
    FIRST_USE_YEAR int,
    LAST_USE_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION ADD CONSTRAINT PK_LKP_EFS_APPLICATION PRIMARY KEY (EFS_APPLICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.RT_FLAG_TY13
(
    FILING_ID varchar(30) NOT NULL,
    RT_FLAG boolean
);


CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_MATT_EXTRACT_ORACLE_MAP
(
    SUBJECT varchar(16),
    EXEC_ORDER int,
    ENABLED int,
    SPOOL_SQL_FILE_NM varchar(200),
    TARGET_FILE_NM varchar(200),
    DELIMITER varchar(10),
    SRC_CONNECTION_STR varchar(200)
);


CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_MATT_IMPORT_EXCP_LIST
(
    FILE_NAME varchar(500),
    SOURCE_NAME varchar(500),
    IMPORT_STATUS char(1)
);


CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_FILE_MAP
(
    SOLUTION varchar(16),
    SOURCE_NAME varchar(16),
    ETL_STAGE varchar(16),
    EXEC_ORDER int,
    ENABLED int,
    SOURCE_FILE varchar(64),
    TARGET_TABLE varchar(64),
    DELIMITER varchar(2),
    SKIP_ROWS int,
    QUOTE_FLAG int,
    FILLER_TEMPLATE varchar(15000),
    PROJECT_NAME varchar(100)
);


CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_MATT
(
    AUDIT_KEY int NOT NULL,
    BATCH_NAME varchar(50),
    SESSION_NAME varchar(50) NOT NULL,
    TARGET_TABLENAME varchar(50),
    ETL_STAGE varchar(50),
    SOURCE_ROWS int,
    INSERTED_ROWS int,
    REJECTED_ROWS int,
    UPDATED_ROWS int,
    SESSION_STATUS char(1),
    LOG_MESSAGE varchar(500),
    ERROR_MESSAGE varchar(500),
    START_DATETIME timestamp,
    END_DATETIME timestamp,
    CREATED_BY varchar(50),
    CREATED_ON timestamp,
    MODIFIED_BY varchar(50),
    MODIFIED_ON timestamp,
    CHECK_SUM int,
    FILE_DATE date
);


CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_MATT_CONTROL_TRX
(
    SESSION_NAME varchar(50) NOT NULL,
    SOURCE_NAME varchar(500) NOT NULL,
    SOURCE_TYPE varchar(10),
    TGT_TABLE_NAME varchar(50),
    MAX_MODIFIED_DATE timestamp,
    MAX_CREATED_DATE timestamp,
    MAX_ID int,
    FILE_DELIMITER char(1)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_PRIMARY_FILER_BILLING_LOCATION
(
    PRIMARY_ID varchar(150),
    STATE_OR_ZIP_CODE varchar(25),
    RECEIVED_TIMESTAMP timestamp,
    ZIP_FLAG boolean,
    TAX_YEAR int,
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN
(
    BATCH_EVENT_RERUN_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN_SEQ'),
    BATCH_EVENT_ID int NOT NULL,
    PROJECT_ID int NOT NULL,
    COORDINATOR_INSTANCE_ID int,
    START_TIMESTAMP timestamp,
    END_TIMESTAMP timestamp,
    STATUS char(1) NOT NULL,
    PROJECT_MAP_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN ADD CONSTRAINT PK1_ETL_BATCH_EVENT_RERUN PRIMARY KEY (BATCH_EVENT_RERUN_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_SCREEN_QB
(
    SCREEN_ID int NOT NULL,
    APPLICATION_ASSIGNED_ID varchar(2000),
    CHANNEL varchar(255),
    SOURCE_APPLICATION_CODE varchar(25) NOT NULL,
    SOURCE_APPLICATION_SECTION varchar(255),
    SOURCE_APPLICATION_SECTION_CONTEXT varchar(255),
    SOURCE_APPLICATION_GROUP varchar(255),
    SOURCE_APPLICATION_GROUP_DETAIL varchar(255),
    FUNNEL_SORT_RANK int
);


CREATE TABLE CTG_ANALYTICS_STG.STG_SCREEN_UPLOAD_DATA
(
    SCREEN_ID int,
    APPLICATION_ASSIGNED_ID varchar(2000) NOT NULL,
    CHANNEL varchar(255),
    SOURCE_APPLICATION_CODE varchar(25)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_UPSELL_INFORMATION_QB
(
    TAX_YEAR varchar(256) NOT NULL,
    UPGRADE_OFFER_CATEGORY_ROLLUP varchar(256) NOT NULL,
    TAX_SITUATION varchar(256) NOT NULL,
    UPSELL_SEEN_CATEGORY varchar(256) NOT NULL,
    OFFER_INFORMATION varchar(256) NOT NULL,
    UPSELL_INFORMATION varchar(256),
    FROM_PRODUCT_ID varchar(256),
    TO_PRODUCT_ID varchar(256),
    SOURCE varchar(256),
    FROM_PRODUCT_BUNDLE_ID varchar(255),
    TO_PRODUCT_BUNDLE_ID varchar(255)
);


CREATE TABLE CTG_ANALYTICS_SRC.UPSELL_INFORMATION_SOURCE
(
    TAX_YEAR varchar(256) NOT NULL,
    UPGRADE_OFFER_CATEGORY_ROLLUP varchar(256) NOT NULL,
    TAX_SITUATION varchar(256) NOT NULL,
    UPSELL_SEEN_CATEGORY varchar(256) NOT NULL,
    OFFER_INFORMATION varchar(256) NOT NULL,
    UPSELL_INFORMATION varchar(256),
    FROM_PRODUCT_ID varchar(256),
    TO_PRODUCT_ID varchar(256),
    SOURCE varchar(256),
    FROM_PRODUCT_BUNDLE_ID varchar(255),
    TO_PRODUCT_BUNDLE_ID varchar(255)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_ESTORE_ORDER
(
    ORDER_NUMBER varchar(50),
    SHOPPER_ID varchar(20),
    AUTH_ID int,
    TRANSACTED_ITEM varchar(100),
    PRODUCT_ALIAS varchar(50),
    CHANNEL varchar(50),
    REGISTERED varchar(50),
    PRIMARY_PRIORITY_CODE varchar(50),
    HISTORICAL_PRIORITY_CODE varchar(50),
    ITEM_AMOUNT varchar(25),
    ORDER_DATE timestamp NOT NULL,
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    TAX_YEAR int,
    PRODUCT_STATE varchar(20),
    ORDER_TYPE varchar(50),
    PLATFORM varchar(50),
    MACHINE_ID varchar(100),
    PRODUCT varchar(50),
    PRODUCT_ENGINE varchar(50),
    PREP_TYPE varchar(50),
    TAX_RETURN_INDEX varchar(50),
    MATT_DATE timestamp,
    NP int,
    TAX_RETURN_ID varchar(255),
    UPGRADE_PATH varchar(100),
    ITERATION varchar(40),
    CAMPAIGN varchar(100),
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_AB_TEST_RECIPE_QB
(
    QB_RECIPE_ID int NOT NULL,
    RECIPE_IN_BEACON varchar(255),
    RECIPE_NAME varchar(500),
    TEST_NAME varchar(500),
    TEST_DESCRIPTION varchar(1500),
    TEST_BASE_TYPE varchar(10),
    QB_TEST_RECORD_ID int,
    RECIPE_HYPOTHESIS_DESCRIPTION varchar(2500),
    TEST_HYPOTHESIS_DESCRIPTION varchar(2500),
    TEST_START_TIMESTAMP timestamp,
    TEST_END_TIMESTAMP timestamp,
    PRODUCT_MANAGER_NAME varchar(100),
    ANALYST_NAME varchar(100),
    EXPERIENCE_DETAIL_LOCATION varchar(255),
    EXPERIENCE_DETAIL_VALUE varchar(255)
);


CREATE TABLE CTG_ANALYTICS_SRC.DIM_AB_TEST_RECIPE_QB
(
    QB_RECIPE_ID int NOT NULL,
    RECIPE_IN_BEACON varchar(255),
    RECIPE_NAME varchar(500),
    TEST_NAME varchar(500),
    TEST_DESCRIPTION varchar(1500),
    TEST_BASE_TYPE varchar(10),
    QB_TEST_RECORD_ID int,
    RECIPE_HYPOTHESIS_DESCRIPTION varchar(2500),
    TEST_HYPOTHESIS_DESCRIPTION varchar(2500),
    TEST_START_TIMESTAMP timestamp,
    TEST_END_TIMESTAMP timestamp,
    PRODUCT_MANAGER_NAME varchar(100),
    ANALYST_NAME varchar(100),
    EXPERIENCE_DETAIL_LOCATION varchar(255),
    EXPERIENCE_DETAIL_VALUE varchar(255),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_AB_TEST_RECIPE_QB ADD CONSTRAINT PK_DIM_AB_TEST_RECIPE_QB PRIMARY KEY (QB_RECIPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION
(
    AUTH_ID_CREATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION_SEQ'),
    AUTH_ID int NOT NULL,
    AUTH_ID_CREATION_TIMESTAMP timestamp NOT NULL,
    SERVICE_ID varchar(100),
    REALM int,
    INTUIT_TRANSACTION_ID varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION ADD CONSTRAINT PK_TRN_AUTH_ID_CREATION PRIMARY KEY (AUTH_ID_CREATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.DIM_BUNDLE_ROLLUP_QB
(
    PRODUCT_ALIAS_CODE varchar(30) NOT NULL,
    BUNDLE_NAME varchar(10) NOT NULL,
    SUB_BUNDLE_NAME varchar(10),
    TAX_YEAR int NOT NULL
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_BUNDLE_ROLLUP_QB ADD CONSTRAINT PK_DIM_BUNDLE_ROLLUP_QB PRIMARY KEY (PRODUCT_ALIAS_CODE) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_DIM_BUNDLE_ROLLUP
(
    BUNDLE_NAME varchar(10) NOT NULL,
    SUB_BUNDLE_NAME varchar(10),
    PRODUCT_ALIAS_CODE varchar(30) NOT NULL,
    TAX_YEAR int NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.DIM_MARKETING_FORECAST_QB
(
    FCST_DATE date NOT NULL,
    CORE_FLAG int NOT NULL,
    MOBILE_APP_FLAG int NOT NULL,
    FCST_TYPE varchar(10) NOT NULL,
    FCST_CATEGORY varchar(40) NOT NULL,
    TRAFFIC numeric(11,4) NOT NULL,
    NEAUTHS numeric(11,4) NOT NULL,
    UNITS numeric(11,4) NOT NULL,
    FCST_VERSION varchar(50) NOT NULL,
    TRAFFIC_MULTIPLIER numeric(11,4),
    NEAUTHS_MULTIPLIER numeric(11,4),
    UNITS_MULTIPLIER numeric(11,4)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_COST_LINK_CONNECTOR
(
    CAMPAIGN_DATE date NOT NULL,
    AFF_SOURCE varchar(50) NOT NULL,
    AFF_PID varchar(50) NOT NULL,
    AFF_CID varchar(50) NOT NULL,
    AFF_NAME varchar(100) NOT NULL,
    AFF_CLICKS int NOT NULL,
    CAMPAIGN_COST_COMMISSION numeric(7,2) NOT NULL,
    CAMPAIGN_COST_NETWORK numeric(7,2) NOT NULL,
    CAMPAIGN_COST_BONUS numeric(7,2) NOT NULL,
    CAMPAIGN_COST_ADJUSTMENT numeric(7,2) NOT NULL,
    AFF_TTO_AUTH_NEW int NOT NULL,
    AFF_TTO_SALES int NOT NULL,
    AFF_REVENUE numeric(7,2) NOT NULL,
    BATCH_EVENT_ID int NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.DIM_TILE_QB
(
    TILE_NAME varchar(50) NOT NULL,
    SKU_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_TILE_QB ADD CONSTRAINT PK_DIM_TILE_QB PRIMARY KEY (TILE_NAME) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_TILE_QB
(
    SKU_ID int,
    TILE_NAME varchar(50) NOT NULL
);


CREATE TABLE CTG_ANALYTICS_STG.STG_ACCEPTED_RETURN
(
    EF_PAYMENTS_KEY int NOT NULL,
    PRIMARY_FILER_ID varchar(255) NOT NULL,
    SECONDARY_FILER_ID varchar(255),
    TAX_YEAR int NOT NULL,
    BANK_RTN varchar(255),
    FILING_TYPE varchar(255) NOT NULL,
    ENGINE_CODE varchar(255),
    ACCEPTED_TIMESTAMP timestamp NOT NULL,
    AMOUNT numeric(18,2) NOT NULL,
    PAYMENT_METHOD int NOT NULL,
    PAYMENT_DESCRIPTION varchar(255) NOT NULL,
    CREDIT_FOR_SALE_PRIORITY_CODE varchar(255),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_STG.STG_COST_CAMELOT
(
    CAMPAIGN_DATE date NOT NULL,
    CID varchar(100) NOT NULL,
    COST numeric(37,15),
    CLICKS int,
    IMPRESSIONS int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    BATCH_EVENT_ID int NOT NULL,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_FORM_IMPORT
(
    CREATION_TIMESTAMP timestamp NOT NULL,
    PRODUCTION_TEST_FLAG varchar(5),
    EVENTID varchar(200),
    CORRELATION_ID varchar(500),
    YEAR int,
    OPERATION varchar(200),
    SUCCEEDED boolean,
    CLIENT_APP varchar(100),
    CLIENT_SKU varchar(100),
    CLIENT_VERSION varchar(100),
    PROVIDER_ID varchar(100),
    PARTNER_ID varchar(100),
    PARTNER_STATUS_CODE varchar(100),
    OFX_STATUS varchar(500),
    OFX_MESSAGE varchar(1000),
    AUTHID varchar(100),
    ALTERNATE_ID varchar(100),
    USER_ID varchar(100),
    EIN varchar(1000),
    EMPLOYER_EMAIL varchar(100),
    DS_HTTP_STATUS int,
    DS_ERROR_CODE varchar(200),
    DS_ERROR_DETAILS varchar(2000),
    DS_DOC_TYPE varchar(500),
    DS_DOC_ID varchar(500),
    ORIGIN varchar(500),
    ELAPSED_MILLISECS int,
    SERVICE varchar(50),
    DEVICE_ID varchar(2000),
    ERO_ID varchar(2000),
    SUB_ENTITY_ID varchar(50),
    SUB_ENTITY_NAME varchar(50),
    OFX_VALIDATION varchar(4000),
    COST_BASIS_FLAG varchar(4000),
    FIRST_OFX_ERROR_CODE varchar(50),
    FIRST_OFX_ERROR_TEXT varchar(4000),
    LAST_OFX_ERROR_CODE varchar(50),
    LAST_OFX_ERROR_TEXT varchar(4000),
    DOCUMENT_COUNT int,
    CHECKSUM varchar(25),
    MATT_DATE timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    AUDIT_INS_BY varchar(50) NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_COST_CAMELOT
(
    CAMPAIGN_DATE date NOT NULL,
    CID varchar(100) NOT NULL,
    COST numeric(37,15),
    CLICKS int,
    IMPRESSIONS int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    BATCH_EVENT_ID int NOT NULL,
    UPDATED_TIMESTAMP timestamp,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_COST_COMMISSION_JUNCTION
(
    POSTING_DATE timestamp,
    EVENT_DATE timestamp,
    ID varchar(15),
    ACTION_NAME varchar(100),
    TYPE varchar(50),
    CORRELATION_BASIS varchar(50),
    STATUS varchar(20),
    CORRECTED varchar(10),
    SALE_AMOUNT numeric(10,5),
    ORDER_DISCOUNT numeric(10,5),
    PUBLISHER_COMMISSION numeric(10,5),
    CJ_FEE numeric(10,5),
    PUBLISHER_ID varchar(15),
    PUBLISHER_NAME varchar(100),
    WEBSITE_ID varchar(15),
    WEBSITE_NAME varchar(200),
    LINK_ID varchar(15),
    ORDER_ID varchar(50),
    CLICK_DATE timestamp,
    ACTION_ID varchar(15),
    AD_OWNER_AD_ID varchar(15),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    BATCH_EVENT_ID int NOT NULL,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_COST_AKQA
(
    CAMPAIGN_DATE date,
    CID varchar(100),
    SRID varchar(100),
    PPC_COST numeric(38,2),
    PPC_CLICKS numeric(38,0),
    PPC_IMPRESSIONS numeric(38,0),
    PPC_AVG_POSITION numeric(8,6),
    DEVICE_TYPE varchar(5),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    BATCH_EVENT_ID int NOT NULL,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_PRODUCT_CODE
(
    ITEM_ALIAS_CODE varchar(250) NOT NULL,
    INTUIT_ITEM_CODE varchar(250) NOT NULL,
    PRODUCT_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_FAMILY_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_EDITION_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_VERSION_CODE varchar(250) NOT NULL,
    PRODUCT_ROLLUP varchar(250) NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.DIM_PRODUCT_QB
(
    INTUIT_ITEM_CODE varchar(250) NOT NULL,
    ITEM_ALIAS_CODE varchar(250) NOT NULL,
    PRODUCT_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_FAMILY_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_EDITION_DESCRIPTION varchar(250) NOT NULL,
    PRODUCT_VERSION_CODE varchar(250) NOT NULL,
    PRODUCT_ROLLUP varchar(250) NOT NULL
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_PRODUCT_QB ADD CONSTRAINT PK_DIM_PRODUCT_QB PRIMARY KEY (INTUIT_ITEM_CODE, ITEM_ALIAS_CODE) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_UPSELL_AUTH_ID_EXCLUSION
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL DEFAULT (-1),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_UPSELL_AUTH_ID_EXCLUSION ADD CONSTRAINT PK_TRN_UPSELL_AUTH_ID_EXCLUSION PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_UPSELL_INFORMATION_EXCLUSION
(
    UPSELL_INFORMATION varchar(256) NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL DEFAULT (-1),
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_UPSELL_INFORMATION_EXCLUSION ADD CONSTRAINT PK_TRN_UPSELL_INFO_EXCLUSION PRIMARY KEY (UPSELL_INFORMATION, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_EFS_FILING_STATUS_CHANGE
(
    CHANGE_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    PRIMARY_ID varchar(255) NOT NULL,
    SECONDARY_ID varchar(255),
    FILING_ID varchar(255) NOT NULL,
    FILING_TYPE varchar(255) NOT NULL,
    STATUS_TYPE int NOT NULL,
    TAX_DATE_ID int NOT NULL,
    TIMESTAMP_DTM timestamp NOT NULL,
    AUTH_ID int
);


CREATE TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE_TABLE
(
    CUSTOMER_KEY int NOT NULL,
    AUTH_ID int,
    TAX_YEAR int NOT NULL,
    TOTAL_REVENUE numeric(8,2) NOT NULL,
    FEDERAL_REVENUE numeric(8,2) NOT NULL,
    STATE_REVENUE numeric(8,2) NOT NULL,
    STATE_ATTACH_COUNT int NOT NULL,
    MINDBENDER_REVENUE numeric(8,2) NOT NULL,
    MINDBENDER_FLAG int NOT NULL,
    CA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    CA_REFUND_TRANSFER_FLAG int NOT NULL,
    NON_CA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    NON_CA_REFUND_TRANSFER_FLAG int NOT NULL,
    REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    REFUND_TRANSFER_FLAG int NOT NULL,
    CA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    CA_AUDIT_DEFENSE_FLAG int NOT NULL,
    NON_CA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    NON_CA_AUDIT_DEFENSE_FLAG int NOT NULL,
    AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    AUDIT_DEFENSE_FLAG int NOT NULL,
    CA_MAX_REVENUE numeric(8,2) NOT NULL,
    CA_MAX_FLAG int NOT NULL,
    NON_CA_MAX_REVENUE numeric(8,2) NOT NULL,
    NON_CA_MAX_FLAG int NOT NULL,
    MAX_REVENUE numeric(8,2) NOT NULL,
    MAX_FLAG int NOT NULL,
    PS_REVENUE numeric(8,2) NOT NULL,
    PS_FLAG int NOT NULL,
    QB_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    QB_SUBSCRIPTION_FLAG int NOT NULL,
    QBTT_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    QBTT_SUBSCRIPTION_FLAG int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS.DIM_TAX_DATE
(
    TAX_DATE_ID int NOT NULL,
    TAX_DATE date NOT NULL,
    TAX_YEAR int NOT NULL,
    TAX_WEEK int,
    TAX_DAY int NOT NULL,
    TAX_HOUR int NOT NULL,
    REPORTING_DATE date NOT NULL,
    TAX_YEAR_IND varchar(80),
    SEASON_PART varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TAX_DATE ADD CONSTRAINT PK_DIM_TAX_DATE PRIMARY KEY (TAX_DATE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_MARKETING_FORECAST
(
    MARKETING_FORECAST_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_MARKETING_FORECAST_SEQ'),
    FCST_DATE date NOT NULL,
    CORE_FLAG int NOT NULL,
    MOBILE_APP_FLAG int NOT NULL,
    FCST_TYPE varchar(10) NOT NULL,
    FCST_CATEGORY varchar(40) NOT NULL,
    TRAFFIC numeric(11,4) NOT NULL,
    NEAUTHS numeric(11,4) NOT NULL,
    UNITS numeric(11,4) NOT NULL,
    FCST_VERSION varchar(50) NOT NULL,
    CURRENT_FCST_IND int NOT NULL,
    TRAFFIC_MULTIPLIER numeric(11,4),
    NEAUTHS_MULTIPLIER numeric(11,4),
    UNITS_MULTIPLIER numeric(11,4),
    TAX_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_MARKETING_FORECAST ADD CONSTRAINT PK_DIM_MARKETING_FORECAST PRIMARY KEY (MARKETING_FORECAST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_AUTH
(
    AUTH_ID int NOT NULL,
    CREATED_TAX_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_AUTH ADD CONSTRAINT PK_DIM_AUTH PRIMARY KEY (AUTH_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL
(
    AUTHORIZATION_LEVEL_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL_SEQ'),
    AUTHORIZATION_LEVEL int NOT NULL,
    AUTHORIZATION_NAME varchar(80),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL ADD CONSTRAINT PK_DIM_AUTHORIZATION_LEVEL PRIMARY KEY (AUTHORIZATION_LEVEL_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_CAMPAIGN
(
    CAMPAIGN_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_CAMPAIGN_SEQ'),
    CID varchar(400) NOT NULL,
    CID1 varchar(400),
    CID2 varchar(400),
    CID3 varchar(400),
    CID4 varchar(400),
    CID5 varchar(400),
    CID6 varchar(400),
    CID7 varchar(400),
    CID8 varchar(400),
    CHANNEL varchar(100),
    CHANNEL_GROUP varchar(100),
    VENUE varchar(255),
    SEGMENT varchar(80),
    SUBVENUE varchar(80),
    TAX_YEAR varchar(4),
    PPC_DEVICE varchar(50),
    PPC_GEO varchar(50),
    PPC_KW_BUCKET varchar(50),
    PPC_KW_SUBBUCKET varchar(50),
    PPC_KW_ADGROUP varchar(400),
    AFF_PAYOUT_TYPE varchar(50),
    AFF_NETWORK_ID_RULE varchar(255),
    AFF_NETWORK_ID varchar(50),
    BN_DFA_SITE_NAME varchar(100),
    BN_DFA_PLACEMENT_NAME varchar(200),
    BN_DFA_CREATIVE_NAME varchar(100),
    BN_MEDIA_CATEGORY varchar(200),
    BN_PLACEMENT_DECLARED_TARGET varchar(100),
    BN_CREATIVE_MESSAGE varchar(100),
    EMAIL1 varchar(100),
    EMAIL2 varchar(100),
    EMAIL3 varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_CAMPAIGN ADD CONSTRAINT PK_DIM_CAMPAIGN PRIMARY KEY (CAMPAIGN_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PAGE
(
    PAGE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_PAGE_SEQ'),
    PAGE_NAME varchar(500),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PAGE ADD CONSTRAINT PK_DIM_PAGE PRIMARY KEY (PAGE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PAGE_URL
(
    PAGE_URL_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_PAGE_URL_SEQ'),
    PAGE_URL varchar(5000) NOT NULL,
    PAGE_GROUP varchar(100),
    DOMAIN varchar(200),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PAGE_URL ADD CONSTRAINT PK_DIM_PAGE_URL PRIMARY KEY (PAGE_URL_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PRODUCT
(
    PRODUCT_ID int NOT NULL,
    INTUIT_ITEM_CODE varchar(250),
    PRODUCT_DESCRIPTION varchar(250),
    PRODUCT_FAMILY_DESCRIPTION varchar(250),
    PRODUCT_EDITION_DESCRIPTION varchar(250),
    PRODUCT_VERSION_CODE varchar(250),
    PRODUCT_ROLLUP varchar(250),
    PRODUCT_ROLLUP_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PRODUCT ADD CONSTRAINT PK_DIM_PRODUCT PRIMARY KEY (PRODUCT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_VISITOR_IVID
(
    VISITOR_IVID_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_VISITOR_IVID_SEQ'),
    IVID varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_VISITOR_IVID ADD CONSTRAINT PK_DIM_VISITOR_IVID PRIMARY KEY (VISITOR_IVID_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_VISITOR_OMT
(
    VISITOR_OMT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_VISITOR_OMT_SEQ'),
    VISID varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int DEFAULT (-1)
);

ALTER TABLE CTG_ANALYTICS.DIM_VISITOR_OMT ADD CONSTRAINT PK_DIM_VISITOR_OMT PRIMARY KEY (VISITOR_OMT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTHENTICATION
(
    AUTHENTICATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_AUTHENTICATION_SEQ'),
    AUTH_LOG_KEY int,
    AUTH_ID int NOT NULL,
    AUTH_TIMESTAMP timestamp NOT NULL,
    TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    SKU_ROLLUP_ID int,
    AUTHORIZATION_LEVEL_ID int,
    SOURCE_APPLICATION_ID int,
    IP_ADDRESS varchar(80),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
)
PARTITION BY (date_part('WEEK', FACT_AUTHENTICATION.AUTH_TIMESTAMP));

ALTER TABLE CTG_ANALYTICS.FACT_AUTHENTICATION ADD CONSTRAINT PK_FACT_AUTHENTICATION PRIMARY KEY (AUTHENTICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_CLICKSTREAM
(
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISITOR_IVID_ID int,
    AUTH_ID int,
    AUTH_ID_SOURCE_ID int,
    SERVER_TIMESTAMP timestamp NOT NULL,
    TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    PAGE_ID int,
    PAGE_URL_ID int,
    REFERRER_PAGE_URL_ID int,
    FORM_ID int,
    CAMPAIGN_ID int,
    VISIT_NUM int,
    USER_AGENT_ID int,
    NONFFA_FLAG boolean NOT NULL,
    VALID_FOR_FIRST_VISIT_FLAG boolean NOT NULL,
    POST_KEYWORD_ID int,
    START_EXPERIENCE varchar(25),
    SOURCE_APPLICATION_ID int,
    GEO_LOCATION_ID int,
    IP_ADDRESS varchar(50),
    PURCHASE_FLAG boolean NOT NULL DEFAULT false,
    SITE_AREA_ID int,
    HELP_USAGE_ID int NOT NULL,
    SCREEN_ID int,
    PRIOR_YEAR_TAXPREP_METHOD_ID int,
    PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID int,
    EXPERIENCE_ID int,
    EXPERIENCE_RENDERED_ID int,
    AB_TEST_ID int,
    RECIPE_ID int,
    PRIORITY_CODE_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
)
PARTITION BY (((((date_part('YEAR', FACT_CLICKSTREAM.SERVER_TIMESTAMP) * 100000) + (date_part('MONTH', FACT_CLICKSTREAM.SERVER_TIMESTAMP) * 100)) + date_part('WEEK', FACT_CLICKSTREAM.SERVER_TIMESTAMP)))::int);

ALTER TABLE CTG_ANALYTICS.FACT_CLICKSTREAM ADD CONSTRAINT PK_FACT_CLICKSTREAM PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST
(
    AUTHENTICATION_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    FIRST_AUTH_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST ADD CONSTRAINT K1_SUB_AUTHENTICATION_FIRST PRIMARY KEY (AUTHENTICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST
(
    AUTHENTICATION_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    FIRST_AUTH_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST ADD CONSTRAINT PK_SUB_AUTHORIZATION_FIRST PRIMARY KEY (AUTHENTICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_FIRST
(
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    FIRST_SERVER_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_FIRST ADD CONSTRAINT PK_SUB_CLICKSTREAM_VISITOR_FIRST PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_FORM
(
    FORM_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_FORM_SEQ'),
    FORM_ID_SRC int NOT NULL,
    FORM_NAME varchar(100) NOT NULL,
    COMPLEXITY varchar(10),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_FORM ADD CONSTRAINT PK_DIM_FORM_ID PRIMARY KEY (FORM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST
(
    CLICKSTREAM_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    FIRST_SERVER_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST ADD CONSTRAINT PK_SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH
(
    AUTHENTICATION_ID int NOT NULL,
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int,
    TIME_DIFFERENTIAL int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
);

ALTER TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH ADD CONSTRAINT PK_BRIDGE_CLICKSTREAM_AUTH PRIMARY KEY (AUTHENTICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER
(
    TAXORDER_ID int NOT NULL,
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int,
    TIME_DIFFERENTIAL int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
);

ALTER TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER ADD CONSTRAINT PK_BRIDGE_CLICKSTREAM_TAXORDER PRIMARY KEY (TAXORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST
(
    TAXORDER_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    TAXFILER_ID int NOT NULL,
    FIRST_FED_TAXORDER_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST ADD CONSTRAINT PK_SUB_TAXORDER_FED_FIRST PRIMARY KEY (TAXORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_TAXFILER_SEGMENT
(
    TAXFILER_SEGMENT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_TAXFILER_SEGMENT_SEQ'),
    TAXFILER_ID int,
    TAXFILER_SEGMENT_CODE varchar(4),
    TAX_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TAXFILER_SEGMENT ADD CONSTRAINT PK_DIM_TAXFILER_SEGMENT PRIMARY KEY (TAXFILER_SEGMENT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_TAXORDER
(
    TAXORDER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_TAXORDER_SEQ'),
    TTO_ORDERS_KEY int,
    CHANGE_ID varchar(255),
    CUSTOMER_KEY int NOT NULL,
    TAXFILER_ID int NOT NULL,
    AUTH_ID int,
    PRODUCT_ALIAS_ID int NOT NULL,
    ORDER_TIMESTAMP timestamp NOT NULL,
    TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    CREDIT_PRIORITY_ID int,
    PRICE_PRIORITY_ID int,
    CURRENT_PRIORITY_ID int,
    ORDER_NUMBER varchar(64),
    ORDER_TYPE varchar(20),
    PRODUCT_VERSION int,
    ORDER_AMOUNT numeric(15,2),
    VALID_FLAG char(1) NOT NULL,
    ORIGINAL_SKU_ROLLUP_ID int,
    SOURCE_APPLICATION_ID int,
    STATUS_TYPE int,
    FILING_TYPE_ID int,
    RT_FLAG boolean,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_TAXORDER ADD CONSTRAINT PK_FACT_TAXORDER PRIMARY KEY (TAXORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_MULTIFILER_VISITOR
(
    VISITOR_OMT_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    MULTIFILER_TIMESTAMP timestamp NOT NULL,
    MULTIFILER_REASON_ID int NOT NULL,
    PARENT_MULTIFILER_REASON_ID int NOT NULL,
    GENERATION_NUMBER int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.FACT_MULTIFILER_VISITOR ADD CONSTRAINT PK_FACT_MULTIFILER_VISITOR PRIMARY KEY (VISITOR_OMT_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_MULTIFILER_AUTH
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    MULTIFILER_TIMESTAMP timestamp NOT NULL,
    MULTIFILER_REASON_ID int NOT NULL,
    PARENT_MULTIFILER_REASON_ID int NOT NULL,
    GENERATION_NUMBER int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_MULTIFILER_AUTH ADD CONSTRAINT PK_FACT_MULTIFILER_AUTH PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_AUTH_ID_SOURCE
(
    AUTH_ID_SOURCE_ID int NOT NULL,
    SOURCE_NAME varchar(150) NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL
);

ALTER TABLE CTG_ANALYTICS.DIM_AUTH_ID_SOURCE ADD CONSTRAINT PK_DIM_AUTH_ID_SOURCE PRIMARY KEY (AUTH_ID_SOURCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PRODUCT_ROLLUP
(
    PRODUCT_ROLLUP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_PRODUCT_ROLLUP_SEQ'),
    PRODUCT_ID int,
    PRODUCT_ENGINE_DSC varchar(100),
    PRODUCT_ROLLUP varchar(100),
    PAID_FLAG int,
    PRODUCT_NAME varchar(100),
    DISPLAY_PRODUCT_NAME_WITH_SORT varchar(100),
    PRODUCT_SORT int,
    DISPLAY_PRODUCT_NAME varchar(100),
    PRODUCT_EDTN_DSC varchar(250),
    PRODUCT_CODE_ROLLUP varchar(100),
    EFFECTIVE_START_TAX_YEAR int,
    EFFECTIVE_END_TAX_YEAR int,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PRODUCT_ROLLUP ADD CONSTRAINT PK_DIM_PRODUCT_ROLLUP PRIMARY KEY (PRODUCT_ROLLUP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_VISITOR_AUTHID
(
    AUTH_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_VISIT_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.FACT_VISITOR_AUTHID ADD CONSTRAINT PK_FACT_VISITOR_AUTHID PRIMARY KEY (VISITOR_OMT_ID, AUTH_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_TAXFILER
(
    TAXFILER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_TAXFILER_SEQ'),
    PRIMARY_ID varchar(150) NOT NULL,
    SECONDARY_ID varchar(150),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TAXFILER ADD CONSTRAINT PK_DIM_TAXFILER PRIMARY KEY (TAXFILER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PRODUCT_ALIAS
(
    PRODUCT_ALIAS_ID int NOT NULL,
    PRODUCT_ID int NOT NULL,
    ITEM_ALIAS_CODE varchar(250),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PRODUCT_ALIAS ADD CONSTRAINT PK_DIM_PRODUCT_ALIAS PRIMARY KEY (PRODUCT_ALIAS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PRIORITY_CODE
(
    PRIORITY_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_PRIORITY_CODE_SEQ'),
    PRIORITY_CODE varchar(50) NOT NULL,
    SOURCE_CODE_ALIAS varchar(50),
    ALLIANCE varchar(250),
    SPONSOR_TYPE varchar(250),
    MARKETING_DESCRIPTION varchar(250),
    SALES_DESCRIPTION varchar(250),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PRIORITY_CODE ADD CONSTRAINT PK_DIM_PRIORITY_CODE PRIMARY KEY (PRIORITY_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN
(
    AUTH_CREDIT_CAMPAIGN_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN_SEQ'),
    CLICKSTREAM_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    NEAUTH_TIMESTAMP timestamp NOT NULL,
    NEAUTH_TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    CAMPAIGN_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN ADD CONSTRAINT PK_SUB_AUTH_CREDIT_CAMPAIGN PRIMARY KEY (AUTH_CREDIT_CAMPAIGN_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_PRS
(
    PRS_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    PRS_TIMESTAMP timestamp NOT NULL,
    SCORE int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_PRS ADD CONSTRAINT PK_FACT_PRS PRIMARY KEY (PRS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_BUNDLE_ROLLUP
(
    BUNDLE_ROLLUP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_BUNDLE_ROLLUP_SEQ'),
    PRODUCT_ID int NOT NULL,
    BUNDLE_NAME varchar(10) NOT NULL,
    SUB_BUNDLE_NAME varchar(10),
    PRODUCT_ALIAS_CODE varchar(30) NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_BUNDLE_ROLLUP ADD CONSTRAINT PK_DIM_BUNDLE_ROLLUP PRIMARY KEY (BUNDLE_ROLLUP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_AUTH_ID_PRS
(
    AUTH_ID_PRS_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.AGG_AUTH_ID_PRS_SEQ'),
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    AVERAGE_SCORE int NOT NULL,
    SCORE_COUNT int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_PRS ADD CONSTRAINT PK_AGG_AUTH_ID_PRS PRIMARY KEY (AUTH_ID_PRS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_POST_KEYWORD
(
    POST_KEYWORD_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_POST_KEYWORD_SEQ'),
    POST_KEYWORD varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_POST_KEYWORD ADD CONSTRAINT PK_DIM_POST_KEYWORD PRIMARY KEY (POST_KEYWORD_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_MULTIFILER_REASON
(
    MULTIFILER_REASON_ID int NOT NULL,
    REASON varchar(50) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_MULTIFILER_REASON ADD CONSTRAINT PK_DIM_MULTIFILER_REASON PRIMARY KEY (MULTIFILER_REASON_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    CLICKSTREAM_ID int NOT NULL,
    START_EXPERIENCE varchar(25) NOT NULL,
    FIRST_START_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    FIRST_START_TAX_DATE_ID int NOT NULL DEFAULT (-1),
    FIRST_START_USER_AGENT_ID int NOT NULL DEFAULT (-1)
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST ADD CONSTRAINT PK_SUB_CLICKSTREAM_TT_START_FIRST PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_URL_PARAMETERS
(
    CLICKSTREAM_ID int NOT NULL,
    ZNA varchar(200),
    ZNP varchar(200),
    SRID varchar(200),
    ADID varchar(200),
    PRIORITY_CODE varchar(200),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_URL_PARAMETERS ADD CONSTRAINT PK_FACT_URL_PARAMETERS PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SOURCE_APPLICATION
(
    SOURCE_APPLICATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_SOURCE_APPLICATION_SEQ'),
    SOURCE_APPLICATION_DESC varchar(20) NOT NULL,
    SOURCE_APPLICATION_VALUE varchar(100),
    STANDARD_APPLICATION_VALUE varchar(100) NOT NULL,
    ROLLUP_APPLICATION_VALUE varchar(100) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    USER_AGENT_ID int NOT NULL DEFAULT (-1)
);

ALTER TABLE CTG_ANALYTICS.DIM_SOURCE_APPLICATION ADD CONSTRAINT PK_DIM_SOURCE_APPLICATION PRIMARY KEY (SOURCE_APPLICATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_TAXPREP_SESSION
(
    TAXPREP_SESSION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_TAXPREP_SESSION_SEQ'),
    SESSION_LOG_KEY int NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    TAX_DATE_ID int NOT NULL,
    SESSION_TIMESTAMP timestamp NOT NULL,
    SESSION_TYPE varchar(5) NOT NULL,
    SKU_ROLLUP_ID int,
    ORIGINAL_SKU_ROLLUP_ID int,
    PRICE_PRIORITY_ID int,
    CURRENT_PRIORITY_ID int,
    CREDIT_PRIORITY_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
)
PARTITION BY (((((date_part('YEAR', FACT_TAXPREP_SESSION.SESSION_TIMESTAMP) * 100000) + (date_part('MONTH', FACT_TAXPREP_SESSION.SESSION_TIMESTAMP) * 100)) + date_part('WEEK', FACT_TAXPREP_SESSION.SESSION_TIMESTAMP)))::int);

ALTER TABLE CTG_ANALYTICS.FACT_TAXPREP_SESSION ADD CONSTRAINT PK_FACT_TAXPREP_SESSION PRIMARY KEY (TAXPREP_SESSION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_UPSELL_INFORMATION
(
    UPSELL_INFORMATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_UPSELL_INFORMATION_SEQ'),
    UPSELL_OFFER_ID int NOT NULL,
    UPSELL_INFORMATION varchar(256) NOT NULL,
    TAX_YEAR int NOT NULL,
    FROM_PRODUCT_ID int,
    TO_PRODUCT_ID int,
    FROM_PRODUCT_BUNDLE_ID varchar(255),
    TO_PRODUCT_BUNDLE_ID varchar(255),
    SOURCE varchar(64),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_UPSELL_INFORMATION ADD CONSTRAINT PK_DIM_UPSELL_INFORMATION PRIMARY KEY (UPSELL_INFORMATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_UPSELL_OFFER
(
    UPSELL_OFFER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_UPSELL_OFFER_SEQ'),
    TAX_YEAR int NOT NULL,
    UPGRADE_OFFER_CATEGORY_ROLLUP varchar(256),
    TAX_SITUATION varchar(256),
    UPSELL_SEEN_CATEGORY varchar(512) NOT NULL,
    OFFER_INFORMATION varchar(256) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_UPSELL_OFFER ADD CONSTRAINT PK_DIM_UPSELL_OFFER PRIMARY KEY (UPSELL_OFFER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_UPSELL
(
    CLICKSTREAM_ID int NOT NULL,
    UPSELL_OFFER_ID int NOT NULL,
    UPSELL_INFORMATION_ID int,
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    OFFER_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_UPSELL ADD CONSTRAINT PK_FACT_CLICKSTREAM_UPSELL PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_GEO_LOCATION
(
    GEO_LOCATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_GEO_LOCATION_SEQ'),
    COUNTRY varchar(25),
    STATE_ABBREVIATION varchar(25),
    DMA_ID varchar(10),
    CITY varchar(100),
    ZIP_CODE varchar(20),
    TAXABLE_STATE_FLAG boolean,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_GEO_LOCATION ADD CONSTRAINT PK_DIM_GEO_LOCATION PRIMARY KEY (GEO_LOCATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_FILING_TYPE
(
    FILING_TYPE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_FILING_TYPE_SEQ'),
    FILING_TYPE varchar(50) NOT NULL,
    FORM_FAMILY varchar(30),
    AGENCY char(2),
    ETX_CLASS_ID int,
    DESCRIPTION varchar(50),
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_FILING_TYPE ADD CONSTRAINT PK_DIM_FILING_TYPE PRIMARY KEY (FILING_TYPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_HELP_USAGE
(
    HELP_USAGE_ID int NOT NULL,
    HELP_USAGE_DESCRIPTION varchar(50) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_HELP_USAGE ADD CONSTRAINT PK_DIM_HELP_USAGE PRIMARY KEY (HELP_USAGE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SEGMENT
(
    SEGMENT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_SEGMENT_SEQ'),
    SEGMENT_CODE varchar(50) NOT NULL,
    SEGMENT_GROUP varchar(50),
    CUSTOMER_TYPE varchar(50),
    CUSTOMER_TYPE_RANK int,
    DEFINITION varchar(50),
    YEARS_PURCHASED varchar(500),
    TAX_YEAR int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_SEGMENT ADD CONSTRAINT PK_DIM_SEGMENT PRIMARY KEY (SEGMENT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION
(
    PRIMARY_FILER_LOCATION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION_SEQ'),
    PRIMARY_ID varchar(150),
    BILLING_STATE_CODE varchar(25),
    STATE_RECEIVED_TIMESTAMP timestamp,
    BILLING_ZIP_CODE varchar(25),
    ZIP_RECEIVED_TIMESTAMP timestamp,
    RESIDENCE_STATE_CODE varchar(25),
    RESIDENCE_ZIP_CODE varchar(25),
    TAX_YEAR int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION ADD CONSTRAINT PK_DIM_PRIMARY_FILER_LOCATION PRIMARY KEY (PRIMARY_FILER_LOCATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SITE_AREA
(
    SITE_AREA_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_SITE_AREA_SEQ'),
    SITE_AREA varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_SITE_AREA ADD CONSTRAINT PK_DIM_SITE_AREA PRIMARY KEY (SITE_AREA_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE
(
    SESSION_TO_COMPLETE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE_SEQ'),
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    SESSION_COUNT int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE ADD CONSTRAINT PK_AGG_SESSIONS_TO_COMPLETE PRIMARY KEY (SESSION_TO_COMPLETE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SCREEN
(
    SCREEN_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_SCREEN_SEQ'),
    APPLICATION_ASSIGNED_ID varchar(2000) NOT NULL,
    CHANNEL varchar(255),
    SOURCE_APPLICATION_CODE varchar(25) NOT NULL,
    SOURCE_APPLICATION_SECTION varchar(255),
    SOURCE_APPLICATION_SECTION_CONTEXT varchar(255),
    SOURCE_APPLICATION_GROUP varchar(255),
    SOURCE_APPLICATION_GROUP_DETAIL varchar(255),
    FUNNEL_SORT_RANK int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_SCREEN ADD CONSTRAINT PK_DIM_SCREEN PRIMARY KEY (SCREEN_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_SKU_SELECTION
(
    CLICKSTREAM_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    TAX_DATE_ID int NOT NULL,
    SERVER_TIMESTAMP timestamp NOT NULL,
    RECOMMEND_REASON varchar(100),
    RECOMMENDED_SKU_ROLLUP_ID int,
    SELECTED_SKU_ROLLUP_ID int,
    DEFAULT_RECOMMENDED_SKU_ROLLUP_ID int,
    EXPERIENCE_LOCATION_SEEN varchar(256),
    EXPERIENCE_SUB_LOCATION_SEEN varchar(256),
    EXPERIENCE_LOCATION_RECOMMENDED varchar(256),
    EXPERIENCE_SUB_LOCATION_RECOMMENDED varchar(256),
    SITUATION_CHANGED varchar(256),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.FACT_SKU_SELECTION ADD CONSTRAINT PK_FACT_SKU_SELECTION PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SKU_ROLLUP
(
    SKU_ROLLUP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_SKU_ROLLUP_SEQ'),
    SKU_ID int,
    SKU_DESCRIPTION varchar(100),
    SKU_ROLLUP varchar(100),
    PAID_FLAG int,
    SKU_NAME varchar(100),
    DISPLAY_SKU_NAME_WITH_SORT varchar(100),
    SKU_SORT int,
    DISPLAY_SKU_NAME varchar(100),
    PRODUCT_EDITION_DESCRIPTION varchar(250),
    PRODUCT_CODE_ROLLUP varchar(100),
    EFFECTIVE_START_TAX_YEAR int,
    EFFECTIVE_END_TAX_YEAR int,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_SKU_ROLLUP ADD CONSTRAINT PK_DIM_SKU_ROLLUP PRIMARY KEY (SKU_ROLLUP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_STATE
(
    STATE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_STATE_SEQ'),
    STATE_NAME varchar(100) NOT NULL,
    STATE_CODE char(2),
    STATE_TYPE varchar(100),
    TAXABLE boolean,
    FFA boolean,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_STATE ADD CONSTRAINT PK_DIM_STATE PRIMARY KEY (STATE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_SESSION
(
    SESSION_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.AGG_SESSION_SEQ'),
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int NOT NULL,
    TAX_YEAR int NOT NULL,
    MIN_SERVER_TIMESTAMP timestamp NOT NULL,
    MAX_SERVER_TIMESTAMP timestamp NOT NULL,
    FIRST_CLICKSTREAM_ID int NOT NULL,
    LAST_CLICKSTREAM_ID int NOT NULL,
    AUTH_ID_COUNT int NOT NULL,
    HIT_COUNT int NOT NULL,
    PAGE_COUNT int NOT NULL,
    PAGE_BOUNCE_FLAG boolean NOT NULL,
    BOUNCE_FLAG boolean NOT NULL,
    AUTH_ID int,
    MAX_AUTH_CLICK_COUNT int,
    FIRST_CAMPAIGN_ID int,
    FIRST_CID varchar(400),
    FIRST_CHANNEL varchar(100),
    FIRST_CHANNEL_GROUP varchar(100),
    LANDING_PAGE varchar(500),
    FIRST_POST_KEYWORD varchar(255),
    FIRST_START_EXPERIENCE varchar(25),
    FIRST_START_TIMESTAMP timestamp,
    NONFFA_FLAG varchar(5),
    REFERRER_PAGE_URL varchar(5000),
    REFERRER_PAGE_URL_ID int,
    START_FORM varchar(100),
    END_FORM varchar(100),
    FIRST_AUTH_TIMESTAMP timestamp,
    FIRST_AUTHORIZATION_TIMESTAMP timestamp,
    FIRST_COMPLETE_TIMESTAMP timestamp,
    FIRST_PAGE_URL_ID int,
    FIRST_PAGE_URL varchar(5000),
    FIRST_USER_AGENT_ID int,
    FIRST_USER_AGENT varchar(5000),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50),
    SESSION_AUTH_TYPE_ID int,
    SESSION_AUTH_TYPE_ID_AUTH_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_SESSION ADD CONSTRAINT PK_AGG_SESSION PRIMARY KEY (SESSION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXPREP_SESSION
(
    TAXPREP_SESSION_ID int NOT NULL,
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int,
    TIME_DIFFERENTIAL int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
);

ALTER TABLE CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXPREP_SESSION ADD CONSTRAINT PK_BRIDGE_CLICKSTREAM_TAXPREP_SESSION PRIMARY KEY (TAXPREP_SESSION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN
(
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int NOT NULL,
    CAMPAIGN_ID int NOT NULL,
    VISITOR_CREDIT_CAMPAIGN_SERVER_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    VISITOR_CREDIT_CAMPAIGN_TAX_DATE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    FIRST_SESSION_FLAG boolean NOT NULL DEFAULT false,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN ADD CONSTRAINT PK_SUB_CLCISKTREAM_VISITOR_CREDIT_CAMPAIGN PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST
(
    CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_SEQ'),
    CLICKSTREAM_ID int NOT NULL,
    RECIPE_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISIT_NUM int NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_ASSIGNMENT_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50)
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST ADD CONSTRAINT PK_SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST PRIMARY KEY (CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE
(
    CLICKSTREAM_RECIPE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE_SEQ'),
    CLICKSTREAM_ID int NOT NULL,
    RECIPE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp()
);

ALTER TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE ADD CONSTRAINT PK_FACT_CLICKSTREAM_RECIPE PRIMARY KEY (CLICKSTREAM_RECIPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_RECIPE
(
    RECIPE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_RECIPE_SEQ'),
    QB_RECIPE_ID int,
    AB_TEST_ID int,
    RECIPE_IN_BEACON varchar(255) NOT NULL,
    EXPERIENCE_DETAIL_LOCATION varchar(255),
    EXPERIENCE_DETAIL_VALUE varchar(255),
    RECIPE_NAME varchar(500),
    RECIPE_HYPOTHESIS_DESCRIPTION varchar(2500),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_RECIPE ADD CONSTRAINT PK_DIM_RECIPE PRIMARY KEY (RECIPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_AB_TEST
(
    AB_TEST_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_AB_TEST_SEQ'),
    QB_TEST_RECORD_ID int NOT NULL,
    TEST_NAME varchar(500),
    TEST_DESCRIPTION varchar(1500),
    TEST_HYPOTHESIS_DESCRIPTION varchar(2500),
    TEST_BASE_TYPE varchar(10),
    PRODUCT_MANAGER_NAME varchar(100),
    ANALYST_NAME varchar(100),
    TEST_START_TIMESTAMP timestamp,
    TEST_END_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_AB_TEST ADD CONSTRAINT PK_DIM_AB_TEST PRIMARY KEY (AB_TEST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST
(
    TAXPREP_SESSION_ID int NOT NULL,
    AUTH_ID int NOT NULL,
    FIRST_SESSION_TIMESTAMP timestamp NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_SESSION_TAX_DATE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST ADD CONSTRAINT PK_SUB_TAXPREP_SESSION_FIRST PRIMARY KEY (TAXPREP_SESSION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_TAXPREP_METHOD
(
    TAXPREP_METHOD_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_TAXPREP_METHOD_SEQ'),
    TAXPREP_METHOD_DESCRIPTION varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TAXPREP_METHOD ADD CONSTRAINT PK_DIM_TAXPREP_METHOD PRIMARY KEY (TAXPREP_METHOD_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE
(
    TAXPREP_METHOD_SOURCE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE_SEQ'),
    TAXPREP_METHOD_SOURCE_DESCRIPTION varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE ADD CONSTRAINT PK_DIM_TAXPREP_METHOD_SOURCE PRIMARY KEY (TAXPREP_METHOD_SOURCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST
(
    CLICKSTREAM_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    AUTH_ID int,
    FIRST_START_TIMESTAMP timestamp NOT NULL,
    FIRST_START_TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    PRIOR_YEAR_TAXPREP_METHOD_ID int NOT NULL,
    PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST ADD CONSTRAINT PK_SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST PRIMARY KEY (CLICKSTREAM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_CUSTOMER_TYPE
(
    CUSTOMER_TYPE_ID int NOT NULL,
    CUSTOMER_TYPE varchar(255) NOT NULL,
    CUSTOMER_TYPE_RANK int NOT NULL,
    CUSTOMER_TYPE_ROLLUP varchar(255) NOT NULL,
    CUSTOMER_TYPE_ROLLUP_RANK int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_CUSTOMER_TYPE ADD CONSTRAINT PK_DIM_CUSTOMER_TYPE PRIMARY KEY (CUSTOMER_TYPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_CUSTOMER_DEFINITION
(
    CUSTOMER_DEFINITION_ID int NOT NULL,
    CUSTOMER_DEFINITION varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_CUSTOMER_DEFINITION ADD CONSTRAINT PK_DIM_CUSTOMER_DEFINITION PRIMARY KEY (CUSTOMER_DEFINITION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT
(
    CUSTOMER_KEY int NOT NULL,
    TAX_YEAR int NOT NULL,
    CUSTOMER_TYPE_ID int NOT NULL,
    CUSTOMER_DEFINITION_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT ADD CONSTRAINT PK_SUB_CUSTOMER_SEGMENT PRIMARY KEY (CUSTOMER_KEY, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED
(
    TAXORDER_ID int NOT NULL,
    CUSTOMER_KEY int NOT NULL,
    TAX_YEAR int NOT NULL,
    ORDER_TIMESTAMP timestamp NOT NULL,
    ITEM_ALIAS_RANK int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED ADD CONSTRAINT PK_SUB_TAXORDER_COMPLETED_RANKED PRIMARY KEY (TAXORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_CAMPAIGN_COST
(
    CAMPAIGN_COST_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.AGG_CAMPAIGN_COST_SEQ'),
    TAX_DATE_ID int NOT NULL,
    CAMPAIGN_ID int NOT NULL,
    VENDOR_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    COST_AMOUNT numeric(7,2) NOT NULL,
    CLICK_COUNT int NOT NULL,
    IMPRESSION_COUNT int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_CAMPAIGN_COST ADD CONSTRAINT PK_AGG_CAMPAIGN_COST PRIMARY KEY (CAMPAIGN_COST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_VENDOR
(
    VENDOR_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_VENDOR_SEQ'),
    VENDOR_NAME varchar(50) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_VENDOR ADD CONSTRAINT PK_DIM_VENDOR PRIMARY KEY (VENDOR_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_ACCEPTED_RETURN
(
    EF_PAYMENTS_KEY int NOT NULL,
    PRIMARY_FILER_ID varchar(255) NOT NULL,
    SECONDARY_FILER_ID varchar(255),
    TAXFILER_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    BANK_RTN varchar(255),
    FILING_TYPE_ID int NOT NULL,
    PRODUCT_ALIAS_ID int NOT NULL,
    ACCEPTED_TIMESTAMP timestamp NOT NULL,
    ACCEPTED_TAX_DATE_ID int NOT NULL,
    AMOUNT numeric(18,2) NOT NULL,
    PAYMENT_METHOD int NOT NULL,
    PAYMENT_DESCRIPTION varchar(255) NOT NULL,
    CREDIT_FOR_SALE_PRIORITY_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_RETURN ADD CONSTRAINT PK_FACT_ACCEPTED_RETURN PRIMARY KEY (EF_PAYMENTS_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_RETURN
(
    PRIMARY_FILER_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    FED_ACCEPTED_TIMESTAMP timestamp,
    FED_TOTAL_REFUND_AMOUNT numeric(18,2),
    FED_PAYMENT_METHOD int,
    FED_PAYMENT_DESCRIPTION varchar(255),
    STATE_ACCEPTED_TIMESTAMP timestamp,
    STATE_TOTAL_REFUND_AMOUNT numeric(18,2),
    STATE_PAYMENT_METHOD int,
    STATE_PAYMENT_DESCRIPTION varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_TILE
(
    CLICKSTREAM_ID int NOT NULL,
    TILE_ID int NOT NULL,
    TILE_SEQUENCE_NUMBER int NOT NULL,
    FINAL_TILE_FLAG boolean NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_TILE ADD CONSTRAINT PK_FACT_CLICKSTREAM_TILE PRIMARY KEY (CLICKSTREAM_ID, TILE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_TILE
(
    TILE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_TILE_SEQ'),
    TILE_NAME varchar(50) NOT NULL,
    SKU_ROLLUP_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_TILE ADD CONSTRAINT PK_DIM_TILE PRIMARY KEY (TILE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EXPERIENCE
(
    EXPERIENCE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_EXPERIENCE_SEQ'),
    EXPERIENCE varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EXPERIENCE ADD CONSTRAINT PK_DIM_EXPERIENCE PRIMARY KEY (EXPERIENCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED
(
    EXPERIENCE_RENDERED_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED_SEQ'),
    EXPERIENCE_RENDERED varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED ADD CONSTRAINT PK_DIM_EXPERIENCE_RENDERED PRIMARY KEY (EXPERIENCE_RENDERED_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    CLICKSTREAM_MULTIFILER_TIMESTAMP timestamp,
    TAXORDER_MULTIFILER_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER ADD CONSTRAINT PK_SUB_AUTH_ID_MULTIFILER PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_VISITOR_MULTIFILER
(
    VISITOR_OMT_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    CLICKSTREAM_MULTIFILER_TIMESTAMP timestamp,
    AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP timestamp,
    AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    VISITOR_ID int
);

ALTER TABLE CTG_ANALYTICS.SUB_VISITOR_MULTIFILER ADD CONSTRAINT PK_SUB_VISITOR_MULTIFILER PRIMARY KEY (VISITOR_OMT_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTH_ID_START_SKU
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    START_SKU_ROLLUP_ID int NOT NULL,
    START_SKU varchar(100) NOT NULL,
    START_SKU_TIMESTAMP timestamp NOT NULL,
    START_SKU_TAX_DATE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_AUTH_ID_START_SKU ADD CONSTRAINT PK_FACT_AUTH_ID_START_SKU PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTH_ID_AUTHORIZATION_USER_AGENT
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_AUTHORIZATION_TIMESTAMP timestamp NOT NULL,
    FIRST_AUTHORIZATION_TAX_DATE_ID int NOT NULL,
    FIRST_AUTHORIZATION_USER_AGENT_ID int,
    FIRST_AUTHORIZATION_DEVICE_TYPE varchar(15),
    FIRST_AUTHORIZATION_PLATFORM_TYPE varchar(15),
    FIRST_AUTHORIZATION_APP_TYPE varchar(15),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_AUTH_ID_AUTHORIZATION_USER_AGENT ADD CONSTRAINT PK_FACT_AUTH_ID_AUTHORIZATION_USER_AGENT PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTH_ID_AUTHENTICATION_USER_AGENT
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_AUTHENTICATION_TIMESTAMP timestamp NOT NULL,
    FIRST_AUTHENTICATION_TAX_DATE_ID int NOT NULL,
    FIRST_AUTHENTICATION_USER_AGENT_ID int,
    FIRST_AUTHENTICATION_DEVICE_TYPE varchar(15),
    FIRST_AUTHENTICATION_PLATFORM_TYPE varchar(15),
    FIRST_AUTHENTICATION_APP_TYPE varchar(15),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_AUTH_ID_AUTHENTICATION_USER_AGENT ADD CONSTRAINT PK_FACT_AUTH_ID_AUTHENTICATION_USER_AGENT PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_FED_EFILING_STATUS
(
    PRIMARY_FILER_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    FED_FIRST_ATTEMPTED_TIMESTAMP timestamp NOT NULL,
    FED_LAST_EFILE_STATUS_TIMESTAMP timestamp NOT NULL,
    FED_LAST_EFILE_STATUS_CODE_ID int NOT NULL,
    FED_FIRST_ACCEPTED_TIMESTAMP timestamp,
    FED_LAST_ACCEPTED_TIMESTAMP timestamp,
    REJECTED_COUNT int,
    FED_FIRST_REJECTED_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_FED_EFILING_STATUS ADD CONSTRAINT PK_AGG_FED_EFILING_STATUS PRIMARY KEY (PRIMARY_FILER_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_EFILE_STATUS
(
    CHANGE_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    TAXFILER_ID int NOT NULL,
    PRIMARY_ID varchar(255) NOT NULL,
    FILING_ID varchar(255) NOT NULL,
    FILING_TYPE_ID int NOT NULL,
    EFILE_STATUS_CODE_ID int NOT NULL,
    EFILE_STATUS_TAX_DATE_ID int NOT NULL,
    EFILE_STATUS_TIMESTAMP timestamp NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    AUTH_ID int
);

ALTER TABLE CTG_ANALYTICS.FACT_EFILE_STATUS ADD CONSTRAINT PK_FACT_EFILE_STATUS PRIMARY KEY (CHANGE_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EFILE_STATUS_CODE
(
    EFILE_STATUS_CODE_ID int NOT NULL,
    EFILE_STATUS_CODE int NOT NULL,
    EFILE_STATUS_DESCRIPTION varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EFILE_STATUS_CODE ADD CONSTRAINT PK_DIM_EFILE_STATUS_CODE PRIMARY KEY (EFILE_STATUS_CODE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_USER_AGENT
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    FIRST_COMPLETED_TIMESTAMP timestamp NOT NULL,
    FIRST_COMPLETED_TAX_DATE_ID int NOT NULL,
    FIRST_COMPLETED_USER_AGENT_ID int NOT NULL,
    FIRST_COMPLETED_DEVICE_TYPE varchar(15),
    FIRST_COMPLETED_PLATFORM_TYPE varchar(15),
    FIRST_COMPLETED_APP_TYPE varchar(15),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_USER_AGENT ADD CONSTRAINT PK_FACT_AUTH_ID_COMPLETED_USER_AGENT PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    COMPLETED_SKU_RANKED varchar(75) NOT NULL,
    FIRST_COMPLETED_SKU_TIMESTAMP timestamp NOT NULL,
    FIRST_COMPLETED_SKU_TAX_DATE_ID int NOT NULL,
    PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED varchar(75),
    PRIOR_YEAR_COMPLETED_SKU_RANKED varchar(75),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU ADD CONSTRAINT PK_FACT_AUTH_ID_COMPLETED_SKU PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR
(
    FORM_IMPORT_ERROR_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR_SEQ'),
    STATUS_CODE varchar(500),
    STATUS_MESSAGE varchar(1000),
    REQUEST_HTTP_STATUS int,
    REQUEST_ERROR_CODE varchar(200),
    REQUEST_ERROR_DETAILS varchar(2000),
    PARTNER_AUTHENTICATION_ERROR_CODE varchar(100),
    PARTNER_REQUEST_ERROR_CODE varchar(50),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR ADD CONSTRAINT PK_DIM_FORM_IMPORT_ERROR PRIMARY KEY (FORM_IMPORT_ERROR_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_IMPORT_DOC
(
    IMPORT_DOC_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_IMPORT_DOC_SEQ'),
    DOC_TYPE varchar(500) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_IMPORT_DOC ADD CONSTRAINT PK_DIM_IMPORT_DOC PRIMARY KEY (IMPORT_DOC_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_IMPORT_PARTNER
(
    IMPORT_PARTNER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_IMPORT_PARTNER_SEQ'),
    IMPORT_PARTNER_NAME varchar(100) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_IMPORT_PARTNER ADD CONSTRAINT PK_DIM_IMPORT_PARTNER PRIMARY KEY (IMPORT_PARTNER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_IMPORT_SERVICE
(
    IMPORT_SERVICE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_IMPORT_SERVICE_SEQ'),
    IMPORT_SERVICE varchar(100) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_IMPORT_SERVICE ADD CONSTRAINT PK_DIM_IMPORT_SERVICE PRIMARY KEY (IMPORT_SERVICE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_IMPORT_PLATFORM
(
    IMPORT_PLATFORM_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_IMPORT_PLATFORM_SEQ'),
    PLATFORM_APPLICATION varchar(100) NOT NULL,
    PLATFORM_APPLICATION_VERSION varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_IMPORT_PLATFORM ADD CONSTRAINT PK_DIM_IMPORT_PLATFORM PRIMARY KEY (IMPORT_PLATFORM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_FORM_IMPORT_REQUEST
(
    FORM_IMPORT_REQUEST_ID int NOT NULL,
    AUTH_ID int,
    ALTERNATE_ID varchar(100),
    TAX_YEAR int,
    REQUEST_TIMESTAMP timestamp NOT NULL,
    REQUEST_TAX_DATE_ID int NOT NULL,
    IMPORT_DOC_ID int NOT NULL,
    IMPORT_PLATFORM_ID int NOT NULL,
    IMPORT_SERVICE_ID int NOT NULL,
    IMPORT_PARTNER_ID int NOT NULL,
    RAW_EMPLOYER_INFORMATION varchar(1000),
    FORM_IMPORT_ERROR_ID int NOT NULL,
    RAW_CLIENT_SKU varchar(100),
    REQUEST_ELASPED_MILISECONDS int,
    IMPORT_W2_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_ANY_1099_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_1098_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_1099R_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_1099INT_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_1099DIV_FLAG boolean NOT NULL DEFAULT false,
    IMPORT_1099B_FLAG boolean NOT NULL DEFAULT false,
    DOCUMENT_COUNT int,
    IMPORT_REQUEST_ID varchar(500),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    FORM_TAX_YEAR int,
    REQUEST_SUCCESS_FLAG boolean
);

ALTER TABLE CTG_ANALYTICS.FACT_FORM_IMPORT_REQUEST ADD CONSTRAINT PK_FACT_FORM_IMPORT_REQUEST PRIMARY KEY (FORM_IMPORT_REQUEST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE
(
    CLICKSTREAM_ELIGIBLE_EXPERIENCE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE_SEQ'),
    CLICKSTREAM_ID int NOT NULL,
    EXPERIENCE_ID int NOT NULL,
    POSITION_NUM int,
    SELECTED_FLAG boolean NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE ADD CONSTRAINT PK_FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE PRIMARY KEY (CLICKSTREAM_ELIGIBLE_EXPERIENCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD
(
    EFILE_PAYMENT_METHOD_ID int NOT NULL,
    EFILE_PAYMENT_DESCRIPTION varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD ADD CONSTRAINT PK_DIM_EFILE_PAYMENT_METHOD PRIMARY KEY (EFILE_PAYMENT_METHOD_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND
(
    FILING_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    SEQUENCE_NUMBER int NOT NULL,
    PRIMARY_ID varchar(255) NOT NULL,
    SECONDARY_ID varchar(255),
    TAXFILER_ID int NOT NULL,
    EFILE_PAYMENT_METHOD_ID int NOT NULL,
    BANK_PRODUCT varchar(255) NOT NULL,
    AMOUNT numeric(18,2) NOT NULL,
    FILING_TYPE_ID int NOT NULL,
    APPLICATION varchar(255) NOT NULL,
    PRODUCT_ALIAS_ID int NOT NULL,
    ACCEPTED_TIMESTAMP timestamp NOT NULL,
    ACCEPTED_TAX_DATE_ID int NOT NULL,
    BANK_RTN varchar(255),
    CREDIT_FOR_SALE_PRIORITY_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    AUTH_ID int
);

ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT PK_FACT_ACCEPTED_REFUND PRIMARY KEY (FILING_ID, TAX_YEAR, SEQUENCE_NUMBER) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_REFUND
(
    PRIMARY_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    RANKED_FED_ACCEPTED_TIMESTAMP timestamp,
    RANKED_FED_ACCEPTED_TAX_DATE_ID int,
    FED_TOTAL_REFUND_AMOUNT numeric(18,2),
    RANKED_FED_EFILE_PAYMENT_METHOD_ID int,
    RANKED_STATE_ACCEPTED_TIMESTAMP timestamp,
    RANKED_STATE_ACCEPTED_TAX_DATE_ID int,
    STATE_TOTAL_REFUND_AMOUNT numeric(18,2),
    RANKED_STATE_EFILE_PAYMENT_METHOD_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_REFUND ADD CONSTRAINT PK_AGG_CUSTOMER_ACCEPTED_REFUND PRIMARY KEY (PRIMARY_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_FED_EFILE_STATUS
(
    PRIMARY_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    FED_FIRST_ATTEMPTED_TIMESTAMP timestamp NOT NULL,
    FED_LAST_EFILE_STATUS_TIMESTAMP timestamp NOT NULL,
    FED_LAST_EFILE_STATUS_CODE_ID int NOT NULL,
    FED_FIRST_ACCEPTED_TIMESTAMP timestamp,
    FED_LAST_ACCEPTED_TIMESTAMP timestamp,
    REJECTED_COUNT int,
    FED_FIRST_REJECTED_TIMESTAMP timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_FED_EFILE_STATUS ADD CONSTRAINT PK_AGG_FED_EFILE_STATUS PRIMARY KEY (PRIMARY_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.FUTURE_TYS
(
    FULL_DATE date NOT NULL,
    TY_YEAR int,
    TY_WEEK int,
    TY_DAY int
);

ALTER TABLE CTG_ANALYTICS_SRC.FUTURE_TYS ADD CONSTRAINT PK_FUTURE_TYS PRIMARY KEY (FULL_DATE) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.PRODUCT_ROLLUP
(
    PRODUCT_ID int,
    PRODUCT_ENGINE_DSC varchar(100),
    PRODUCT_ROLLUP varchar(100),
    PAID_FLAG int,
    PRODUCT_NAME varchar(100),
    DISPLAY_PRODUCT_NAME_WITH_SORT varchar(100),
    PRODUCT_SORT int,
    DISPLAY_PRODUCT_NAME varchar(100),
    PRODUCT_EDTN_DSC varchar(250),
    PRODUCT_CODE_ROLLUP varchar(100),
    EFFECTIVE_START_TAX_YEAR int,
    EFFECTIVE_END_TAX_YEAR int,
    EFFECTIVE_START_DATE date,
    EFFECTIVE_END_DATE date,
    PRODUCT_ROLLUP_VERSION int
);


CREATE TABLE CTG_ANALYTICS_SRC.PRODUCT
(
    PRODUCT_KEY int,
    INTUIT_ITEM_CODE varchar(250),
    PRODUCT_DESCRIPTION varchar(250),
    PRODUCT_FAMILY_DESCRIPTION varchar(250),
    PRODUCT_EDITION_DESCRIPTION varchar(250),
    PRODUCT_VERSION_CODE varchar(250),
    PRODUCT_ROLLUP varchar(250),
    AUDIT_INS_KEY int,
    AUDIT_INS_TS timestamp,
    AUDIT_UPD_KEY int,
    AUDIT_UPD_TS timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_PRS_CATEGORIZED
(
    TRANS_ID varchar(100),
    SOURCE_NAME varchar(100),
    PROJECT_NAME varchar(100),
    MODEL_ID varchar(100),
    MODEL_NAME varchar(100),
    NODE1 varchar(100),
    NODE2 varchar(100),
    NODE3 varchar(100),
    NODE4 varchar(100),
    NODE5 varchar(100),
    NODE6 varchar(100),
    NODE7 varchar(100),
    NODE8 varchar(100),
    NODE9 varchar(100),
    NODE10 varchar(100),
    LEAF_ID varchar(100),
    LEAF_NAME varchar(100),
    TREE_PATH varchar(1000),
    INCIDENT_NUMBER varchar(100),
    INCIDENT_DATE varchar(19),
    UDF1 varchar(100),
    UDF2 varchar(100),
    UDF3 varchar(100),
    UDF4 varchar(100),
    UDF5 varchar(100),
    SENT_POS_COUNT varchar(20),
    SENT_NEG_COUNT varchar(20),
    SENT_SCORE varchar(20),
    SENT_D_SCORE varchar(20),
    PRODUCT varchar(100),
    PLATFORM varchar(100),
    LOAD_TYPE varchar(100),
    REC_CREATE_DT varchar(100),
    BATCH_EVENT_ID int NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_CV_CUSTOMER_STATE_ZIP
(
    CUSTOMER_KEY int,
    MARK_CUST_IDEN int,
    STATE_CD varchar(20),
    US_ZIP_CD varchar(10),
    PRODUCT_YEAR int,
    AUDIT_INS_TS timestamp,
    AUDIT_UPD_KEY int,
    AUDIT_UPD_TS timestamp,
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_EFS_FILING
(
    FILING_ID varchar(30),
    SOURCE_SYSTEM char(3),
    FILING_TYPE varchar(255),
    PERIOD varchar(255),
    SENDER_ID varchar(255),
    PRIMARY_FILER_ID varchar(255),
    SECONDARY_FILER_ID varchar(255),
    APP varchar(255),
    PRIMARY_HOME_STATE char(2),
    PAYMENT_TOTAL numeric(12,2),
    ENGINE_CODE varchar(255),
    ENGINE_VERSION varchar(255),
    FORMSET_CODE varchar(255),
    FORMSET_VERSION varchar(255),
    BATCH_ID varchar(30),
    STATE_ONLY_FLAG char(1),
    CREDIT_FOR_SALE_PRIORITY_CODE varchar(255),
    PRICING_PRIORITY_CODE varchar(255),
    BANK_PRODUCT char(2),
    CONVERTED_TYPE varchar(30),
    ZIP_CODE varchar(5),
    MACHINE_ID varchar(255),
    INSERTION_TIMESTAMP timestamp,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_EFS_FILING_STATUS_CHANGE
(
    CHANGE_ID varchar(255),
    FILING_ID varchar(30),
    STATUS_TYPE int,
    TIMESTAMP_DTM timestamp,
    INSERTION_TIMESTAMP timestamp,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_EFS_FILING_PAYMENT
(
    FILING_ID varchar(30),
    SEQ_NUM int,
    AMOUNT numeric(12,2),
    RTN varchar(50),
    PAYMENT_METHOD int,
    INSERTION_TIMESTAMP timestamp,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_EFS_RISK_SCORE
(
    FILING_ID varchar(30),
    RISK_SCORE int,
    SCORE_DATE timestamp,
    REPORT_ID int,
    INSERTION_TIMESTAMP timestamp,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_EFS_REFUND_TRANSFER_ITEMS
(
    ORDER_NUMBER varchar(32),
    SEQ_NUM int,
    ITEM_TYPE varchar(30),
    PRODUCT_ALIAS varchar(25),
    ITEM_AMOUNT numeric(10,2),
    SALES_TAX_AMOUNT numeric(10,2),
    VOUCHER_AMOUNT numeric(10,2),
    VOUCHER_CAMPAIGN_CODE varchar(20),
    CREDIT_FOR_SALE_PRIORITY_CODE varchar(255),
    PRICING_PRIORITY_CODE varchar(255),
    PAID_FOR_BY_FILING_ID varchar(30),
    INSERTION_TIMESTAMP timestamp,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_IDW_CAMPAIGN
(
    PRIORITY_CODE varchar(50),
    SOURCE_CODE_ALIAS varchar(50),
    ALLIANCE varchar(250),
    SPONSOR_TYPE varchar(250),
    MARKETING_DESC varchar(250),
    SALES_DESC varchar(1),
    BATCH_EVENT_ID int,
    priority_key int NOT NULL,
    CREATED_TIMESTAMP timestamp,
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_IUS_AUTHENTICATION
(
    AUTH_DATE varchar(19),
    AUTH_ID varchar(50),
    SOURCE varchar(50),
    ROLE varchar(10),
    AUTH_SOURCE varchar(10),
    PRODUCT_ID varchar(50),
    BATCH_EVENT_ID int,
    AUTHENTICATION_LEVEL varchar(50),
    IP_ADDRESS varchar(50),
    TEST_FLAG varchar(10),
    TRANSACTION_ID varchar(100)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SP_NUEET_SESSION_AUTH_LOG
(
    AUTH_DATE varchar(19),
    AUTH_ID varchar(50),
    SOURCE varchar(50),
    ROLE varchar(10),
    AUTH_SOURCE varchar(10),
    PRODUCT_ID varchar(50),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SP_SESSION_START
(
    START_DATE varchar(19),
    AUTH_ID int,
    PRIORITY_CODE varchar(50),
    PRODUCT_ID varchar(50),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SP_SESSION_END
(
    SESSION_DATE varchar(19),
    AUTH_ID int,
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50),
    PRODUCT_ID varchar(50),
    FIRST_TIME_FLAG varchar(1),
    ORIGINAL_PRODUCTID varchar(20),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SP_PRS
(
    DATESTAMP varchar(19),
    AUTH_ID varchar(50),
    PRODUCTID varchar(50),
    LOCATION varchar(50),
    SCORE varchar(50),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SP_PRS_VERBATIM
(
    PRS_KEY int NOT NULL,
    PRS_DATE timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int,
    PRODUCT_ENGINE int,
    VERBATIM varchar(4000),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_SF_CC_ASSISTED_CONTACTS
(
    CASE_NBR varchar(30),
    CASE_CREATED_DT timestamp,
    VISITOR_ID varchar(50),
    AUTH_ID int,
    CHANNEL varchar(255),
    PLATFORM varchar(255),
    PRODUCT_CD varchar(255),
    PRODUCT varchar(255),
    CORP_ID varchar(512),
    WORK_GRP varchar(40),
    AGENT_NAME varchar(121),
    AGENT_COMPANY varchar(80),
    AGENT_LOCATION varchar(40),
    CATEGORY__C varchar(255),
    SEGMENT__C varchar(255),
    SUB_CATEGORY__C varchar(255),
    OTHERSYSTEMINFO__C varchar(50),
    BATCH_EVENT_ID int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_ORDERS
(
    ORDER_DATE timestamp,
    AUTH_ID int,
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50),
    ORDER_NUMBER varchar(64),
    PRODUCT_CODE varchar(20),
    PAYMENT_METHOD varchar(100),
    PAYMENT_AMOUNT numeric(15,2),
    ORIGINAL_PRODUCTID int,
    VOUCHER_CODE varchar(13),
    ORDER_ORIGIN varchar(30),
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(30)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_AUTHENTICATION
(
    AUTH_DATE timestamp,
    AUTH_ID int,
    SOURCE varchar(50),
    ROLE varchar(1),
    AUTH_SOURCE int,
    PRODUCT_ID int,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_PRS
(
    DATESTAMP timestamp,
    AUTH_ID int,
    PRODUCTID int,
    LOCATION varchar(50),
    SCORE int,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_SESSION_END
(
    SESSION_DATE timestamp,
    AUTH_ID int,
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50),
    PRODUCT_ID varchar(10),
    FIRST_TIME_FLAG varchar(1),
    ORIGINAL_PRODUCTID int,
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_SESSION_START
(
    START_DATE timestamp,
    AUTH_ID int,
    PRIORITY_CODE varchar(50),
    PRODUCT_ID varchar(50),
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.TTO_AUTH_LOG_OVERRIDE
(
    AUTH_LOG_KEY int NOT NULL,
    AUTHENTICATION_LEVEL int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp()
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TTO_PRS_VERBATIM
(
    PRS_KEY int NOT NULL,
    PRS_DATE timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int,
    PRODUCT_ENGINE int,
    VERBATIM varchar(4000),
    MATT_DATE timestamp,
    BATCH_EVENT_ID int,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_SRC.SCREEN_QB
(
    SCREEN_ID int NOT NULL,
    APPLICATION_ASSIGNED_ID varchar(2000),
    CHANNEL varchar(255),
    SOURCE_APPLICATION_CODE varchar(25) NOT NULL,
    SOURCE_APPLICATION_SECTION varchar(255),
    SOURCE_APPLICATION_SECTION_CONTEXT varchar(255),
    SOURCE_APPLICATION_GROUP varchar(255),
    SOURCE_APPLICATION_GROUP_DETAIL varchar(255),
    FUNNEL_SORT_RANK int,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_ESTORE_ORDER
(
    ESTORE_ORDER_KEY int NOT NULL,
    ORDER_NUMBER varchar(50),
    SHOPPER_ID varchar(20),
    AUTH_ID int,
    TRANSACTED_ITEM varchar(100),
    PRODUCT_ALIAS varchar(50),
    CHANNEL varchar(50),
    REGISTERED varchar(50),
    PRIMARY_PRIORITY_CODE varchar(50),
    HISTORICAL_PRIORITY_CODE varchar(50),
    ITEM_AMOUNT varchar(25),
    ORDER_DATE timestamp NOT NULL,
    PRIMARY_ID varchar(100),
    SECONDARY_ID varchar(100),
    TAX_YEAR int,
    PRODUCT_STATE varchar(20),
    ORDER_TYPE varchar(50),
    PLATFORM varchar(50),
    MACHINE_ID varchar(100),
    PRODUCT varchar(50),
    PRODUCT_ENGINE varchar(50),
    PREP_TYPE varchar(50),
    TAX_RETURN_INDEX varchar(50),
    MATT_DATE timestamp,
    NP int,
    TAX_RETURN_ID varchar(255),
    UPGRADE_PATH varchar(100),
    ITERATION varchar(40),
    CAMPAIGN varchar(100),
    BATCH_EVENT_ID int,
    AUDIT_INS_TS timestamp,
    AUDIT_UPD_TS timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_ESTORE_ORDER ADD CONSTRAINT PK_TRN_ESTORE_ORDER PRIMARY KEY (ESTORE_ORDER_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.DIM_CUSTOMER
(
    CUSTOMER_KEY int NOT NULL,
    PRIMARY_ID varchar(150) NOT NULL,
    SECONDARY_ID varchar(150),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.DIM_CUSTOMER ADD CONSTRAINT PK_DIM_CUSTOMER PRIMARY KEY (CUSTOMER_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS
(
    TTO_ORDERS_KEY int NOT NULL,
    CUSTOMER_KEY int NOT NULL,
    AUTH_ID int NOT NULL,
    ORDER_NUMBER varchar(64) NOT NULL,
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS ADD CONSTRAINT PK_LKP_CUSTOMER_TTO_ORDERS PRIMARY KEY (TTO_ORDERS_KEY) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER
(
    CUSTOMER_EFS_RT_ORDER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER_SEQ'),
    ORDER_NUMBER varchar(64) NOT NULL,
    ITEM_ALIAS_CODE varchar(250) NOT NULL,
    TAX_YEAR int NOT NULL,
    CUSTOMER_KEY int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER ADD CONSTRAINT PK_LKP_CUSTOMER_EFS_RT_ORDER PRIMARY KEY (CUSTOMER_EFS_RT_ORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_NON_RT_ORDER
(
    CHANGE_ID varchar(150) NOT NULL,
    PRIMARY_ID varchar(150) NOT NULL,
    SECONDARY_ID varchar(150),
    TAX_YEAR int NOT NULL,
    CUSTOMER_KEY int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_NON_RT_ORDER ADD CONSTRAINT PK_LKP_CUSTOMER_EFS_NON_RT_ORDER PRIMARY KEY (CHANGE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.LKP_CUSTOMER_KEY
(
    PRIMARY_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    SECONDARY_ID varchar(255),
    CUSTOMER_KEY int NOT NULL
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT
(
    UNLOCK_ORDER_EXTRACT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT_SEQ'),
    CUSTOMER_KEY int NOT NULL,
    AUTH_ID int,
    ORDER_NUMBER varchar(70),
    ORDER_TIMESTAMP timestamp NOT NULL,
    PRODUCT_VERSION int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT ADD CONSTRAINT PK_TRN_UNLOCK_ORDER_EXTRACT PRIMARY KEY (UNLOCK_ORDER_EXTRACT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL
(
    TUNE_ACTUAL_INSTALLS_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL_SEQ'),
    SITE_ID int NOT NULL,
    SITE_NAME varchar(50) NOT NULL,
    PUBLISHER_ID int NOT NULL,
    PUBLISHER_NAME varchar(50) NOT NULL,
    SITE_EVENT_ID int NOT NULL,
    SITE_EVENT_NAME varchar(50) NOT NULL,
    ADVERTISER_SUB_PUBLISHER_ID int,
    ADVERTISER_SUB_PUBLISHER_NAME varchar(50),
    ADVERTISER_SUB_SITE_ID int,
    ADVERTISER_SUB_SITE_NAME varchar(50),
    ADVERTISER_SUB_CAMPAIGN_ID int,
    ADVERTISER_SUB_CAMPAIGN_NAME varchar(50),
    ADVERTISER_SUB_ADGROUP_ID int,
    ADVERTISER_SUB_ADGROUP_NAME varchar(50),
    ADVERTISER_SUB_AD_ID int,
    ADVERTISER_SUB_AD_NAME varchar(50),
    ADVERTISER_SUB_KEYWORD_ID int,
    ADVERTISER_SUB_KEYWORD_NAME varchar(50),
    ADVERTISER_SUB_PLACEMENT_ID int,
    ADVERTISER_SUB_PLACEMENT_NAME varchar(50),
    PUBLISHER_SUB_CAMPAIGN_ID int,
    PUBLISHER_SUB_CAMPAIGN_NAME varchar(100),
    PUBLISHER_SUB_ADGROUP_ID int,
    PUBLISHER_SUB_ADGROUP_NAME varchar(100),
    PUBLISHER_SUB_AD_ID int,
    PUBLISHER_SUB_AD_NAME varchar(100),
    PUBLISHER_SUB_KEYWORD_ID int,
    PUBLISHER_SUB_KEYWORD_NAME varchar(100),
    PUBLISHER_SUB_PLACEMENT_ID int,
    PUBLISHER_SUB_PLACEMENT_NAME varchar(255),
    AD_CLICKS int NOT NULL,
    INSTALLS int NOT NULL,
    EVENTS int NOT NULL,
    UPDATES int,
    PUBLISHER_SUB_CAMPAIGN_REF varchar(100),
    PUBLISHER_SUB_ADGROUP_REF varchar(100),
    DEVICE_TYPE varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL ADD CONSTRAINT PK_TRN_TUNE_ACTUAL_INSTALL PRIMARY KEY (TUNE_ACTUAL_INSTALLS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_PRS
(
    PRS_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_PRS_SEQ'),
    TAX_YEAR int,
    PRS_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRODUCT_ID int,
    LOCATION varchar(50),
    SCORE int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_PRS ADD CONSTRAINT PK_TRN_PRS PRIMARY KEY (PRS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM
(
    PRS_VERBATIM_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM_SEQ'),
    PRS_VERBATIM_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    TAX_YEAR int,
    PRODUCT_ID int,
    VERBATIM varchar(4000),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM ADD CONSTRAINT PK_TRN_PRS_VERBATIM PRIMARY KEY (PRS_VERBATIM_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_TAXML
(
    VERSION int,
    FILING_ID varchar(80),
    APPLICATION_ASSIGNED_TAXML_ENTITY_ID varchar(80),
    REASON varchar(80),
    PRIMARY_ID varchar(255),
    SECONDARY_ID varchar(255),
    AUTH_ID int,
    RECEIVED_TIMESTAMP timestamp,
    ZIP varchar(80),
    FILING_STATUS varchar(80),
    TAXPAYER_AGE int,
    SPOUSE_AGE int,
    DEPENDENTS_MINIMUM_AGE int,
    DEPENDENTS_AVERAGE_AGE float,
    DEPENDENTS_MAXIMUM_AGE int,
    TAXPAYER_OCCUPATION varchar(80),
    SPOUSE_OCCUPATION varchar(80),
    FED_FORM_TYPE varchar(80),
    W2_COUNT int,
    AGI numeric(18,2),
    EXEMPTIONS_NUMBER int,
    DEPENDENTS_COUNT int,
    SALARIES_AND_WAGES numeric(18,2),
    TAXABLE_INTEREST numeric(18,2),
    TAX_EXEMPT_INTEREST numeric(18,2),
    ORDINARY_DIVIDEND numeric(18,2),
    QUALIFIED_DIVIDEND numeric(18,2),
    TAXABLE_OFFSET numeric(18,2),
    ALIMONY_INCOME numeric(18,2),
    BUSINESS_INCOME numeric(18,2),
    OTHER_GAIN numeric(18,2),
    FARM_INCOME numeric(18,2),
    CAPITAL_GAIN numeric(18,2),
    IRA_DISTRIBUTION numeric(18,2),
    TAXABLE_IRA numeric(18,2),
    PENSION numeric(18,2),
    TAXABLE_PENSION numeric(18,2),
    SCHEDULE_E_INCOME numeric(18,2),
    HOUSEHOLD_EMPLOYEE_TAX numeric(18,2),
    UNEMPLOYMENT_INCOME numeric(18,2),
    SOCIAL_SECURITY_INCOME numeric(18,2),
    TAXABLE_SOCIAL_SECURITY_INCOME numeric(18,2),
    OTHER_INCOME numeric(18,2),
    TOTAL_INCOME numeric(18,2),
    SELF_EMPLOYMENT_TAX numeric(18,2),
    SELF_EMPLOYMENT_RETIREMENT numeric(18,2),
    TOTAL_DEDUCTIONS numeric(18,2),
    ITEMIZED_DEDUCTIONS_FLAG boolean,
    IRA_DEDUCTION numeric(18,2),
    STUDENT_LOAN_INTEREST numeric(18,2),
    STATE_OR_LOCAL_TAX numeric(18,2),
    STATE_OR_LOCAL_SALES_TAX numeric(18,2),
    REAL_ESTATE_TAX numeric(18,2),
    TAXES_PAID_AMOUNT numeric(18,2),
    MEDICAL_OR_DENTAL_EXPENSES numeric(18,2),
    MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION numeric(18,2),
    PERSONAL_PROPERTY_TAX numeric(18,2),
    OTHER_DEDUCTIBLE_TAX numeric(18,2),
    MORTGAGE_INTEREST numeric(18,2),
    MORTGAGE_INTEREST_NON_1098 numeric(18,2),
    MORTGAGE_POINTS_NON_1098 numeric(18,2),
    MORTGAGE_INSURANCE numeric(18,2),
    INVESTMENT_INTEREST_PAID numeric(18,2),
    TOTAL_INTEREST_PAID numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_CASH numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_NONCASH numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_CARRYOVER numeric(18,2),
    CHARITABLE_CONTRIBUTIONS numeric(18,2),
    CASUALTY_LOSSES numeric(18,2),
    EMPLOYEE_EXPENSES numeric(18,2),
    TAX_PREP_FEES numeric(18,2),
    OTHER_DEDUCTIBLE_EXPENSES numeric(18,2),
    TOTAL_DEDUCTIBLE_EXPENSES numeric(18,2),
    EXPENSES_DEDUCTION numeric(18,2),
    MISCELLANEOUS_DEDUCTIONS numeric(18,2),
    ITEMIZE_ANYWAY_FLAG int,
    TAXABLE_INCOME numeric(18,2),
    SCHEDULE_C_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_CASH_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT int,
    BUSINESS_MATERIAL_PARTICIPATION_COUNT int,
    BUSINESS_START_ACQUIRE_COUNT int,
    BUSINESS_1099_REQUIRED_COUNT int,
    BUSINESS_WILL_FILE_1099_COUNT int,
    BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT int,
    BUSINESS_GROSS_RECEIPTS_AMOUNT numeric(18,2),
    BUSINESS_RETURNS_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS numeric(18,2),
    BUSINESS_GROSS_PROFIT numeric(18,2),
    BUSINESS_OTHER_INCOME numeric(18,2),
    BUSINESS_GROSS_INCOME numeric(18,2),
    BUSINESS_ADVERTISING_EXPENSE numeric(18,2),
    BUSINESS_CAR_EXPENSE numeric(18,2),
    BUSINESS_COMMISSIONS_PAID numeric(18,2),
    BUSINESS_CONTRACT_LABOR_EXPENSE numeric(18,2),
    BUSINESS_DEPLETION_EXPENSE numeric(18,2),
    BUSINESS_DEPRECIATION numeric(18,2),
    BUSINESS_EMPLOYEE_BENEFITS_PAID numeric(18,2),
    BUSINESS_INSURANCE_PAID numeric(18,2),
    BUSINESS_MORTGAGE_INTEREST_PAID numeric(18,2),
    BUSINESS_OTHER_INTEREST_PAID numeric(18,2),
    BUSINESS_LEGAL_EXPENSE numeric(18,2),
    BUSINESS_OFFICE_EXPENSE numeric(18,2),
    BUSINESS_PENSION_EXPENSE numeric(18,2),
    BUSINESS_RENTAL_VEHICLES_EXPENSE numeric(18,2),
    BUSINESS_RENTAL_OTHER_EXPENSE numeric(18,2),
    BUSINESS_REPAIRS_EXPENSE numeric(18,2),
    BUSINESS_SUPPLIES_EXPENSE numeric(18,2),
    BUSINESS_TAXES_PAID numeric(18,2),
    BUSINESS_TRAVEL_EXPENSE numeric(18,2),
    BUSINESS_MEALS_EXPENSE numeric(18,2),
    BUSINESS_UTILITIES_EXPENSE numeric(18,2),
    BUSINESS_WAGES_PAID numeric(18,2),
    BUSINESS_OTHER_EXPENSE numeric(18,2),
    BUSINESS_TOTAL_EXPENSE numeric(18,2),
    BUSINESS_TENTATIVE_PROFIT numeric(18,2),
    BUSINESS_USE_OF_HOME_EXPENSES numeric(18,2),
    BUSINESS_NET_PROFIT numeric(18,2),
    BUSINESS_INVESTMENT_AT_RISK_TOTAL numeric(18,2),
    BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT int,
    BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT int,
    BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT int,
    BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS_PURCHASES numeric(18,2),
    BUSINESS_COST_OF_GOODS_LABOR numeric(18,2),
    BUSINESS_COST_OF_GOODS_SUPPLIES numeric(18,2),
    BUSINESS_COST_OF_GOODS_OTHER_COST numeric(18,2),
    BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS_TOTAL_SOLD numeric(18,2),
    BUSINESS_VEHICLE_MILES_BUSINESS numeric(18,2),
    BUSINESS_VEHICLE_MILES_COMMUTE numeric(18,2),
    BUSINESS_VEHICLE_MILES_OTHER numeric(18,2),
    BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT int,
    BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT int,
    BUSINESS_VEHICLES_EVIDENCE_COUNT int,
    BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT int,
    SCHEDULE_E_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_PASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_ESTATE_PASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REMIC_EXCESS_INCLUSION numeric(18,2),
    SUPPLEMENTAL_REMIC_TAXABLE_INCOME numeric(18,2),
    SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME numeric(18,2),
    SUPPLEMENTAL_FARM_RENTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_FARM_GROSS_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME numeric(18,2),
    DISABLED_CREDIT numeric(18,2),
    TAX_CREDITS numeric(18,2),
    RESIDENTIAL_ENERGY_CREDIT numeric(18,2),
    CHILD_CREDIT numeric(18,2),
    EDUCATION_CREDIT numeric(18,2),
    TUITION numeric(18,2),
    EDUCATOR_EXPENSES numeric(18,2),
    CERTAIN_BUSINESS_EXPENSE numeric(18,2),
    HSA numeric(18,2),
    MOVING_EXPENSE numeric(18,2),
    DEDUCTIBLE_SELF_EMPLOYMENT_TAX numeric(18,2),
    SELF_EMPLOYMENT_HEALTH_INSURANCE numeric(18,2),
    EARLY_WITHDRAWAL_PENALTY numeric(18,2),
    ALIMONY_PAID numeric(18,2),
    DOMESTIC_PRODUCTION_DEDUCTION numeric(18,2),
    ADJUSTMENTS numeric(18,2),
    OLD_OR_BLIND_COUNT int,
    ITEMIZE_SEPARATELY_FLAG boolean,
    EXEMPTION_AMOUNT numeric(18,2),
    TAX_LIABILITY numeric(18,2),
    CHILD_CARE_CREDIT numeric(18,2),
    ADDITIONAL_CHILD_CARE_CREDIT numeric(18,2),
    RETIREMENT_SAVINGS_CREDIT numeric(18,2),
    HOPE_CREDIT numeric(18,2),
    EARNED_INCOME_TAX_CREDIT numeric(18,2),
    ALTERNATIVE_MINIMUM_TAX numeric(18,2),
    FOREIGN_TAX_CREDIT numeric(18,2),
    OTHER_CREDITS numeric(18,2),
    TOTAL_CREDITS numeric(18,2),
    UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX numeric(18,2),
    RETIRMENT_ADDITIONAL_TAX numeric(18,2),
    HOMEBUYER_CREDIT_REPAYMENT numeric(18,2),
    OTHER_TAXES numeric(18,2),
    INCOME_TAX_WITHHELD numeric(18,2),
    ESTIMATED_TAX numeric(18,2),
    NON_TAXABLE_COMBAT_PAY numeric(18,2),
    PAYMENT_WITH_EXTENSION numeric(18,2),
    EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD numeric(18,2),
    FUEL_TAX_CREDIT numeric(18,2),
    OTHER_PAYMENTS numeric(18,2),
    TOTAL_PAYMENTS numeric(18,2),
    ESTIMATED_TAX_PENALTY numeric(18,2),
    INCOME_TAX numeric(18,2),
    TOTAL_TAX numeric(18,2),
    TAX_DUE numeric(18,2),
    REFUND numeric(18,2),
    ACA_TAX_CREDIT_REPAYMENT numeric(18,2),
    ACA_FULL_YEAR_COVERAGE int,
    ACA_PENALTY numeric(18,2),
    TAXPAYER_PHONE_AREA_CODE varchar(80),
    TAXPAYER_PHONE_ID varchar(80),
    SPOUSE_PHONE_AREA_CODE varchar(80),
    SPOUSE_PHONE_ID varchar(80),
    W2_OWNER_LIST varchar(80),
    W2_EIN_LIST varchar(80),
    W2_EMPLOYER_LIST varchar(80),
    W2_EMPLOYER_ZIP_LIST varchar(80),
    W2_WAGES_TOTAL numeric(18,2),
    W2_FED_WITHHELD_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_WAGES_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_WITHHELD_TOTAL numeric(18,2),
    W2_MEDICARE_WAGES_TOTAL numeric(18,2),
    W2_MEDICARE_WITHHELD_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_TIPS_TOTAL numeric(18,2),
    W2_ALLOCATED_TIPS_TOTAL numeric(18,2),
    W2_STATES_COUNT_LIST varchar(80),
    W2_LOCALITY_COUNT_LIST varchar(80),
    W2_STATE_WAGES_TOTAL numeric(18,2),
    W2_STATE_TAX_TOTAL numeric(18,2),
    W2_LOCAL_WAGES_TOTAL numeric(18,2),
    W2_LOCAL_TAX_TOTAL numeric(18,2),
    RAW_W2_WAGES varchar(80),
    RAW_W2_FED_WITHHELD varchar(80),
    RAW_W2_SOCIAL_SECURITY_WAGES varchar(80),
    RAW_W2_SOCIAL_SECURITY_WITHHELD varchar(80),
    RAW_W2_MEDICARE_WAGES varchar(80),
    RAW_W2_MEDICARE_WITHHELD varchar(80),
    RAW_W2_SOCIAL_SECURITY_TIPS varchar(80),
    RAW_W2_ALLOCATED_TIPS varchar(80),
    RAW_W2_STATE_WAGES varchar(80),
    RAW_W2_STATE_TAX varchar(80),
    RAW_W2_LOCAL_WAGES varchar(80),
    RAW_W2_LOCAL_TAX varchar(80),
    STATES_COUNT int,
    RAW_STATES varchar(80),
    TAXPAYER_MILITARY_FLAG boolean,
    SPOUSE_MILITARY_FLAG boolean,
    IDENTITY_THEFT_PIN_FLAG boolean,
    RESIDENT_STATE_RETURNS_COUNT int
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_TAXML
(
    TAXML_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_TAXML_SEQ'),
    VERSION int,
    FILING_ID varchar(80),
    APPLICATION_ASSIGNED_TAXML_ENTITY_ID varchar(80),
    REASON varchar(80),
    PRIMARY_ID varchar(255),
    SECONDARY_ID varchar(255),
    AUTH_ID int,
    RECEIVED_TIMESTAMP timestamp,
    ZIP varchar(80),
    FILING_STATUS varchar(80),
    TAXPAYER_AGE int,
    SPOUSE_AGE int,
    DEPENDENTS_MINIMUM_AGE int,
    DEPENDENTS_AVERAGE_AGE float,
    DEPENDENTS_MAXIMUM_AGE int,
    TAXPAYER_OCCUPATION varchar(80),
    SPOUSE_OCCUPATION varchar(80),
    FED_FORM_TYPE varchar(80),
    W2_COUNT int,
    AGI numeric(18,2),
    EXEMPTIONS_NUMBER int,
    DEPENDENTS_COUNT int,
    SALARIES_AND_WAGES numeric(18,2),
    TAXABLE_INTEREST numeric(18,2),
    TAX_EXEMPT_INTEREST numeric(18,2),
    ORDINARY_DIVIDEND numeric(18,2),
    QUALIFIED_DIVIDEND numeric(18,2),
    TAXABLE_OFFSET numeric(18,2),
    ALIMONY_INCOME numeric(18,2),
    BUSINESS_INCOME numeric(18,2),
    OTHER_GAIN numeric(18,2),
    FARM_INCOME numeric(18,2),
    CAPITAL_GAIN numeric(18,2),
    IRA_DISTRIBUTION numeric(18,2),
    TAXABLE_IRA numeric(18,2),
    PENSION numeric(18,2),
    TAXABLE_PENSION numeric(18,2),
    SCHEDULE_E_INCOME numeric(18,2),
    HOUSEHOLD_EMPLOYEE_TAX numeric(18,2),
    UNEMPLOYMENT_INCOME numeric(18,2),
    SOCIAL_SECURITY_INCOME numeric(18,2),
    TAXABLE_SOCIAL_SECURITY_INCOME numeric(18,2),
    OTHER_INCOME numeric(18,2),
    TOTAL_INCOME numeric(18,2),
    SELF_EMPLOYMENT_TAX numeric(18,2),
    SELF_EMPLOYMENT_RETIREMENT numeric(18,2),
    TOTAL_DEDUCTIONS numeric(18,2),
    ITEMIZED_DEDUCTIONS_FLAG boolean,
    IRA_DEDUCTION numeric(18,2),
    STUDENT_LOAN_INTEREST numeric(18,2),
    STATE_OR_LOCAL_TAX numeric(18,2),
    STATE_OR_LOCAL_SALES_TAX numeric(18,2),
    REAL_ESTATE_TAX numeric(18,2),
    TAXES_PAID_AMOUNT numeric(18,2),
    MEDICAL_OR_DENTAL_EXPENSES numeric(18,2),
    MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION numeric(18,2),
    PERSONAL_PROPERTY_TAX numeric(18,2),
    OTHER_DEDUCTIBLE_TAX numeric(18,2),
    MORTGAGE_INTEREST numeric(18,2),
    MORTGAGE_INTEREST_NON_1098 numeric(18,2),
    MORTGAGE_POINTS_NON_1098 numeric(18,2),
    MORTGAGE_INSURANCE numeric(18,2),
    INVESTMENT_INTEREST_PAID numeric(18,2),
    TOTAL_INTEREST_PAID numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_CASH numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_NONCASH numeric(18,2),
    CHARITABLE_CONTRIBUTIONS_CARRYOVER numeric(18,2),
    CHARITABLE_CONTRIBUTIONS numeric(18,2),
    CASUALTY_LOSSES numeric(18,2),
    EMPLOYEE_EXPENSES numeric(18,2),
    TAX_PREP_FEES numeric(18,2),
    OTHER_DEDUCTIBLE_EXPENSES numeric(18,2),
    TOTAL_DEDUCTIBLE_EXPENSES numeric(18,2),
    EXPENSES_DEDUCTION numeric(18,2),
    MISCELLANEOUS_DEDUCTIONS numeric(18,2),
    ITEMIZE_ANYWAY_FLAG int,
    TAXABLE_INCOME numeric(18,2),
    SCHEDULE_C_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_CASH_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT int,
    BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT int,
    BUSINESS_MATERIAL_PARTICIPATION_COUNT int,
    BUSINESS_START_ACQUIRE_COUNT int,
    BUSINESS_1099_REQUIRED_COUNT int,
    BUSINESS_WILL_FILE_1099_COUNT int,
    BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT int,
    BUSINESS_GROSS_RECEIPTS_AMOUNT numeric(18,2),
    BUSINESS_RETURNS_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS numeric(18,2),
    BUSINESS_GROSS_PROFIT numeric(18,2),
    BUSINESS_OTHER_INCOME numeric(18,2),
    BUSINESS_GROSS_INCOME numeric(18,2),
    BUSINESS_ADVERTISING_EXPENSE numeric(18,2),
    BUSINESS_CAR_EXPENSE numeric(18,2),
    BUSINESS_COMMISSIONS_PAID numeric(18,2),
    BUSINESS_CONTRACT_LABOR_EXPENSE numeric(18,2),
    BUSINESS_DEPLETION_EXPENSE numeric(18,2),
    BUSINESS_DEPRECIATION numeric(18,2),
    BUSINESS_EMPLOYEE_BENEFITS_PAID numeric(18,2),
    BUSINESS_INSURANCE_PAID numeric(18,2),
    BUSINESS_MORTGAGE_INTEREST_PAID numeric(18,2),
    BUSINESS_OTHER_INTEREST_PAID numeric(18,2),
    BUSINESS_LEGAL_EXPENSE numeric(18,2),
    BUSINESS_OFFICE_EXPENSE numeric(18,2),
    BUSINESS_PENSION_EXPENSE numeric(18,2),
    BUSINESS_RENTAL_VEHICLES_EXPENSE numeric(18,2),
    BUSINESS_RENTAL_OTHER_EXPENSE numeric(18,2),
    BUSINESS_REPAIRS_EXPENSE numeric(18,2),
    BUSINESS_SUPPLIES_EXPENSE numeric(18,2),
    BUSINESS_TAXES_PAID numeric(18,2),
    BUSINESS_TRAVEL_EXPENSE numeric(18,2),
    BUSINESS_MEALS_EXPENSE numeric(18,2),
    BUSINESS_UTILITIES_EXPENSE numeric(18,2),
    BUSINESS_WAGES_PAID numeric(18,2),
    BUSINESS_OTHER_EXPENSE numeric(18,2),
    BUSINESS_TOTAL_EXPENSE numeric(18,2),
    BUSINESS_TENTATIVE_PROFIT numeric(18,2),
    BUSINESS_USE_OF_HOME_EXPENSES numeric(18,2),
    BUSINESS_NET_PROFIT numeric(18,2),
    BUSINESS_INVESTMENT_AT_RISK_TOTAL numeric(18,2),
    BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT int,
    BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT int,
    BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT int,
    BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS_PURCHASES numeric(18,2),
    BUSINESS_COST_OF_GOODS_LABOR numeric(18,2),
    BUSINESS_COST_OF_GOODS_SUPPLIES numeric(18,2),
    BUSINESS_COST_OF_GOODS_OTHER_COST numeric(18,2),
    BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT numeric(18,2),
    BUSINESS_COST_OF_GOODS_TOTAL_SOLD numeric(18,2),
    BUSINESS_VEHICLE_MILES_BUSINESS numeric(18,2),
    BUSINESS_VEHICLE_MILES_COMMUTE numeric(18,2),
    BUSINESS_VEHICLE_MILES_OTHER numeric(18,2),
    BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT int,
    BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT int,
    BUSINESS_VEHICLES_EVIDENCE_COUNT int,
    BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT int,
    SCHEDULE_E_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT int,
    SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT int,
    SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_PASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_ESTATE_PASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS numeric(18,2),
    SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME numeric(18,2),
    SUPPLEMENTAL_ESTATE_TOTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_REMIC_EXCESS_INCLUSION numeric(18,2),
    SUPPLEMENTAL_REMIC_TAXABLE_INCOME numeric(18,2),
    SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME numeric(18,2),
    SUPPLEMENTAL_FARM_RENTAL_INCOME numeric(18,2),
    SUPPLEMENTAL_FARM_GROSS_INCOME numeric(18,2),
    SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME numeric(18,2),
    DISABLED_CREDIT numeric(18,2),
    TAX_CREDITS numeric(18,2),
    RESIDENTIAL_ENERGY_CREDIT numeric(18,2),
    CHILD_CREDIT numeric(18,2),
    EDUCATION_CREDIT numeric(18,2),
    TUITION numeric(18,2),
    EDUCATOR_EXPENSES numeric(18,2),
    CERTAIN_BUSINESS_EXPENSE numeric(18,2),
    HSA numeric(18,2),
    MOVING_EXPENSE numeric(18,2),
    DEDUCTIBLE_SELF_EMPLOYMENT_TAX numeric(18,2),
    SELF_EMPLOYMENT_HEALTH_INSURANCE numeric(18,2),
    EARLY_WITHDRAWAL_PENALTY numeric(18,2),
    ALIMONY_PAID numeric(18,2),
    DOMESTIC_PRODUCTION_DEDUCTION numeric(18,2),
    ADJUSTMENTS numeric(18,2),
    OLD_OR_BLIND_COUNT int,
    ITEMIZE_SEPARATELY_FLAG boolean,
    EXEMPTION_AMOUNT numeric(18,2),
    TAX_LIABILITY numeric(18,2),
    CHILD_CARE_CREDIT numeric(18,2),
    ADDITIONAL_CHILD_CARE_CREDIT numeric(18,2),
    RETIREMENT_SAVINGS_CREDIT numeric(18,2),
    HOPE_CREDIT numeric(18,2),
    EARNED_INCOME_TAX_CREDIT numeric(18,2),
    ALTERNATIVE_MINIMUM_TAX numeric(18,2),
    FOREIGN_TAX_CREDIT numeric(18,2),
    OTHER_CREDITS numeric(18,2),
    TOTAL_CREDITS numeric(18,2),
    UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX numeric(18,2),
    RETIRMENT_ADDITIONAL_TAX numeric(18,2),
    HOMEBUYER_CREDIT_REPAYMENT numeric(18,2),
    OTHER_TAXES numeric(18,2),
    INCOME_TAX_WITHHELD numeric(18,2),
    ESTIMATED_TAX numeric(18,2),
    NON_TAXABLE_COMBAT_PAY numeric(18,2),
    PAYMENT_WITH_EXTENSION numeric(18,2),
    EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD numeric(18,2),
    FUEL_TAX_CREDIT numeric(18,2),
    OTHER_PAYMENTS numeric(18,2),
    TOTAL_PAYMENTS numeric(18,2),
    ESTIMATED_TAX_PENALTY numeric(18,2),
    INCOME_TAX numeric(18,2),
    TOTAL_TAX numeric(18,2),
    TAX_DUE numeric(18,2),
    REFUND numeric(18,2),
    ACA_TAX_CREDIT_REPAYMENT numeric(18,2),
    ACA_FULL_YEAR_COVERAGE int,
    ACA_PENALTY numeric(18,2),
    TAXPAYER_PHONE_AREA_CODE varchar(80),
    TAXPAYER_PHONE_ID varchar(80),
    SPOUSE_PHONE_AREA_CODE varchar(80),
    SPOUSE_PHONE_ID varchar(80),
    W2_OWNER_LIST varchar(80),
    W2_EIN_LIST varchar(80),
    W2_EMPLOYER_LIST varchar(80),
    W2_EMPLOYER_ZIP_LIST varchar(80),
    W2_WAGES_TOTAL numeric(18,2),
    W2_FED_WITHHELD_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_WAGES_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_WITHHELD_TOTAL numeric(18,2),
    W2_MEDICARE_WAGES_TOTAL numeric(18,2),
    W2_MEDICARE_WITHHELD_TOTAL numeric(18,2),
    W2_SOCIAL_SECURITY_TIPS_TOTAL numeric(18,2),
    W2_ALLOCATED_TIPS_TOTAL numeric(18,2),
    W2_STATES_COUNT_LIST varchar(80),
    W2_LOCALITY_COUNT_LIST varchar(80),
    W2_STATE_WAGES_TOTAL numeric(18,2),
    W2_STATE_TAX_TOTAL numeric(18,2),
    W2_LOCAL_WAGES_TOTAL numeric(18,2),
    W2_LOCAL_TAX_TOTAL numeric(18,2),
    RAW_W2_WAGES varchar(80),
    RAW_W2_FED_WITHHELD varchar(80),
    RAW_W2_SOCIAL_SECURITY_WAGES varchar(80),
    RAW_W2_SOCIAL_SECURITY_WITHHELD varchar(80),
    RAW_W2_MEDICARE_WAGES varchar(80),
    RAW_W2_MEDICARE_WITHHELD varchar(80),
    RAW_W2_SOCIAL_SECURITY_TIPS varchar(80),
    RAW_W2_ALLOCATED_TIPS varchar(80),
    RAW_W2_STATE_WAGES varchar(80),
    RAW_W2_STATE_TAX varchar(80),
    RAW_W2_LOCAL_WAGES varchar(80),
    RAW_W2_LOCAL_TAX varchar(80),
    STATES_COUNT int,
    RAW_STATES varchar(80),
    TAXPAYER_MILITARY_FLAG boolean,
    SPOUSE_MILITARY_FLAG boolean,
    IDENTITY_THEFT_PIN_FLAG boolean,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    RESIDENT_STATE_RETURNS_COUNT int
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_TAXML ADD CONSTRAINT PK_TRN_TAXML PRIMARY KEY (TAXML_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE
(
    OCR_PERFORMANCE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE_SEQ'),
    REQUEST_UUID varchar(200),
    OCR_PERFORMANCE_TIMESTAMP timestamp NOT NULL,
    TRANSACTION_ID varchar(50) NOT NULL,
    AUTH_ID int NOT NULL,
    CLIENT_APPLICATION_ID varchar(50) NOT NULL,
    FORM_TYPE varchar(50) NOT NULL,
    IMPORT_METHOD varchar(50),
    MASHUP_RESULT varchar(50),
    TEST_FLAG varchar(50),
    OCR_SUCCEEDED boolean,
    OCR_RESPONSE_CODE int,
    OCR_PROCESSING_TIME_MILLISECONDS int,
    MEF_STORAGE_SUCCEEDED boolean,
    MEF_STORAGE_RESPONSE_CODE int,
    MEF_STORAGE_PROCESSING_TIME_MILLISECONDS int,
    META_DATA_STORAGE_SUCCEEDED boolean,
    META_DATA_STORAGE_RESPONSE_CODE int,
    META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS int,
    EMPLOYER_PROVINCE_OR_STATE_MATCH boolean,
    EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE float,
    EMPLOYER_POSTAL_CODE_MATCH boolean,
    EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE float,
    EMPLOYER_NAME_LINE1_MATCH boolean,
    EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE float,
    EMPLOYER_EIN_MATCH boolean,
    EMPLOYER_EIN_MATCH_CONFIDENCE float,
    EMPLOYER_CITY_MATCH boolean,
    EMPLOYER_CITY_MATCH_CONFIDENCE float,
    EMPLOYER_ADDRESS_LINE1_MATCH boolean,
    EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE float,
    EMPLOYEE_SSN_MATCH boolean,
    EMPLOYEE_SSN_MATCH_CONFIDENCE float,
    EMPLOYEE_NAME_MATCH boolean,
    EMPLOYEE_NAME_MATCH_CONFIDENCE float,
    EMPLOYEE_PROVINCE_OR_STATE_MATCH boolean,
    EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE float,
    EMPLOYEE_POSTAL_CODE_MATCH boolean,
    EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE float,
    EMPLOYEE_CITY_MATCH boolean,
    EMPLOYEE_CITY_MATCH_CONFIDENCE float,
    EMPLOYEE_ADDRESS_MATCH boolean,
    EMPLOYEE_ADDRESS_MATCH_CONFIDENCE float,
    ALLOCATED_TIPS_MATCH boolean,
    ALLOCATED_TIPS_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_TIPS_MATCH boolean,
    SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE float,
    MEDICARE_TAX_WITHHELD_MATCH boolean,
    MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE float,
    MEDICARE_WAGES_AND_TIPS_MATCH boolean,
    MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_TAX_MATCH boolean,
    SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_WAGES_MATCH boolean,
    SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE float,
    WITHHOLDING_MATCH boolean,
    WITHHOLDING_MATCH_CONFIDENCE float,
    LOCALITY_NAMES_MATCH boolean,
    LOCALITY_NAMES_MATCH_CONFIDENCE float,
    WAGES_MATCH boolean,
    WAGES_MATCH_CONFIDENCE float,
    LOCAL_WITHHOLDING_MATCH boolean,
    LOCAL_WITHHOLDING_MATCH_CONFIDENCE float,
    LOCAL_WAGE_MATCH boolean,
    LOCAL_WAGE_MATCH_CONFIDENCE float,
    STATE_WITHHOLDING_MATCH boolean,
    STATE_WITHHOLDING_MATCH_CONFIDENCE float,
    STATE_WAGE_MATCH boolean,
    STATE_WAGE_MATCH_CONFIDENCE float,
    STATES_MATCH boolean,
    STATES_MATCH_CONFIDENCE float,
    STATE_IDS_MATCH boolean,
    STATE_IDS_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_CODES_MATCH boolean,
    BOX_FOURTEEN_CODES_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_DESCRIPTIONS_MATCH boolean,
    BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_AMOUNTS_MATCH boolean,
    BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE float,
    RETIREMENT_MATCH boolean,
    RETIREMENT_MATCH_CONFIDENCE float,
    SICK_PAY_MATCH boolean,
    SICK_PAY_MATCH_CONFIDENCE float,
    STATUTORY_EMPLOYEE_MATCH boolean,
    STATUTORY_EMPLOYEE_MATCH_CONFIDENCE float,
    BOX_TWELVE_D_CODES_MATCH boolean,
    BOX_TWELVE_D_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_D_AMOUNTS_MATCH boolean,
    BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_C_CODES_MATCH boolean,
    BOX_TWELVE_C_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_C_AMOUNTS_MATCH boolean,
    BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_B_CODES_MATCH boolean,
    BOX_TWELVE_B_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_B_AMOUNTS_MATCH boolean,
    BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_A_CODES_MATCH boolean,
    BOX_TWELVE_A_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_A_AMOUNTS_MATCH boolean,
    BOX_TWELVE_A_AMOUNTS_CONFIDENCE float,
    NONQUALIFIED_PLANS_MATCH boolean,
    NONQUALIFIED_PLANS_MATCH_CONFIDENCE float,
    DEPENDENT_CARE_BENEFITS_MATCH boolean,
    DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE float,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE ADD CONSTRAINT PK_TRN_OCR_PERFORMANCE PRIMARY KEY (OCR_PERFORMANCE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_OCR_PERFORMANCE
(
    REQUEST_UUID varchar(36),
    "TIMESTAMP" timestamp NOT NULL,
    TID varchar(50) NOT NULL,
    AUTH_ID int NOT NULL,
    CLIENT_APP_ID varchar(50) NOT NULL,
    FORM_TYPE varchar(50) NOT NULL,
    IMPORT_METHOD varchar(50),
    MASHUP_RESULT varchar(50),
    TEST_FLAG varchar(50),
    OCR_SUCCEEDED boolean,
    OCR_RESPONSE_CODE int,
    OCR_PROCESSING_TIME_MILLISECONDS int,
    MEF_STORAGE_SUCCEEDED boolean,
    MEF_STORAGE_RESPONSE_CODE int,
    MEF_STORAGE_PROCESSING_TIME_MILLISECONDS int,
    META_DATA_STORAGE_SUCCEEDED boolean,
    META_DATA_STORAGE_RESPONSE_CODE int,
    META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS int,
    EMPLOYER_PROVINCE_OR_STATE_MATCH boolean,
    EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE float,
    EMPLOYER_POSTAL_CODE_MATCH boolean,
    EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE float,
    EMPLOYER_NAME_LINE1_MATCH boolean,
    EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE float,
    EMPLOYER_EIN_MATCH boolean,
    EMPLOYER_EIN_MATCH_CONFIDENCE float,
    EMPLOYER_CITY_MATCH boolean,
    EMPLOYER_CITY_MATCH_CONFIDENCE float,
    EMPLOYER_ADDRESS_LINE1_MATCH boolean,
    EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE float,
    EMPLOYEE_SSN_MATCH boolean,
    EMPLOYEE_SSN_MATCH_CONFIDENCE float,
    EMPLOYEE_NAME_MATCH boolean,
    EMPLOYEE_NAME_MATCH_CONFIDENCE float,
    EMPLOYEE_PROVINCE_OR_STATE_MATCH boolean,
    EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE float,
    EMPLOYEE_POSTAL_CODE_MATCH boolean,
    EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE float,
    EMPLOYEE_CITY_MATCH boolean,
    EMPLOYEE_CITY_MATCH_CONFIDENCE float,
    EMPLOYEE_ADDRESS_MATCH boolean,
    EMPLOYEE_ADDRESS_MATCH_CONFIDENCE float,
    ALLOCATED_TIPS_MATCH boolean,
    ALLOCATED_TIPS_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_TIPS_MATCH boolean,
    SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE float,
    MEDICARE_TAX_WITHHELD_MATCH boolean,
    MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE float,
    MEDICARE_WAGES_AND_TIPS_MATCH boolean,
    MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_TAX_MATCH boolean,
    SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE float,
    SOCIAL_SECURITY_WAGES_MATCH boolean,
    SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE float,
    WITHHOLDING_MATCH boolean,
    WITHHOLDING_MATCH_CONFIDENCE float,
    LOCALITY_NAMES_MATCH boolean,
    LOCALITY_NAMES_MATCH_CONFIDENCE float,
    WAGES_MATCH boolean,
    WAGES_MATCH_CONFIDENCE float,
    LOCAL_WITHHOLDING_MATCH boolean,
    LOCAL_WITHHOLDING_MATCH_CONFIDENCE float,
    LOCAL_WAGE_MATCH boolean,
    LOCAL_WAGE_MATCH_CONFIDENCE float,
    STATE_WITHHOLDING_MATCH boolean,
    STATE_WITHHOLDING_MATCH_CONFIDENCE float,
    STATE_WAGE_MATCH boolean,
    STATE_WAGE_MATCH_CONFIDENCE float,
    STATES_MATCH boolean,
    STATES_MATCH_CONFIDENCE float,
    STATE_IDS_MATCH boolean,
    STATE_IDS_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_CODES_MATCH boolean,
    BOX_FOURTEEN_CODES_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_DESCRIPTIONS_MATCH boolean,
    BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE float,
    BOX_FOURTEEN_AMOUNTS_MATCH boolean,
    BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE float,
    RETIREMENT_MATCH boolean,
    RETIREMENT_MATCH_CONFIDENCE float,
    SICK_PAY_MATCH boolean,
    SICK_PAY_MATCH_CONFIDENCE float,
    STATUTORY_EMPLOYEE_MATCH boolean,
    STATUTORY_EMPLOYEE_MATCH_CONFIDENCE float,
    BOX_TWELVE_D_CODES_MATCH boolean,
    BOX_TWELVE_D_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_D_AMOUNTS_MATCH boolean,
    BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_C_CODES_MATCH boolean,
    BOX_TWELVE_C_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_C_AMOUNTS_MATCH boolean,
    BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_B_CODES_MATCH boolean,
    BOX_TWELVE_B_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_B_AMOUNTS_MATCH boolean,
    BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE float,
    BOX_TWELVE_A_CODES_MATCH boolean,
    BOX_TWELVE_A_CODES_MATCH_CONFIDENCE float,
    BOX_TWELVE_A_AMOUNTS_MATCH boolean,
    BOX_TWELVE_A_AMOUNTS_CONFIDENCE float,
    NONQUALIFIED_PLANS_MATCH boolean,
    NONQUALIFIED_PLANS_MATCH_CONFIDENCE float,
    DEPENDENT_CARE_BENEFITS_MATCH boolean,
    DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE float
);


CREATE TABLE CTG_ANALYTICS_STG.STG_ACCEPTED_REFUND
(
    FILING_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    SEQUENCE_NUMBER int NOT NULL,
    PRIMARY_ID varchar(255) NOT NULL,
    SECONDARY_ID varchar(255),
    AMOUNT numeric(18,2) NOT NULL,
    BANK_RTN varchar(255),
    FILING_TYPE varchar(255) NOT NULL,
    PAYMENT_METHOD int NOT NULL,
    APPLICATION varchar(255),
    ENGINE_CODE varchar(255),
    ACCEPTED_TIMESTAMP timestamp NOT NULL,
    CREDIT_FOR_SALE_PRIORITY_CODE varchar(255),
    BANK_PRODUCT varchar(255),
    ACCEPTED_TAX_DATE_ID int NOT NULL,
    AUTH_ID int
);


CREATE TABLE CTG_ANALYTICS_STG.STG_UNLOCK_LOGIN_EXTRACT
(
    AUTH_ID int NOT NULL,
    FIRST_LOGIN_TIMESTAMP timestamp NOT NULL,
    LAST_LOGIN_TIMESTAMP timestamp NOT NULL,
    YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_UNLOCK_ORDER_EXTRACT
(
    AUTH_ID int,
    CUSTOMER_KEY int NOT NULL,
    ORDER_NUMBER varchar(70),
    ORDER_TIMESTAMP timestamp NOT NULL,
    PRODUCT_VERSION int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP
(
    CUSTOMER_STATE_ZIP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP_SEQ'),
    CUSTOMER_KEY int NOT NULL,
    MARKETING_CUSTOMER_ID int,
    STATE_ABBREVIATION varchar(20),
    ZIP_CODE varchar(10),
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP ADD CONSTRAINT PK_TRN_CUSTOMER_STATE_ZIP PRIMARY KEY (CUSTOMER_STATE_ZIP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_CUSTOMER_STATE_ZIP
(
    CUSTOMER_KEY int NOT NULL,
    MARKETING_CUSTOMER_ID int,
    STATE_ABBREVIATION varchar(20),
    ZIP_CODE varchar(10),
    TAX_YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TUNE_ACTUAL_INSTALL
(
    SITE_ID int NOT NULL,
    SITE_NAME varchar(50) NOT NULL,
    PUBLISHER_ID int NOT NULL,
    PUBLISHER_NAME varchar(50) NOT NULL,
    SITE_EVENT_ID int NOT NULL,
    SITE_EVENT_NAME varchar(50) NOT NULL,
    ADVERTISER_SUB_PUBLISHER_ID int,
    ADVERTISER_SUB_PUBLISHER_NAME varchar(50),
    ADVERTISER_SUB_SITE_ID int,
    ADVERTISER_SUB_SITE_NAME varchar(50),
    ADVERTISER_SUB_CAMPAIGN_ID int,
    ADVERTISER_SUB_CAMPAIGN_NAME varchar(50),
    ADVERTISER_SUB_ADGROUP_ID int,
    ADVERTISER_SUB_ADGROUP_NAME varchar(50),
    ADVERTISER_SUB_AD_ID int,
    ADVERTISER_SUB_AD_NAME varchar(50),
    ADVERTISER_SUB_KEYWORD_ID int,
    ADVERTISER_SUB_KEYWORD_NAME varchar(50),
    ADVERTISER_SUB_PLACEMENT_ID int,
    ADVERTISER_SUB_PLACEMENT_NAME varchar(50),
    PUBLISHER_SUB_CAMPAIGN_ID int,
    PUBLISHER_SUB_CAMPAIGN_NAME varchar(100),
    PUBLISHER_SUB_ADGROUP_ID int,
    PUBLISHER_SUB_ADGROUP_NAME varchar(100),
    PUBLISHER_SUB_AD_ID int,
    PUBLISHER_SUB_AD_NAME varchar(100),
    PUBLISHER_SUB_KEYWORD_ID int,
    PUBLISHER_SUB_KEYWORD_NAME varchar(100),
    PUBLISHER_SUB_PLACEMENT_ID int,
    PUBLISHER_SUB_PLACEMENT_NAME varchar(255),
    AD_CLICKS int NOT NULL,
    INSTALLS int NOT NULL,
    EVENTS int NOT NULL,
    UPDATES int,
    PUBLISHER_SUB_CAMPAIGN_REF varchar(100),
    PUBLISHER_SUB_ADGROUP_REF varchar(100),
    DEVICE_TYPE varchar(100)
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_AUTH_DATA
(
    AUTH_DATA_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_AUTH_DATA_SEQ'),
    TAX_YEAR int,
    AUTH_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    SOURCE varchar(50),
    ROLE varchar(1),
    SOURCE_APPLICATION_ID int,
    PRODUCT_ID int,
    AUTHENTICATION_LEVEL varchar(5),
    IP_ADDRESS varchar(50),
    TEST_FLAG varchar(10),
    TRANSACTION_ID varchar(100),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_AUTH_DATA ADD CONSTRAINT PK_TRN_AUTH_DATA PRIMARY KEY (AUTH_DATA_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_SESSION_END
(
    SESSION_END_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_SESSION_END_SEQ'),
    TAX_YEAR int,
    END_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    CURRENT_PRIORITY_CODE int,
    PRICE_PRIORITY_CODE int,
    CREDIT_PRIORITY_CODE int,
    ORIGINAL_PRODUCT_ID int,
    FIRST_TIME_FLAG varchar(1),
    ORIGINAL_PRODUCTID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_SESSION_END ADD CONSTRAINT PK_TRN_SESSION_END PRIMARY KEY (SESSION_END_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_SESSION_START
(
    SESSION_START_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_SESSION_START_SEQ'),
    TAX_YEAR int,
    START_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int,
    PRIORITY_CODE varchar(50),
    PRODUCT_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_SESSION_START ADD CONSTRAINT PK_TRN_SESSION_START PRIMARY KEY (SESSION_START_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.TRN_TAX_ORDER
(
    TAX_ORDER_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_TAX_ORDER_SEQ'),
    TAX_YEAR int,
    ORDER_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRIMARY_ID varchar(100) NOT NULL,
    SECONDARY_ID varchar(100),
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50) NOT NULL,
    ORDER_NUMBER varchar(64),
    ITEM_ALIAS_CODE varchar(20) NOT NULL,
    PAYMENT_METHOD varchar(100) NOT NULL,
    PAYMENT_AMOUNT numeric(15,2),
    ORIGINAL_PRODUCT_ID int NOT NULL,
    VOUCHER_CODE varchar(13),
    HOLD_REASON varchar(50),
    ORDER_ORIGIN varchar(30),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_TAX_ORDER ADD CONSTRAINT PK_TRN_TAX_ORDER PRIMARY KEY (TAX_ORDER_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_AUTH_DATA
(
    AUTH_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    SOURCE varchar(50),
    ROLE varchar(1),
    SOURCE_APPLICATION_ID int,
    PRODUCT_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_PRS
(
    PRS_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRODUCTID int,
    LOCATION varchar(50),
    SCORE int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_PRS_VERBATIM
(
    PRS_VERBATIM_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRODUCT_ID int,
    VERBATIM varchar(4000),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_SESSION_END
(
    END_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    CURRENT_PRIORITY_CODE int,
    PRICE_PRIORITY_CODE int,
    CREDIT_PRIORITY_CODE int,
    ORIGINAL_PRODUCT_ID int,
    FIRST_TIME_FLAG varchar(1),
    ORIGINAL_PRODUCTID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_SESSION_START
(
    START_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRIORITY_CODE varchar(50),
    PRODUCT_ID int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TTO_TAX_ORDER
(
    ORDER_TIMESTAMP timestamp NOT NULL,
    AUTH_ID int NOT NULL,
    PRIMARY_ID varchar(100) NOT NULL,
    SECONDARY_ID varchar(100),
    CURRENT_PRIORITY_CODE varchar(50),
    PRICE_PRIORITY_CODE varchar(50),
    CREDIT_PRIORITY_CODE varchar(50) NOT NULL,
    ORDER_NUMBER varchar(64),
    ITEM_ALIAS_CODE varchar(20) NOT NULL,
    PAYMENT_METHOD varchar(100) NOT NULL,
    PAYMENT_AMOUNT numeric(15,2),
    ORIGINAL_PRODUCT_ID int NOT NULL,
    VOUCHER_CODE varchar(13),
    HOLD_REASON varchar(50),
    ORDER_ORIGIN varchar(30),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.FACT_MULTIFILER_AUTH_dup_20162206
(
    AUTH_ID int,
    TAX_YEAR int,
    MULTIFILER_TIMESTAMP timestamp,
    MULTIFILER_REASON_ID int,
    PARENT_MULTIFILER_REASON_ID int,
    GENERATION_NUMBER int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp,
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_STG.FACT_MULTIFILER_VISITOR_dup_20162206
(
    VISITOR_OMT_ID int,
    TAX_YEAR int,
    MULTIFILER_TIMESTAMP timestamp,
    MULTIFILER_REASON_ID int,
    PARENT_MULTIFILER_REASON_ID int,
    GENERATION_NUMBER int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp,
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_COST_CAMELOT_20160705
(
    CAMPAIGN_DATE date,
    CID varchar(100),
    COST numeric(37,15),
    CLICKS int,
    IMPRESSIONS int,
    CREATED_TIMESTAMP timestamp,
    BATCH_EVENT_ID int,
    UPDATED_TIMESTAMP timestamp,
    AUDIT_INS_BY varchar(50)
);


CREATE TABLE CTG_ANALYTICS_STG.STG_TAX_RETURN_SUMMARY
(
    TRANS_ID int NOT NULL,
    AUTH_ID int,
    TY_YEAR int,
    HIT_TIMESTAMP timestamp,
    PROP17 varchar(255),
    PROP18 varchar(255),
    PROP29 varchar(255),
    PROP30 varchar(255),
    BATCH_EVENT_ID int
);

ALTER TABLE CTG_ANALYTICS_STG.STG_TAX_RETURN_SUMMARY ADD CONSTRAINT PK_STG_TAX_RETURN_SUMMARY PRIMARY KEY (TRANS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_CID_UPLOAD_DATA
(
    CHANNEL varchar(100),
    CID varchar(400) NOT NULL,
    CID1 varchar(400),
    CID2 varchar(400),
    CID3 varchar(400),
    CID4 varchar(400),
    CID5 varchar(400),
    CID6 char(400),
    CID7 varchar(400),
    CID8 varchar(400),
    VENUE varchar(80),
    SEGMENT varchar(80),
    SUBVENUE varchar(80)
);


CREATE TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY
(
    TAX_RETURN_STATE_SUMMARY_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY_SEQ'),
    CLICKSTREAM_ID int,
    AUTH_ID int,
    TAX_RETURN_FED_SUMMARY_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    SEQUENCE_NUMBER int NOT NULL,
    STATE_CODE varchar(2),
    STATE_ID int,
    REFUND_AMOUNT numeric(18,4),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT PK_FACT_STATE_TAX_RETURN PRIMARY KEY (TAX_RETURN_STATE_SUMMARY_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST
(
    AUTH_ID_TAX_RETURN_SUMMARY_LAST_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST_SEQ'),
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    TAX_RETURN_FED_SUMMARY_ID int NOT NULL,
    LAST_TAX_RETURN_TIMESTAMP timestamp NOT NULL,
    LAST_TAX_RETURN_TAX_DATE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST ADD CONSTRAINT PK_SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST PRIMARY KEY (AUTH_ID_TAX_RETURN_SUMMARY_LAST_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    RANKED_FED_ACCEPTED_TIMESTAMP timestamp,
    AVG_FED_REFUND_AMOUNT numeric(18,2),
    RANKED_FED_EFILE_PAYMENT_METHOD_ID int,
    RANKED_FED_EFILE_PAYMENT_METHOD varchar(255),
    RANKED_STATE_ACCEPTED_TIMESTAMP timestamp,
    AVG_STATE_REFUND_AMOUNT numeric(18,2),
    RANKED_STATE_EFILE_PAYMENT_METHOD_ID int,
    RANKED_STATE_EFILE_PAYMENT_METHOD varchar(255),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND ADD CONSTRAINT PK_AGG_AUTH_ID_ACCEPTED_REFUND PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP
(
    AGG_SESSION_PAGE_GROUP_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP_SEQ'),
    SESSION_ID int NOT NULL,
    VISITOR_OMT_ID int NOT NULL,
    VISITOR_ID int,
    VISIT_NUM int NOT NULL,
    SESSION_KEY varchar(50),
    SESSION_OMT_KEY varchar(50),
    TAX_YEAR int NOT NULL,
    PAGE_GROUP varchar(100) NOT NULL,
    FIRST_PAGE_URL varchar(5000) NOT NULL,
    FIRST_PAGE_URL_ID int NOT NULL,
    FIRST_PAGE_SERVER_TIMESTAMP timestamp NOT NULL,
    FIRST_PAGE_TAX_DATE_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT PK_AGG_SESSION_PAGE_GROUP PRIMARY KEY (AGG_SESSION_PAGE_GROUP_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE
(
    SESSION_AUTH_TYPE_ID int NOT NULL,
    SESSION_AUTH_TYPE varchar(25) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE ADD CONSTRAINT PK_DIM_SESSION_AUTH_TYPE PRIMARY KEY (SESSION_AUTH_TYPE_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE
(
    EFILE_REJECT_CODE_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_EFILE_REJECT_CODE_SEQ'),
    FILING_TYPE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    ERROR_CODE varchar(255) NOT NULL,
    ERROR_MSG varchar(1500) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE ADD CONSTRAINT PK_DIM_EFILE_REJECT_CODE PRIMARY KEY (EFILE_REJECT_CODE_ID) DISABLED;
ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE ADD CONSTRAINT AK1_DIM_EFILE_REJECT_CODE UNIQUE (TAX_YEAR, FILING_TYPE_ID, ERROR_CODE) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR
(
    EFILE_REJECT_ERROR_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR_SEQ'),
    FILING_ID varchar(255) NOT NULL,
    TAX_YEAR int NOT NULL,
    CHANGE_ID varchar(255) NOT NULL,
    SEQUENCE_NUMBER int NOT NULL,
    EFILE_STATUS_TAX_DATE_ID int NOT NULL,
    EFILE_STATUS_TIMESTAMP timestamp NOT NULL,
    TAXFILER_ID int NOT NULL,
    PRIMARY_ID varchar(255) NOT NULL,
    AUTH_ID int,
    FILING_TYPE_ID int NOT NULL,
    EFILE_REJECT_CODE_ID int NOT NULL,
    FIELD varchar(255) NOT NULL,
    EFILE_REJECT_ERROR_FIELD_KEYWORD_ID int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT PK_FACT_EFILE_REJECT_ERROR PRIMARY KEY (EFILE_REJECT_ERROR_ID) DISABLED;
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT AK1_FACT_EFILE_REJECT_ERROR UNIQUE (TAX_YEAR, CHANGE_ID, SEQUENCE_NUMBER) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD
(
    EFILE_REJECT_ERROR_FIELD_KEYWORD_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD_SEQ'),
    FIELD_KEYWORD varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD ADD CONSTRAINT PK_DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD PRIMARY KEY (EFILE_REJECT_ERROR_FIELD_KEYWORD_ID) DISABLED;
ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD ADD CONSTRAINT AK1_DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD UNIQUE (FIELD_KEYWORD) DISABLED;

CREATE FLEX TABLE CTG_ANALYTICS_STG.TRN_RAW_FLEX_GETDATA_UPLOAD
(

);


CREATE TABLE CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT
(
    UNLOCK_LOGIN_EXTRACT_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT_SEQ'),
    AUTH_ID int NOT NULL,
    FIRST_LOGIN_TIMESTAMP timestamp NOT NULL,
    LAST_LOGIN_TIMESTAMP timestamp NOT NULL,
    YEAR int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT ADD CONSTRAINT PK_TRN_UNLOCK_LOGIN_EXTRACT PRIMARY KEY (UNLOCK_LOGIN_EXTRACT_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.dups_clickid
(
    CLICKSTREAM_ID int,
    VISITOR_OMT_ID int,
    VISITOR_IVID_ID int,
    AUTH_ID int,
    AUTH_ID_SOURCE_ID int,
    SERVER_TIMESTAMP timestamp,
    TAX_DATE_ID int,
    TAX_YEAR int,
    PAGE_ID int,
    PAGE_URL_ID int,
    REFERRER_PAGE_URL_ID int,
    FORM_ID int,
    CAMPAIGN_ID int,
    VISIT_NUM int,
    USER_AGENT_ID int,
    NONFFA_FLAG boolean,
    VALID_FOR_FIRST_VISIT_FLAG boolean,
    POST_KEYWORD_ID int,
    START_EXPERIENCE varchar(25),
    SOURCE_APPLICATION_ID int,
    GEO_LOCATION_ID int,
    IP_ADDRESS varchar(50),
    PURCHASE_FLAG boolean,
    SITE_AREA_ID int,
    HELP_USAGE_ID int,
    SCREEN_ID int,
    PRIOR_YEAR_TAXPREP_METHOD_ID int,
    PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID int,
    EXPERIENCE_ID int,
    EXPERIENCE_RENDERED_ID int,
    AB_TEST_ID int,
    RECIPE_ID int,
    PRIORITY_CODE_ID int,
    BATCH_EVENT_ID int,
    CREATED_TIMESTAMP timestamp,
    UPDATED_TIMESTAMP timestamp
);


CREATE TABLE CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER
(
    ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER_SEQ'),
    SOURCE_FOLDER varchar(150) NOT NULL,
    PROCESSED boolean NOT NULL DEFAULT false
);

ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER ADD CONSTRAINT PK_ETL_GETDATA_UPLOAD_SOURCE_FOLDER PRIMARY KEY (ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_STG.STG_GETDATA_UPLOAD_FOLDER_LIST
(
    SOURCE_FOLDER varchar(150) NOT NULL
);

COMMENT ON TABLE CTG_ANALYTICS_STG.STG_GETDATA_UPLOAD_FOLDER_LIST IS 'GETDATA UPLOAD ETL WRAPPER';


CREATE TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION
(
    GETDATA_FORM_GENERIC_INFORMATION_ID int NOT NULL,
    TID varchar(100) NOT NULL,
    AUTH_ID int,
    ALTERNATE_ID varchar(100),
    RAW_TIMESTAMP int,
    REQUEST_TIMESTAMP timestamp,
    RAW_TAX_YEAR int,
    TAX_YEAR int,
    EVENT_HEADER_EVENT_ID varchar(200),
    EVENT_HEADER_EVENT_TIMESTAMP timestamp,
    EVENT_HEADER_RAW_EVENT_TIMESTAMP int,
    EVENT_HEADER_SERVER_TIMESTAMP timestamp,
    EVENT_HEADER_RAW_SERVER_TIMESTAMP int,
    EVENT_HEADER_VERSION varchar(100),
    EVENT_HEADER_APP_ID varchar(100),
    EVENT_HEADER_APP_NAME varchar(100),
    EVENT_HEADER_OFFERING_ID varchar(100),
    EVENT_HEADER_ACCEPT_LANGUAGE varchar(100),
    EVENT_HEADER_SERVER_IP_ADDRESS varchar(50),
    EVENT_HEADER_TOPIC_NAME varchar(100),
    EVENT_HEADER_CLIENT_IP_ADDRESS varchar(50),
    CLIENT varchar(100),
    DOC_TYPE varchar(100) NOT NULL,
    DOC_CATEGORY varchar(20) NOT NULL,
    HTTP_STATUS int,
    PROD_OR_TEST varchar(10),
    USER_AGENT varchar(5000),
    DOCUMENT_ID varchar(100) NOT NULL,
    FED_ID varchar(20),
    FIELDS_RECOGNIZED_COUNT int,
    IMPORT_DRIVER varchar(20),
    IVID_CLIENT varchar(100),
    IVID_SERVER varchar(100),
    OMT_VISITOR_ID varchar(100),
    PROCESSING_TIME_IN_MS int,
    SUCCEEDED boolean,
    TOPIC varchar(50),
    ERROR_MESSAGE varchar(4000),
    STATUS_SOURCE varchar(100),
    STATUS_CODE varchar(200),
    STATUS_SEVERITY varchar(100),
    STATUS_MESSAGE varchar(4000),
    GETDATA_FORMAT_VERSION varchar(10),
    SERVICE_TYPE varchar(20),
    PARTNER varchar(50),
    PARTNER_TYPE varchar(50),
    TURNAROUND_TIME_IN_MS int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
)
PARTITION BY (TRN_GETDATA_FORM_GENERIC_INFORMATION.DOC_CATEGORY);

COMMENT ON TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION IS 'TRN TABLE HAVING FORM GENERIC INFORMATION';

ALTER TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION ADD CONSTRAINT PK_GETDATA_FORM_GENERIC_INFORMATION_ID PRIMARY KEY (GETDATA_FORM_GENERIC_INFORMATION_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_SRC.REJ_GETDATA_RAW_FLEX
(
    FLEX_IDENTITY int NOT NULL,
    SERVICE_TYPE varchar(20),
    __RAW__ long varbinary(130000),
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp DEFAULT statement_timestamp()
);

COMMENT ON TABLE CTG_ANALYTICS_SRC.REJ_GETDATA_RAW_FLEX IS 'TRN COMMON REJECTED TABLE FOR ALL SERVICES';


CREATE TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION
(
    GETDATA_FORM_FIELD_INFORMATION int NOT NULL,
    GETDATA_FORM_GENERIC_INFORMATION_ID int NOT NULL,
    DOC_TYPE varchar(500) NOT NULL,
    DOC_CATEGORY varchar(50) NOT NULL,
    REQUEST_TIMESTAMP timestamp,
    FIELD_POSITION_INDEX int NOT NULL,
    FIELD_NAME varchar(500) NOT NULL,
    FIELD_TYPE varchar(50),
    FIELD_VALUE varchar(500),
    CONFIDENCE_SCORE numeric(18,0),
    HAS_VALUE boolean,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
)
PARTITION BY (TRN_GETDATA_FORM_FIELD_INFORMATION.DOC_CATEGORY);

COMMENT ON TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION IS 'TRN TABLE HAVING FIELD  INFORMATION';

ALTER TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION ADD CONSTRAINT PK_TRN_GETDATA_FORM_FIELD_INFORMATION PRIMARY KEY (GETDATA_FORM_FIELD_INFORMATION) DISABLED;

CREATE FLEX TABLE CTG_ANALYTICS_STG.STG_RAW_FLEX_GETDATA_UPLOAD
(

);


CREATE TABLE CTG_ANALYTICS.AGG_AUTH_ID_REVENUE
(
    AUTH_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    TOTAL_REVENUE numeric(8,2) NOT NULL,
    TOTAL_FEDERAL_REVENUE numeric(8,2) NOT NULL,
    TOTAL_STATE_REVENUE numeric(8,2) NOT NULL,
    NUM_STATE_ATTACH int NOT NULL,
    TOTAL_MINDBENDER_REVENUE numeric(8,2) NOT NULL,
    NUM_MINDBENDER_ATTACH int NOT NULL,
    TOTAL_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    NUM_AUDIT_DEFENSE_ATTACH int NOT NULL,
    TOTAL_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    NUM_REFUND_TRANSFER_ATTACH int NOT NULL,
    TOTAL_CA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    NUM_CA_AUDIT_DEFENSE_ATTACH int NOT NULL,
    TOTAL_CA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    NUM_CA_REFUND_TRANSFER_ATTACH int NOT NULL,
    TOTAL_NONCA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    NUM_NONCA_REFUND_TRANSFER_ATTACH int NOT NULL,
    TOTAL_NONCA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    NUM_NONCA_AUDIT_DEFENSE_ATTACH int NOT NULL,
    TOTAL_CA_MAX_REVENUE numeric(8,2) NOT NULL,
    NUM_CA_MAX_ATTACH int NOT NULL,
    TOTAL_NON_CA_MAX_REVENUE numeric(8,2) NOT NULL,
    NUM_NON_CA_MAX_ATTACH int NOT NULL,
    TOTAL_MAX_REVENUE numeric(8,2) NOT NULL,
    NUM_MAX_ATTACH int NOT NULL,
    TOTAL_PS_REVENUE numeric(8,2) NOT NULL,
    NUM_PS_ATTACH int NOT NULL,
    TOTAL_QB_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    NUM_QB_SUBSCRIPTION_ATTACH int NOT NULL,
    TOTAL_QBTT_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    NUM_QBTT_SUBSCRIPTION_ATTACH int NOT NULL,
    COMPLETED_SKU_RANKED varchar(75),
    PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED varchar(75),
    FIRST_FEDERAL_COMPLETED_DATE timestamp,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    MIN_FIRST_STATE_ATTACH_TIMESTAMP timestamp,
    MIN_MINDBENDER_ATTACH_TIMESTAMP timestamp,
    MIN_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    MIN_NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    MIN_REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    MIN_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    MIN_NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    MIN_AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    MIN_CA_MAX_ATTACH_TIMESTAMP timestamp,
    MIN_NON_CA_MAX_ATTACH_TIMESTAMP timestamp,
    MIN_MAX_ATTACH_TIMESTAMP timestamp,
    MIN_PS_ATTACH_TIMESTAMP timestamp,
    MIN_QB_SUBSCRIPTION_ATTACH_TIMESTAMP timestamp,
    MIN_QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_REVENUE ADD CONSTRAINT PK_AGG_AUTH_ID_REVENUE PRIMARY KEY (AUTH_ID, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE
(
    CUSTOMER_KEY int NOT NULL,
    TAX_YEAR int NOT NULL,
    AUTH_ID int,
    TOTAL_REVENUE numeric(8,2) NOT NULL,
    FEDERAL_REVENUE numeric(8,2) NOT NULL,
    STATE_REVENUE numeric(8,2) NOT NULL,
    STATE_ATTACH_COUNT int NOT NULL,
    MINDBENDER_REVENUE numeric(8,2) NOT NULL,
    MINDBENDER_FLAG int NOT NULL,
    CA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    CA_REFUND_TRANSFER_FLAG int NOT NULL,
    NON_CA_REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    NON_CA_REFUND_TRANSFER_FLAG int NOT NULL,
    REFUND_TRANSFER_REVENUE numeric(8,2) NOT NULL,
    REFUND_TRANSFER_FLAG int NOT NULL,
    CA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    CA_AUDIT_DEFENSE_FLAG int NOT NULL,
    NON_CA_AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    NON_CA_AUDIT_DEFENSE_FLAG int NOT NULL,
    AUDIT_DEFENSE_REVENUE numeric(8,2) NOT NULL,
    AUDIT_DEFENSE_FLAG int NOT NULL,
    CA_MAX_REVENUE numeric(8,2) NOT NULL,
    CA_MAX_FLAG int NOT NULL,
    NON_CA_MAX_REVENUE numeric(8,2) NOT NULL,
    NON_CA_MAX_FLAG int NOT NULL,
    MAX_REVENUE numeric(8,2) NOT NULL,
    MAX_FLAG int NOT NULL,
    PS_REVENUE numeric(8,2) NOT NULL,
    PS_FLAG int NOT NULL,
    QB_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    QB_SUBSCRIPTION_FLAG int NOT NULL,
    QBTT_SUBSCRIPTION_REVENUE numeric(8,2) NOT NULL,
    QBTT_SUBSCRIPTION_FLAG int NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp,
    FIRST_STATE_ATTACH_TIMESTAMP timestamp,
    MINDBENDER_ATTACH_TIMESTAMP timestamp,
    CA_REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    REFUND_TRANSFER_ATTACH_TIMESTAMP timestamp,
    CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    AUDIT_DEFENSE_ATTACH_TIMESTAMP timestamp,
    CA_MAX_ATTACH_TIMESTAMP timestamp,
    NON_CA_MAX_ATTACH_TIMESTAMP timestamp,
    MAX_REVENUE_ATTACH_TIMESTAMP timestamp,
    PS_ATTACH_TIMESTAMP timestamp,
    QB_SUBSCRIPTION_ATTACH_TIMESTAMP timestamp,
    QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE ADD CONSTRAINT PK_AGG_CUSTOMER_REVENUE PRIMARY KEY (CUSTOMER_KEY, TAX_YEAR) DISABLED;

CREATE TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY
(
    TAX_RETURN_FED_SUMMARY_ID int NOT NULL DEFAULT nextval('CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY_SEQ'),
    CLICKSTREAM_ID int,
    TAX_RETURN_TIMESTAMP timestamp NOT NULL,
    TAX_DATE_ID int NOT NULL,
    TAX_YEAR int NOT NULL,
    AUTH_ID int,
    FILING_STATUS_ID int,
    FORM_ID int,
    RESIDENT_STATE_CODE varchar(2),
    RESIDENT_STATE_ID int,
    PRIMARY_ID_KNOWN_FLAG boolean,
    REFUND_AMOUNT numeric(18,4),
    ANNUAL_GROSS_INCOME numeric(18,4),
    EITC_AMOUNT numeric(18,4),
    PRIMARY_TAXPAYER_AGE int,
    DEPENDENT_COUNT int,
    W2_COUNT int,
    SCHEDULE_A_COUNT int,
    SCHEDULE_B_COUNT int,
    SCHEDULE_C_COUNT int,
    SCHEDULE_D_COUNT int,
    SCHEDULE_E_COUNT int,
    SCHEDULE_F_COUNT int,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT PK_FACT_TAX_RETURN_FED_SUMMARY PRIMARY KEY (TAX_RETURN_FED_SUMMARY_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS.DIM_FILING_STATUS
(
    FILING_STATUS_ID int NOT NULL,
    FILING_STATUS_ABBREVIATION varchar(10) NOT NULL,
    FILING_STATUS_DESCRIPTION varchar(255) NOT NULL,
    BATCH_EVENT_ID int NOT NULL,
    CREATED_TIMESTAMP timestamp NOT NULL DEFAULT statement_timestamp(),
    UPDATED_TIMESTAMP timestamp
);

ALTER TABLE CTG_ANALYTICS.DIM_FILING_STATUS ADD CONSTRAINT PK_DIM_FILING_STATUS PRIMARY KEY (FILING_STATUS_ID) DISABLED;

CREATE TABLE CTG_ANALYTICS_ADMIN.CONFIG_JOAQUIN
(
    ENABLED boolean NOT NULL DEFAULT true,
    MAX_CONCURRENCY int NOT NULL DEFAULT 1
);


CREATE TABLE CTG_ANALYTICS_ADMIN.rk_missing_ttu_cs_20160302_0400
(
    trans_id int
);


ALTER TABLE CTG_ANALYTICS_STG.STG_TRANS_CLICKSTREAM ADD CONSTRAINT FK1_STG_TRANS_CLICKSTREAM FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_STG.STG_TTO_ORDERS ADD CONSTRAINT FK1_STG_TTO_ORDERS FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP ADD CONSTRAINT FK1_CONFIG_PROJECT_MAP FOREIGN KEY (PARENT_PROJECT_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT (PROJECT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP ADD CONSTRAINT FK2_CONFIG_PROJECT_MAP FOREIGN KEY (CHILD_PROJECT_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT (PROJECT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT ADD CONSTRAINT FK1_ETL_BATCH_EVENT FOREIGN KEY (PROJECT_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT (PROJECT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT ADD CONSTRAINT FK2_ETL_BATCH_EVENT FOREIGN KEY (PROJECT_MAP_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP (PROJECT_MAP_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT ADD CONSTRAINT FK3_ETL_BATCH_EVENT FOREIGN KEY (COORDINATOR_INSTANCE_ID) references CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE (COORDINATOR_INSTANCE_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP ADD CONSTRAINT FK1_ETL_BATCH_EVENT_MAP FOREIGN KEY (PROJECT_MAP_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP (PROJECT_MAP_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP ADD CONSTRAINT FK2_ETL_BATCH_EVENT_MAP FOREIGN KEY (WRITE_BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP ADD CONSTRAINT FK3_ETL_BATCH_EVENT_MAP FOREIGN KEY (READ_BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP ADD CONSTRAINT FK4_ETL_BATCH_EVENT_MAP FOREIGN KEY (COORDINATOR_INSTANCE_ID) references CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE (COORDINATOR_INSTANCE_ID);
ALTER TABLE CTG_ANALYTICS_SRC.SOLUTION_VARIABLES ADD CONSTRAINT FK1_SOLUTION_VARIABLES FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_STG.STG_DIM_PRODUCT_ROLLUP ADD CONSTRAINT FK1_STG_DIM_PRODUCT_ROLLUP FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_STG.STG_TTO_AUTH_LOG ADD CONSTRAINT FK1_STG_TTO_AUTH_LOG FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_STG.STG_ETX_ORDERS ADD CONSTRAINT FK1_STG_ETX_ORDERS FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BRIDGE ADD CONSTRAINT FK2_ETL_BRIDGE FOREIGN KEY (PROJECT_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT (PROJECT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BRIDGE ADD CONSTRAINT FK1_ETL_BRIDGE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP ADD CONSTRAINT FK1_ODS_PROJECT_TABLE_MAP FOREIGN KEY (PROJECT_ID) references CTG_ANALYTICS_ADMIN.CONFIG_PROJECT (PROJECT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_FORM_IMPORT ADD CONSTRAINT FK1_TRN_FORM_IMPORT FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TAXORDER_STATUS ADD CONSTRAINT FK1_TAXORDER_STATUS FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN ADD CONSTRAINT FK1_ETL_BATCH_EVENT_RERUN FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION ADD CONSTRAINT FK1_TRN_AUTH_ID_CREATION FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_COST_LINK_CONNECTOR ADD CONSTRAINT FK1_TRN_COST_LINK_CONNECTOR FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.DIM_SOURCE_APPLICATION ADD CONSTRAINT FK2_DIM_SOURCE_APPLICATION FOREIGN KEY (USER_AGENT_ID) references CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET (USER_AGENT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION ADD CONSTRAINT FK4_AGG_SESSION FOREIGN KEY (SESSION_AUTH_TYPE_ID) references CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE (SESSION_AUTH_TYPE_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION ADD CONSTRAINT FK3_AGG_SESSION FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_STATUS ADD CONSTRAINT FK5_FACT_EFILE_STATUS FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK1_FACT_ACCEPTED_REFUND FOREIGN KEY (TAXFILER_ID) references CTG_ANALYTICS.DIM_TAXFILER (TAXFILER_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK2_FACT_ACCEPTED_REFUND FOREIGN KEY (ACCEPTED_TAX_DATE_ID) references CTG_ANALYTICS.DIM_TAX_DATE (TAX_DATE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK3_FACT_ACCEPTED_REFUND FOREIGN KEY (CREDIT_FOR_SALE_PRIORITY_ID) references CTG_ANALYTICS.DIM_PRIORITY_CODE (PRIORITY_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK4_FACT_ACCEPTED_REFUND FOREIGN KEY (FILING_TYPE_ID) references CTG_ANALYTICS.DIM_FILING_TYPE (FILING_TYPE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK5_FACT_ACCEPTED_REFUND FOREIGN KEY (PRODUCT_ALIAS_ID) references CTG_ANALYTICS.DIM_PRODUCT_ALIAS (PRODUCT_ALIAS_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK6_FACT_ACCEPTED_REFUND FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK7_FACT_ACCEPTED_REFUND FOREIGN KEY (EFILE_PAYMENT_METHOD_ID) references CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD (EFILE_PAYMENT_METHOD_ID);
ALTER TABLE CTG_ANALYTICS.FACT_ACCEPTED_REFUND ADD CONSTRAINT FK8_FACT_ACCEPTED_REFUND FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_TAXML ADD CONSTRAINT FK1_TRN_TAXML FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE ADD CONSTRAINT FK1_TRN_OCR_PERFORMANCE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP ADD CONSTRAINT FK1_TRN_CUSTOMER_STATE_ZIP FOREIGN KEY (CUSTOMER_KEY) references CTG_ANALYTICS_SRC_20160705.DIM_CUSTOMER (CUSTOMER_KEY);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP ADD CONSTRAINT FK2_TRN_CUSTOMER_STATE_ZIP FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_AUTH_DATA ADD CONSTRAINT FK1_TRN_AUTH_DATA FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_SESSION_END ADD CONSTRAINT FK1_TRN_SESSION_END FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_SESSION_START ADD CONSTRAINT FK1_TRN_SESSION_START FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_TAX_ORDER ADD CONSTRAINT FK1_TRN_TAX_ORDER FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT FK2_FACT_STATE_TAX_RETURN FOREIGN KEY (CLICKSTREAM_ID) references CTG_ANALYTICS.FACT_CLICKSTREAM (CLICKSTREAM_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT FK4_FACT_STATE_TAX_RETURN FOREIGN KEY (TAX_RETURN_FED_SUMMARY_ID) references CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY (TAX_RETURN_FED_SUMMARY_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT FK5_FACT_STATE_TAX_RETURN FOREIGN KEY (STATE_ID) references CTG_ANALYTICS.DIM_STATE (STATE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT FK3_FACT_STATE_TAX_RETURN FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY ADD CONSTRAINT FK1_FACT_STATE_TAX_RETURN FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST ADD CONSTRAINT FK1_SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST ADD CONSTRAINT FK2_SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST ADD CONSTRAINT FK3_SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST FOREIGN KEY (TAX_RETURN_FED_SUMMARY_ID) references CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY (TAX_RETURN_FED_SUMMARY_ID);
ALTER TABLE CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST ADD CONSTRAINT FK4_SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST FOREIGN KEY (LAST_TAX_RETURN_TAX_DATE_ID) references CTG_ANALYTICS.DIM_TAX_DATE (TAX_DATE_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND ADD CONSTRAINT FK1_AGG_AUTH_ID_ACCEPTED_REFUND FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND ADD CONSTRAINT FK2_AGG_AUTH_ID_ACCEPTED_REFUND FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND ADD CONSTRAINT FK5_AGG_AUTH_ID_ACCEPTED_REFUND FOREIGN KEY (RANKED_FED_EFILE_PAYMENT_METHOD_ID) references CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD (EFILE_PAYMENT_METHOD_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND ADD CONSTRAINT FK6_AGG_AUTH_ID_ACCEPTED_REFUND FOREIGN KEY (RANKED_STATE_EFILE_PAYMENT_METHOD_ID) references CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD (EFILE_PAYMENT_METHOD_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT FK6_AGG_SESSION_PAGE_GROUP FOREIGN KEY (SESSION_ID) references CTG_ANALYTICS.AGG_SESSION (SESSION_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT FK2_AGG_SESSION_PAGE_GROUP FOREIGN KEY (VISITOR_OMT_ID) references CTG_ANALYTICS.DIM_VISITOR_OMT (VISITOR_OMT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT FK3_AGG_SESSION_PAGE_GROUP FOREIGN KEY (FIRST_PAGE_URL_ID) references CTG_ANALYTICS.DIM_PAGE_URL (PAGE_URL_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT FK5_AGG_SESSION_PAGE_GROUP FOREIGN KEY (FIRST_PAGE_TAX_DATE_ID) references CTG_ANALYTICS.DIM_TAX_DATE (TAX_DATE_ID);
ALTER TABLE CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP ADD CONSTRAINT FK1_AGG_SESSION_PAGE_GROUP FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE ADD CONSTRAINT FK1_DIM_SESSION_AUTH_TYPE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE ADD CONSTRAINT FK1_DIM_EFILE_REJECT_CODE FOREIGN KEY (FILING_TYPE_ID) references CTG_ANALYTICS.DIM_FILING_TYPE (FILING_TYPE_ID);
ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_CODE ADD CONSTRAINT FK2_DIM_EFILE_REJECT_CODE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK1_FACT_EFILE_REJECT_ERROR FOREIGN KEY (CHANGE_ID, TAX_YEAR) references CTG_ANALYTICS.FACT_EFILE_STATUS (CHANGE_ID, TAX_YEAR);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK2_FACT_EFILE_REJECT_ERROR FOREIGN KEY (TAXFILER_ID) references CTG_ANALYTICS.DIM_TAXFILER (TAXFILER_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK3_FACT_EFILE_REJECT_ERROR FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK4_FACT_EFILE_REJECT_ERROR FOREIGN KEY (FILING_TYPE_ID) references CTG_ANALYTICS.DIM_FILING_TYPE (FILING_TYPE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK5_FACT_EFILE_REJECT_ERROR FOREIGN KEY (EFILE_REJECT_CODE_ID) references CTG_ANALYTICS.DIM_EFILE_REJECT_CODE (EFILE_REJECT_CODE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK6_FACT_EFILE_REJECT_ERROR FOREIGN KEY (EFILE_REJECT_ERROR_FIELD_KEYWORD_ID) references CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD (EFILE_REJECT_ERROR_FIELD_KEYWORD_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK7_FACT_EFILE_REJECT_ERROR FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR ADD CONSTRAINT FK8_FACT_EFILE_REJECT_ERROR FOREIGN KEY (EFILE_STATUS_TAX_DATE_ID) references CTG_ANALYTICS.DIM_TAX_DATE (TAX_DATE_ID);
ALTER TABLE CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD ADD CONSTRAINT FK1_DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION ADD CONSTRAINT FK1_TRN_GETDATA_FORM_GENERIC_INFORMATION FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION ADD CONSTRAINT FK1_TRN_GETDATA_FORM_FIELD_INFORMATION FOREIGN KEY (GETDATA_FORM_GENERIC_INFORMATION_ID) references CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION (GETDATA_FORM_GENERIC_INFORMATION_ID);
ALTER TABLE CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION ADD CONSTRAINT FK2_TRN_GETDATA_FORM_FIELD_INFORMATION FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_REVENUE ADD CONSTRAINT FK1_AGG_AUTH_ID_REVENUE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN_PERF_TEST.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_AUTH_ID_REVENUE ADD CONSTRAINT FK2_AGG_AUTH_ID_REVENUE FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE ADD CONSTRAINT FK1_AGG_CUSTOMER_REVENUE FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN_PERF_TEST.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE ADD CONSTRAINT FK3_AGG_CUSTOMER_REVENUE FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.AGG_CUSTOMER_REVENUE ADD CONSTRAINT FK2_AGG_CUSTOMER_REVENUE FOREIGN KEY (CUSTOMER_KEY) references CTG_ANALYTICS_SRC.DIM_CUSTOMER (CUSTOMER_KEY);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK2_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (CLICKSTREAM_ID) references CTG_ANALYTICS.FACT_CLICKSTREAM (CLICKSTREAM_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK4_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (FILING_STATUS_ID) references CTG_ANALYTICS.DIM_FILING_STATUS (FILING_STATUS_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK5_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (FORM_ID) references CTG_ANALYTICS.DIM_FORM (FORM_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK6_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (RESIDENT_STATE_ID) references CTG_ANALYTICS.DIM_STATE (STATE_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK3_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (AUTH_ID) references CTG_ANALYTICS.DIM_AUTH (AUTH_ID);
ALTER TABLE CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY ADD CONSTRAINT FK1_FACT_FEDERAL_TAX_RETURN FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN_PERF_TEST.ETL_BATCH_EVENT (BATCH_EVENT_ID);
ALTER TABLE CTG_ANALYTICS.DIM_FILING_STATUS ADD CONSTRAINT FK1_DIM_FILING_STATUS FOREIGN KEY (BATCH_EVENT_ID) references CTG_ANALYTICS_ADMIN_PERF_TEST.ETL_BATCH_EVENT (BATCH_EVENT_ID);

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_TIME_BY_DAY /*+createtype(P)*/
(
 DIM_TIME_BY_DAY_KEY,
 CLNDR_544_WEEK_END_DT,
 CLNDR_544_WEEK_NBR,
 CLNDR_544_WEEK_START_DT,
 CLNDR_WEEK_END_DT,
 CLNDR_WEEK_START_DT,
 CLNDR_WEEK_DURTN_CD,
 FISCAL_MONTH_NBR,
 FISCAL_YEAR_NBR,
 FULL_DATE,
 TY_DAY,
 TY_SEASON_FLAG,
 TY_WEEK,
 TY_YEAR,
 WKND_IND,
 AUDIT_INS_KEY,
 AUDIT_INS_TS,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TIME_BY_DAY.DIM_TIME_BY_DAY_KEY,
        DIM_TIME_BY_DAY.CLNDR_544_WEEK_END_DT,
        DIM_TIME_BY_DAY.CLNDR_544_WEEK_NBR,
        DIM_TIME_BY_DAY.CLNDR_544_WEEK_START_DT,
        DIM_TIME_BY_DAY.CLNDR_WEEK_END_DT,
        DIM_TIME_BY_DAY.CLNDR_WEEK_START_DT,
        DIM_TIME_BY_DAY.CLNDR_WEEK_DURTN_CD,
        DIM_TIME_BY_DAY.FISCAL_MONTH_NBR,
        DIM_TIME_BY_DAY.FISCAL_YEAR_NBR,
        DIM_TIME_BY_DAY.FULL_DATE,
        DIM_TIME_BY_DAY.TY_DAY,
        DIM_TIME_BY_DAY.TY_SEASON_FLAG,
        DIM_TIME_BY_DAY.TY_WEEK,
        DIM_TIME_BY_DAY.TY_YEAR,
        DIM_TIME_BY_DAY.WKND_IND,
        DIM_TIME_BY_DAY.AUDIT_INS_KEY,
        DIM_TIME_BY_DAY.AUDIT_INS_TS,
        DIM_TIME_BY_DAY.BATCH_EVENT_ID,
        DIM_TIME_BY_DAY.CREATED_TIMESTAMP,
        DIM_TIME_BY_DAY.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.DIM_TIME_BY_DAY
 ORDER BY DIM_TIME_BY_DAY.DIM_TIME_BY_DAY_KEY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TAX_HOURS /*+createtype(P)*/
(
 TAX_HOUR
)
AS
 SELECT TAX_HOURS.TAX_HOUR
 FROM CTG_ANALYTICS_SRC.TAX_HOURS
 ORDER BY TAX_HOURS.TAX_HOUR
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TRANS_CLICKSTREAM /*+createtype(P)*/
(
 BATCH_EVENT_ID,
 TRANS_ID,
 VISITOR_ID,
 AUTH_ID,
 AUTH_ID_SOURCE,
 PAGE_ID,
 PAGE_URL_ID,
 REFERRER_ID,
 USER_AGENT_ID,
 UA_BROWSER_ID,
 UA_OPERATING_SYSTEM_ID,
 TEST_ID,
 GEO_ID,
 BROWSER_ID,
 COLOR_DEPTH_ID,
 CONNECTION_TYPE_ID,
 LANGUAGE_ID,
 JAVASCRIPT_VERSION_ID,
 OPERATING_SYSTEM_ID,
 RESOLUTION_ID,
 DIM_TIME_BY_DAY_KEY,
 CAMPAIGN_ID,
 SEARCH_ENGINE_ID,
 COUNTRY_ID,
 HIT_TIMESTAMP,
 TY_WEEK,
 TY_YEAR,
 HIT_TIME_GMT,
 DATE_TIME,
 SERVICE,
 ACCEPT_LANGUAGE,
 VISID,
 USERID,
 CID,
 EVENT_LIST,
 HOMEPAGE,
 IP,
 PAGE_EVENT,
 PAGE_EVENT_VAR1,
 PAGE_EVENT_VAR2,
 PAGE_TYPE,
 PAGE_URL,
 PAGENAME,
 DURATION_ON_PAGE,
 PRODUCT_LIST,
 USER_SERVER,
 CHANNEL,
 PROP01,
 PROP02,
 PROP03,
 PROP04,
 PROP05,
 PROP06,
 PROP07,
 PROP08,
 PROP09,
 PROP10,
 PROP11,
 PROP12,
 PROP13,
 PROP14,
 PROP15,
 PROP16,
 PROP17,
 PROP18,
 PROP19,
 PROP20,
 PROP21,
 PROP22,
 PROP23,
 PROP24,
 PROP25,
 PROP26,
 PROP27,
 PROP28,
 PROP29,
 PROP30,
 PROP31,
 PROP32,
 PROP33,
 PROP34,
 PROP35,
 PROP36,
 PROP37,
 PROP38,
 PROP39,
 PROP40,
 PROP41,
 PROP42,
 PROP43,
 PROP44,
 PROP45,
 PROP46,
 PROP47,
 PROP48,
 PROP49,
 PROP50,
 PURCHASEID,
 REFERRER,
 STATE,
 USER_AGENT,
 ZIP,
 EXCLUDE_HIT,
 HIER1,
 HIER2,
 HIER3,
 HIER4,
 HIER5,
 POST_BROWSER_HEIGHT,
 POST_BROWSER_WIDTH,
 POST_COOKIES,
 POST_JAVA_ENABLED,
 POST_PERSISTENT_COOKIE,
 DOMAIN,
 POST_T_TIME_INFO,
 PLUGINS,
 LAST_HIT_TIME_GMT,
 FIRST_HIT_TIME_GMT,
 VISIT_START_TIME_GMT,
 LAST_PURCHASE_TIME_GMT,
 LAST_PURCHASE_NUM,
 FIRST_HIT_PAGE_URL,
 FIRST_HIT_PAGENAME,
 VISIT_START_PAGE_URL,
 VISIT_START_PAGENAME,
 FIRST_HIT_REFERRER,
 VISIT_REFERRER,
 VISIT_SEARCH_ENGINE,
 VISIT_NUM,
 VISIT_PAGE_NUM,
 PREV_PAGE,
 GEO_CITY,
 GEO_COUNTRY,
 GEO_REGION,
 DUPLICATE_PURCHASE,
 NEW_VISIT,
 DAILY_VISITOR,
 HOURLY_VISITOR,
 MONTHLY_VISITOR,
 YEARLY_VISITOR,
 POST_CAMPAIGN,
 EVAR01,
 EVAR02,
 EVAR03,
 EVAR04,
 EVAR05,
 EVAR06,
 EVAR07,
 EVAR08,
 EVAR09,
 EVAR10,
 EVAR11,
 EVAR12,
 EVAR13,
 EVAR14,
 EVAR15,
 EVAR16,
 EVAR17,
 EVAR18,
 EVAR19,
 EVAR20,
 EVAR21,
 EVAR22,
 EVAR23,
 EVAR24,
 EVAR25,
 EVAR26,
 EVAR27,
 EVAR28,
 EVAR29,
 EVAR30,
 EVAR31,
 EVAR32,
 EVAR33,
 EVAR34,
 EVAR35,
 EVAR36,
 EVAR37,
 EVAR38,
 EVAR39,
 EVAR40,
 EVAR41,
 EVAR42,
 EVAR43,
 EVAR44,
 EVAR45,
 EVAR46,
 EVAR47,
 EVAR48,
 EVAR49,
 EVAR50,
 POST_EVAR01,
 POST_EVAR02,
 POST_EVAR03,
 POST_EVAR04,
 POST_EVAR05,
 POST_EVAR06,
 POST_EVAR07,
 POST_EVAR08,
 POST_EVAR09,
 POST_EVAR10,
 POST_EVAR11,
 POST_EVAR12,
 POST_EVAR13,
 POST_EVAR14,
 POST_EVAR15,
 POST_EVAR16,
 POST_EVAR17,
 POST_EVAR18,
 POST_EVAR19,
 POST_EVAR20,
 POST_EVAR21,
 POST_EVAR22,
 POST_EVAR23,
 POST_EVAR24,
 POST_EVAR25,
 POST_EVAR26,
 POST_EVAR27,
 POST_EVAR28,
 POST_EVAR29,
 POST_EVAR30,
 POST_EVAR31,
 POST_EVAR32,
 POST_EVAR33,
 POST_EVAR34,
 POST_EVAR35,
 POST_EVAR36,
 POST_EVAR37,
 POST_EVAR38,
 POST_EVAR39,
 POST_EVAR40,
 POST_EVAR41,
 POST_EVAR42,
 POST_EVAR43,
 POST_EVAR44,
 POST_EVAR45,
 POST_EVAR46,
 POST_EVAR47,
 POST_EVAR48,
 POST_EVAR49,
 POST_EVAR50,
 CLICK_ACTION,
 CLICK_ACTION_TYPE,
 CLICK_CONTEXT,
 CLICK_CONTEXT_TYPE,
 CLICK_SOURCEID,
 CLICK_TAG,
 POST_KEYWORDS,
 LOAD_DATE,
 LOAD_HOUR,
 FORM_ID_PARSED,
 TAX_DATE_ID,
 PAGE_URL_PARSED,
 REFERRER_URL_PARSED,
 GEO_STATE,
 GEO_DMA,
 TAXABLE_STATE_FLAG,
 PRIOR_YEAR_TAXPREP_METHOD,
 PRIOR_YEAR_TAXPREP_METHOD_SOURCE
)
AS
 SELECT STG_TRANS_CLICKSTREAM.BATCH_EVENT_ID,
        STG_TRANS_CLICKSTREAM.TRANS_ID,
        STG_TRANS_CLICKSTREAM.VISITOR_ID,
        STG_TRANS_CLICKSTREAM.AUTH_ID,
        STG_TRANS_CLICKSTREAM.AUTH_ID_SOURCE,
        STG_TRANS_CLICKSTREAM.PAGE_ID,
        STG_TRANS_CLICKSTREAM.PAGE_URL_ID,
        STG_TRANS_CLICKSTREAM.REFERRER_ID,
        STG_TRANS_CLICKSTREAM.USER_AGENT_ID,
        STG_TRANS_CLICKSTREAM.UA_BROWSER_ID,
        STG_TRANS_CLICKSTREAM.UA_OPERATING_SYSTEM_ID,
        STG_TRANS_CLICKSTREAM.TEST_ID,
        STG_TRANS_CLICKSTREAM.GEO_ID,
        STG_TRANS_CLICKSTREAM.BROWSER_ID,
        STG_TRANS_CLICKSTREAM.COLOR_DEPTH_ID,
        STG_TRANS_CLICKSTREAM.CONNECTION_TYPE_ID,
        STG_TRANS_CLICKSTREAM.LANGUAGE_ID,
        STG_TRANS_CLICKSTREAM.JAVASCRIPT_VERSION_ID,
        STG_TRANS_CLICKSTREAM.OPERATING_SYSTEM_ID,
        STG_TRANS_CLICKSTREAM.RESOLUTION_ID,
        STG_TRANS_CLICKSTREAM.DIM_TIME_BY_DAY_KEY,
        STG_TRANS_CLICKSTREAM.CAMPAIGN_ID,
        STG_TRANS_CLICKSTREAM.SEARCH_ENGINE_ID,
        STG_TRANS_CLICKSTREAM.COUNTRY_ID,
        STG_TRANS_CLICKSTREAM.HIT_TIMESTAMP,
        STG_TRANS_CLICKSTREAM.TY_WEEK,
        STG_TRANS_CLICKSTREAM.TY_YEAR,
        STG_TRANS_CLICKSTREAM.HIT_TIME_GMT,
        STG_TRANS_CLICKSTREAM.DATE_TIME,
        STG_TRANS_CLICKSTREAM.SERVICE,
        STG_TRANS_CLICKSTREAM.ACCEPT_LANGUAGE,
        STG_TRANS_CLICKSTREAM.VISID,
        STG_TRANS_CLICKSTREAM.USERID,
        STG_TRANS_CLICKSTREAM.CID,
        STG_TRANS_CLICKSTREAM.EVENT_LIST,
        STG_TRANS_CLICKSTREAM.HOMEPAGE,
        STG_TRANS_CLICKSTREAM.IP,
        STG_TRANS_CLICKSTREAM.PAGE_EVENT,
        STG_TRANS_CLICKSTREAM.PAGE_EVENT_VAR1,
        STG_TRANS_CLICKSTREAM.PAGE_EVENT_VAR2,
        STG_TRANS_CLICKSTREAM.PAGE_TYPE,
        STG_TRANS_CLICKSTREAM.PAGE_URL,
        STG_TRANS_CLICKSTREAM.PAGENAME,
        STG_TRANS_CLICKSTREAM.DURATION_ON_PAGE,
        STG_TRANS_CLICKSTREAM.PRODUCT_LIST,
        STG_TRANS_CLICKSTREAM.USER_SERVER,
        STG_TRANS_CLICKSTREAM.CHANNEL,
        STG_TRANS_CLICKSTREAM.PROP01,
        STG_TRANS_CLICKSTREAM.PROP02,
        STG_TRANS_CLICKSTREAM.PROP03,
        STG_TRANS_CLICKSTREAM.PROP04,
        STG_TRANS_CLICKSTREAM.PROP05,
        STG_TRANS_CLICKSTREAM.PROP06,
        STG_TRANS_CLICKSTREAM.PROP07,
        STG_TRANS_CLICKSTREAM.PROP08,
        STG_TRANS_CLICKSTREAM.PROP09,
        STG_TRANS_CLICKSTREAM.PROP10,
        STG_TRANS_CLICKSTREAM.PROP11,
        STG_TRANS_CLICKSTREAM.PROP12,
        STG_TRANS_CLICKSTREAM.PROP13,
        STG_TRANS_CLICKSTREAM.PROP14,
        STG_TRANS_CLICKSTREAM.PROP15,
        STG_TRANS_CLICKSTREAM.PROP16,
        STG_TRANS_CLICKSTREAM.PROP17,
        STG_TRANS_CLICKSTREAM.PROP18,
        STG_TRANS_CLICKSTREAM.PROP19,
        STG_TRANS_CLICKSTREAM.PROP20,
        STG_TRANS_CLICKSTREAM.PROP21,
        STG_TRANS_CLICKSTREAM.PROP22,
        STG_TRANS_CLICKSTREAM.PROP23,
        STG_TRANS_CLICKSTREAM.PROP24,
        STG_TRANS_CLICKSTREAM.PROP25,
        STG_TRANS_CLICKSTREAM.PROP26,
        STG_TRANS_CLICKSTREAM.PROP27,
        STG_TRANS_CLICKSTREAM.PROP28,
        STG_TRANS_CLICKSTREAM.PROP29,
        STG_TRANS_CLICKSTREAM.PROP30,
        STG_TRANS_CLICKSTREAM.PROP31,
        STG_TRANS_CLICKSTREAM.PROP32,
        STG_TRANS_CLICKSTREAM.PROP33,
        STG_TRANS_CLICKSTREAM.PROP34,
        STG_TRANS_CLICKSTREAM.PROP35,
        STG_TRANS_CLICKSTREAM.PROP36,
        STG_TRANS_CLICKSTREAM.PROP37,
        STG_TRANS_CLICKSTREAM.PROP38,
        STG_TRANS_CLICKSTREAM.PROP39,
        STG_TRANS_CLICKSTREAM.PROP40,
        STG_TRANS_CLICKSTREAM.PROP41,
        STG_TRANS_CLICKSTREAM.PROP42,
        STG_TRANS_CLICKSTREAM.PROP43,
        STG_TRANS_CLICKSTREAM.PROP44,
        STG_TRANS_CLICKSTREAM.PROP45,
        STG_TRANS_CLICKSTREAM.PROP46,
        STG_TRANS_CLICKSTREAM.PROP47,
        STG_TRANS_CLICKSTREAM.PROP48,
        STG_TRANS_CLICKSTREAM.PROP49,
        STG_TRANS_CLICKSTREAM.PROP50,
        STG_TRANS_CLICKSTREAM.PURCHASEID,
        STG_TRANS_CLICKSTREAM.REFERRER,
        STG_TRANS_CLICKSTREAM.STATE,
        STG_TRANS_CLICKSTREAM.USER_AGENT,
        STG_TRANS_CLICKSTREAM.ZIP,
        STG_TRANS_CLICKSTREAM.EXCLUDE_HIT,
        STG_TRANS_CLICKSTREAM.HIER1,
        STG_TRANS_CLICKSTREAM.HIER2,
        STG_TRANS_CLICKSTREAM.HIER3,
        STG_TRANS_CLICKSTREAM.HIER4,
        STG_TRANS_CLICKSTREAM.HIER5,
        STG_TRANS_CLICKSTREAM.POST_BROWSER_HEIGHT,
        STG_TRANS_CLICKSTREAM.POST_BROWSER_WIDTH,
        STG_TRANS_CLICKSTREAM.POST_COOKIES,
        STG_TRANS_CLICKSTREAM.POST_JAVA_ENABLED,
        STG_TRANS_CLICKSTREAM.POST_PERSISTENT_COOKIE,
        STG_TRANS_CLICKSTREAM.DOMAIN,
        STG_TRANS_CLICKSTREAM.POST_T_TIME_INFO,
        STG_TRANS_CLICKSTREAM.PLUGINS,
        STG_TRANS_CLICKSTREAM.LAST_HIT_TIME_GMT,
        STG_TRANS_CLICKSTREAM.FIRST_HIT_TIME_GMT,
        STG_TRANS_CLICKSTREAM.VISIT_START_TIME_GMT,
        STG_TRANS_CLICKSTREAM.LAST_PURCHASE_TIME_GMT,
        STG_TRANS_CLICKSTREAM.LAST_PURCHASE_NUM,
        STG_TRANS_CLICKSTREAM.FIRST_HIT_PAGE_URL,
        STG_TRANS_CLICKSTREAM.FIRST_HIT_PAGENAME,
        STG_TRANS_CLICKSTREAM.VISIT_START_PAGE_URL,
        STG_TRANS_CLICKSTREAM.VISIT_START_PAGENAME,
        STG_TRANS_CLICKSTREAM.FIRST_HIT_REFERRER,
        STG_TRANS_CLICKSTREAM.VISIT_REFERRER,
        STG_TRANS_CLICKSTREAM.VISIT_SEARCH_ENGINE,
        STG_TRANS_CLICKSTREAM.VISIT_NUM,
        STG_TRANS_CLICKSTREAM.VISIT_PAGE_NUM,
        STG_TRANS_CLICKSTREAM.PREV_PAGE,
        STG_TRANS_CLICKSTREAM.GEO_CITY,
        STG_TRANS_CLICKSTREAM.GEO_COUNTRY,
        STG_TRANS_CLICKSTREAM.GEO_REGION,
        STG_TRANS_CLICKSTREAM.DUPLICATE_PURCHASE,
        STG_TRANS_CLICKSTREAM.NEW_VISIT,
        STG_TRANS_CLICKSTREAM.DAILY_VISITOR,
        STG_TRANS_CLICKSTREAM.HOURLY_VISITOR,
        STG_TRANS_CLICKSTREAM.MONTHLY_VISITOR,
        STG_TRANS_CLICKSTREAM.YEARLY_VISITOR,
        STG_TRANS_CLICKSTREAM.POST_CAMPAIGN,
        STG_TRANS_CLICKSTREAM.EVAR01,
        STG_TRANS_CLICKSTREAM.EVAR02,
        STG_TRANS_CLICKSTREAM.EVAR03,
        STG_TRANS_CLICKSTREAM.EVAR04,
        STG_TRANS_CLICKSTREAM.EVAR05,
        STG_TRANS_CLICKSTREAM.EVAR06,
        STG_TRANS_CLICKSTREAM.EVAR07,
        STG_TRANS_CLICKSTREAM.EVAR08,
        STG_TRANS_CLICKSTREAM.EVAR09,
        STG_TRANS_CLICKSTREAM.EVAR10,
        STG_TRANS_CLICKSTREAM.EVAR11,
        STG_TRANS_CLICKSTREAM.EVAR12,
        STG_TRANS_CLICKSTREAM.EVAR13,
        STG_TRANS_CLICKSTREAM.EVAR14,
        STG_TRANS_CLICKSTREAM.EVAR15,
        STG_TRANS_CLICKSTREAM.EVAR16,
        STG_TRANS_CLICKSTREAM.EVAR17,
        STG_TRANS_CLICKSTREAM.EVAR18,
        STG_TRANS_CLICKSTREAM.EVAR19,
        STG_TRANS_CLICKSTREAM.EVAR20,
        STG_TRANS_CLICKSTREAM.EVAR21,
        STG_TRANS_CLICKSTREAM.EVAR22,
        STG_TRANS_CLICKSTREAM.EVAR23,
        STG_TRANS_CLICKSTREAM.EVAR24,
        STG_TRANS_CLICKSTREAM.EVAR25,
        STG_TRANS_CLICKSTREAM.EVAR26,
        STG_TRANS_CLICKSTREAM.EVAR27,
        STG_TRANS_CLICKSTREAM.EVAR28,
        STG_TRANS_CLICKSTREAM.EVAR29,
        STG_TRANS_CLICKSTREAM.EVAR30,
        STG_TRANS_CLICKSTREAM.EVAR31,
        STG_TRANS_CLICKSTREAM.EVAR32,
        STG_TRANS_CLICKSTREAM.EVAR33,
        STG_TRANS_CLICKSTREAM.EVAR34,
        STG_TRANS_CLICKSTREAM.EVAR35,
        STG_TRANS_CLICKSTREAM.EVAR36,
        STG_TRANS_CLICKSTREAM.EVAR37,
        STG_TRANS_CLICKSTREAM.EVAR38,
        STG_TRANS_CLICKSTREAM.EVAR39,
        STG_TRANS_CLICKSTREAM.EVAR40,
        STG_TRANS_CLICKSTREAM.EVAR41,
        STG_TRANS_CLICKSTREAM.EVAR42,
        STG_TRANS_CLICKSTREAM.EVAR43,
        STG_TRANS_CLICKSTREAM.EVAR44,
        STG_TRANS_CLICKSTREAM.EVAR45,
        STG_TRANS_CLICKSTREAM.EVAR46,
        STG_TRANS_CLICKSTREAM.EVAR47,
        STG_TRANS_CLICKSTREAM.EVAR48,
        STG_TRANS_CLICKSTREAM.EVAR49,
        STG_TRANS_CLICKSTREAM.EVAR50,
        STG_TRANS_CLICKSTREAM.POST_EVAR01,
        STG_TRANS_CLICKSTREAM.POST_EVAR02,
        STG_TRANS_CLICKSTREAM.POST_EVAR03,
        STG_TRANS_CLICKSTREAM.POST_EVAR04,
        STG_TRANS_CLICKSTREAM.POST_EVAR05,
        STG_TRANS_CLICKSTREAM.POST_EVAR06,
        STG_TRANS_CLICKSTREAM.POST_EVAR07,
        STG_TRANS_CLICKSTREAM.POST_EVAR08,
        STG_TRANS_CLICKSTREAM.POST_EVAR09,
        STG_TRANS_CLICKSTREAM.POST_EVAR10,
        STG_TRANS_CLICKSTREAM.POST_EVAR11,
        STG_TRANS_CLICKSTREAM.POST_EVAR12,
        STG_TRANS_CLICKSTREAM.POST_EVAR13,
        STG_TRANS_CLICKSTREAM.POST_EVAR14,
        STG_TRANS_CLICKSTREAM.POST_EVAR15,
        STG_TRANS_CLICKSTREAM.POST_EVAR16,
        STG_TRANS_CLICKSTREAM.POST_EVAR17,
        STG_TRANS_CLICKSTREAM.POST_EVAR18,
        STG_TRANS_CLICKSTREAM.POST_EVAR19,
        STG_TRANS_CLICKSTREAM.POST_EVAR20,
        STG_TRANS_CLICKSTREAM.POST_EVAR21,
        STG_TRANS_CLICKSTREAM.POST_EVAR22,
        STG_TRANS_CLICKSTREAM.POST_EVAR23,
        STG_TRANS_CLICKSTREAM.POST_EVAR24,
        STG_TRANS_CLICKSTREAM.POST_EVAR25,
        STG_TRANS_CLICKSTREAM.POST_EVAR26,
        STG_TRANS_CLICKSTREAM.POST_EVAR27,
        STG_TRANS_CLICKSTREAM.POST_EVAR28,
        STG_TRANS_CLICKSTREAM.POST_EVAR29,
        STG_TRANS_CLICKSTREAM.POST_EVAR30,
        STG_TRANS_CLICKSTREAM.POST_EVAR31,
        STG_TRANS_CLICKSTREAM.POST_EVAR32,
        STG_TRANS_CLICKSTREAM.POST_EVAR33,
        STG_TRANS_CLICKSTREAM.POST_EVAR34,
        STG_TRANS_CLICKSTREAM.POST_EVAR35,
        STG_TRANS_CLICKSTREAM.POST_EVAR36,
        STG_TRANS_CLICKSTREAM.POST_EVAR37,
        STG_TRANS_CLICKSTREAM.POST_EVAR38,
        STG_TRANS_CLICKSTREAM.POST_EVAR39,
        STG_TRANS_CLICKSTREAM.POST_EVAR40,
        STG_TRANS_CLICKSTREAM.POST_EVAR41,
        STG_TRANS_CLICKSTREAM.POST_EVAR42,
        STG_TRANS_CLICKSTREAM.POST_EVAR43,
        STG_TRANS_CLICKSTREAM.POST_EVAR44,
        STG_TRANS_CLICKSTREAM.POST_EVAR45,
        STG_TRANS_CLICKSTREAM.POST_EVAR46,
        STG_TRANS_CLICKSTREAM.POST_EVAR47,
        STG_TRANS_CLICKSTREAM.POST_EVAR48,
        STG_TRANS_CLICKSTREAM.POST_EVAR49,
        STG_TRANS_CLICKSTREAM.POST_EVAR50,
        STG_TRANS_CLICKSTREAM.CLICK_ACTION,
        STG_TRANS_CLICKSTREAM.CLICK_ACTION_TYPE,
        STG_TRANS_CLICKSTREAM.CLICK_CONTEXT,
        STG_TRANS_CLICKSTREAM.CLICK_CONTEXT_TYPE,
        STG_TRANS_CLICKSTREAM.CLICK_SOURCEID,
        STG_TRANS_CLICKSTREAM.CLICK_TAG,
        STG_TRANS_CLICKSTREAM.POST_KEYWORDS,
        STG_TRANS_CLICKSTREAM.LOAD_DATE,
        STG_TRANS_CLICKSTREAM.LOAD_HOUR,
        STG_TRANS_CLICKSTREAM.FORM_ID_PARSED,
        STG_TRANS_CLICKSTREAM.TAX_DATE_ID,
        STG_TRANS_CLICKSTREAM.PAGE_URL_PARSED,
        STG_TRANS_CLICKSTREAM.REFERRER_URL_PARSED,
        STG_TRANS_CLICKSTREAM.GEO_STATE,
        STG_TRANS_CLICKSTREAM.GEO_DMA,
        STG_TRANS_CLICKSTREAM.TAXABLE_STATE_FLAG,
        STG_TRANS_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD,
        STG_TRANS_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_SOURCE
 FROM CTG_ANALYTICS_STG.STG_TRANS_CLICKSTREAM
 ORDER BY STG_TRANS_CLICKSTREAM.TRANS_ID
SEGMENTED BY hash(STG_TRANS_CLICKSTREAM.TRANS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_DIM_MARKETING_FORECAST /*+createtype(P)*/
(
 FCST_DATE,
 CORE_FLAG,
 MOBILE_APP_FLAG,
 FCST_TYPE,
 FCST_CATEGORY,
 TRAFFIC,
 NEAUTHS,
 UNITS,
 FCST_VERSION,
 TRAFFIC_MULTIPLIER,
 NEAUTHS_MULTIPLIER,
 UNITS_MULTIPLIER
)
AS
 SELECT STG_DIM_MARKETING_FORECAST.FCST_DATE,
        STG_DIM_MARKETING_FORECAST.CORE_FLAG,
        STG_DIM_MARKETING_FORECAST.MOBILE_APP_FLAG,
        STG_DIM_MARKETING_FORECAST.FCST_TYPE,
        STG_DIM_MARKETING_FORECAST.FCST_CATEGORY,
        STG_DIM_MARKETING_FORECAST.TRAFFIC,
        STG_DIM_MARKETING_FORECAST.NEAUTHS,
        STG_DIM_MARKETING_FORECAST.UNITS,
        STG_DIM_MARKETING_FORECAST.FCST_VERSION,
        STG_DIM_MARKETING_FORECAST.TRAFFIC_MULTIPLIER,
        STG_DIM_MARKETING_FORECAST.NEAUTHS_MULTIPLIER,
        STG_DIM_MARKETING_FORECAST.UNITS_MULTIPLIER
 FROM CTG_ANALYTICS_STG.STG_DIM_MARKETING_FORECAST
 ORDER BY STG_DIM_MARKETING_FORECAST.FCST_DATE,
          STG_DIM_MARKETING_FORECAST.CORE_FLAG,
          STG_DIM_MARKETING_FORECAST.MOBILE_APP_FLAG,
          STG_DIM_MARKETING_FORECAST.FCST_TYPE,
          STG_DIM_MARKETING_FORECAST.FCST_CATEGORY,
          STG_DIM_MARKETING_FORECAST.TRAFFIC,
          STG_DIM_MARKETING_FORECAST.NEAUTHS,
          STG_DIM_MARKETING_FORECAST.UNITS,
          STG_DIM_MARKETING_FORECAST.FCST_VERSION,
          STG_DIM_MARKETING_FORECAST.TRAFFIC_MULTIPLIER,
          STG_DIM_MARKETING_FORECAST.NEAUTHS_MULTIPLIER,
          STG_DIM_MARKETING_FORECAST.UNITS_MULTIPLIER
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_ORDERS /*+createtype(P)*/
(
 TTO_ORDER_KEY,
 BATCH_EVENT_ID,
 ORDER_TIMESTAMP,
 AUTH_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORDER_NUMBER,
 PRODUCT_CODE,
 PAYMENT_METHOD,
 PAYMENT_AMOUNT,
 ORIGINAL_SKU_ID,
 VOUCHER_CODE,
 TAX_YEAR,
 HOLD_REASON,
 ORDER_ORIGIN
)
AS
 SELECT STG_TTO_ORDERS.TTO_ORDER_KEY,
        STG_TTO_ORDERS.BATCH_EVENT_ID,
        STG_TTO_ORDERS.ORDER_TIMESTAMP,
        STG_TTO_ORDERS.AUTH_ID,
        STG_TTO_ORDERS.PRIMARY_ID,
        STG_TTO_ORDERS.SECONDARY_ID,
        STG_TTO_ORDERS.CURRENT_PRIORITY_CODE,
        STG_TTO_ORDERS.PRICE_PRIORITY_CODE,
        STG_TTO_ORDERS.CREDIT_PRIORITY_CODE,
        STG_TTO_ORDERS.ORDER_NUMBER,
        STG_TTO_ORDERS.PRODUCT_CODE,
        STG_TTO_ORDERS.PAYMENT_METHOD,
        STG_TTO_ORDERS.PAYMENT_AMOUNT,
        STG_TTO_ORDERS.ORIGINAL_SKU_ID,
        STG_TTO_ORDERS.VOUCHER_CODE,
        STG_TTO_ORDERS.TAX_YEAR,
        STG_TTO_ORDERS.HOLD_REASON,
        STG_TTO_ORDERS.ORDER_ORIGIN
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS
 ORDER BY STG_TTO_ORDERS.TTO_ORDER_KEY
SEGMENTED BY hash(STG_TTO_ORDERS.TTO_ORDER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE /*+createtype(P)*/
(
 COORDINATOR_INSTANCE_ID,
 START_TIMESTAMP,
 END_TIMESTAMP,
 STATUS,
 NUMBER_OF_PROJECT_EXECUTED,
 ENABLED,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ETL_COORDINATOR_INSTANCE.COORDINATOR_INSTANCE_ID,
        ETL_COORDINATOR_INSTANCE.START_TIMESTAMP,
        ETL_COORDINATOR_INSTANCE.END_TIMESTAMP,
        ETL_COORDINATOR_INSTANCE.STATUS,
        ETL_COORDINATOR_INSTANCE.NUMBER_OF_PROJECT_EXECUTED,
        ETL_COORDINATOR_INSTANCE.ENABLED,
        ETL_COORDINATOR_INSTANCE.CREATED_TIMESTAMP,
        ETL_COORDINATOR_INSTANCE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ETL_COORDINATOR_INSTANCE
 ORDER BY ETL_COORDINATOR_INSTANCE.COORDINATOR_INSTANCE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_TRANSPOSE_INDEX /*+createtype(P)*/
(
 INDEX_ID
)
AS
 SELECT CONFIG_TRANSPOSE_INDEX.INDEX_ID
 FROM CTG_ANALYTICS_ADMIN.CONFIG_TRANSPOSE_INDEX
 ORDER BY CONFIG_TRANSPOSE_INDEX.INDEX_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_SEASON_PART /*+createtype(P)*/
(
 TAX_YEAR,
 STARTING_DATE,
 ENDING_DATE,
 SEASON_PART,
 ACTIVE
)
AS
 SELECT CONFIG_SEASON_PART.TAX_YEAR,
        CONFIG_SEASON_PART.STARTING_DATE,
        CONFIG_SEASON_PART.ENDING_DATE,
        CONFIG_SEASON_PART.SEASON_PART,
        CONFIG_SEASON_PART.ACTIVE
 FROM CTG_ANALYTICS_ADMIN.CONFIG_SEASON_PART
 ORDER BY CONFIG_SEASON_PART.TAX_YEAR,
          CONFIG_SEASON_PART.STARTING_DATE,
          CONFIG_SEASON_PART.ENDING_DATE,
          CONFIG_SEASON_PART.SEASON_PART,
          CONFIG_SEASON_PART.ACTIVE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.CID_CLASSIFICATION_QB /*+createtype(P)*/
(
 CID,
 TAX_YEAR,
 CHANNEL,
 VENUE,
 SEGMENT,
 SUBVENUE,
 PPC_DEVICE,
 PPC_GEO,
 PPC_KW_BUCKET,
 PPC_KW_SUBBUCKET,
 PPC_KW_ADGROUP,
 AFF_PAYOUT_TYPE,
 AFF_NETWORK_ID_RULE,
 AFF_NETWORK_ID,
 BN_DFA_SITE_NAME,
 BN_DFA_PLACEMENT_NAME,
 BN_DFA_CREATIVE_NAME,
 BN_MEDIA_CATEGORY,
 BN_PLACEMENT_DECLARED_TARGET,
 BN_CREATIVE_MESSAGE,
 EMAIL1,
 EMAIL2,
 EMAIL3,
 DATE_CREATED,
 DATE_MODIFIED
)
AS
 SELECT CID_CLASSIFICATION_QB.CID,
        CID_CLASSIFICATION_QB.TAX_YEAR,
        CID_CLASSIFICATION_QB.CHANNEL,
        CID_CLASSIFICATION_QB.VENUE,
        CID_CLASSIFICATION_QB.SEGMENT,
        CID_CLASSIFICATION_QB.SUBVENUE,
        CID_CLASSIFICATION_QB.PPC_DEVICE,
        CID_CLASSIFICATION_QB.PPC_GEO,
        CID_CLASSIFICATION_QB.PPC_KW_BUCKET,
        CID_CLASSIFICATION_QB.PPC_KW_SUBBUCKET,
        CID_CLASSIFICATION_QB.PPC_KW_ADGROUP,
        CID_CLASSIFICATION_QB.AFF_PAYOUT_TYPE,
        CID_CLASSIFICATION_QB.AFF_NETWORK_ID_RULE,
        CID_CLASSIFICATION_QB.AFF_NETWORK_ID,
        CID_CLASSIFICATION_QB.BN_DFA_SITE_NAME,
        CID_CLASSIFICATION_QB.BN_DFA_PLACEMENT_NAME,
        CID_CLASSIFICATION_QB.BN_DFA_CREATIVE_NAME,
        CID_CLASSIFICATION_QB.BN_MEDIA_CATEGORY,
        CID_CLASSIFICATION_QB.BN_PLACEMENT_DECLARED_TARGET,
        CID_CLASSIFICATION_QB.BN_CREATIVE_MESSAGE,
        CID_CLASSIFICATION_QB.EMAIL1,
        CID_CLASSIFICATION_QB.EMAIL2,
        CID_CLASSIFICATION_QB.EMAIL3,
        CID_CLASSIFICATION_QB.DATE_CREATED,
        CID_CLASSIFICATION_QB.DATE_MODIFIED
 FROM CTG_ANALYTICS_SRC.CID_CLASSIFICATION_QB
 ORDER BY CID_CLASSIFICATION_QB.CID,
          CID_CLASSIFICATION_QB.TAX_YEAR,
          CID_CLASSIFICATION_QB.CHANNEL,
          CID_CLASSIFICATION_QB.VENUE,
          CID_CLASSIFICATION_QB.SEGMENT,
          CID_CLASSIFICATION_QB.SUBVENUE,
          CID_CLASSIFICATION_QB.PPC_DEVICE,
          CID_CLASSIFICATION_QB.PPC_GEO,
          CID_CLASSIFICATION_QB.PPC_KW_BUCKET,
          CID_CLASSIFICATION_QB.PPC_KW_SUBBUCKET,
          CID_CLASSIFICATION_QB.PPC_KW_ADGROUP,
          CID_CLASSIFICATION_QB.AFF_PAYOUT_TYPE,
          CID_CLASSIFICATION_QB.AFF_NETWORK_ID_RULE,
          CID_CLASSIFICATION_QB.AFF_NETWORK_ID,
          CID_CLASSIFICATION_QB.BN_DFA_SITE_NAME,
          CID_CLASSIFICATION_QB.BN_DFA_PLACEMENT_NAME,
          CID_CLASSIFICATION_QB.BN_DFA_CREATIVE_NAME,
          CID_CLASSIFICATION_QB.BN_MEDIA_CATEGORY,
          CID_CLASSIFICATION_QB.BN_PLACEMENT_DECLARED_TARGET,
          CID_CLASSIFICATION_QB.BN_CREATIVE_MESSAGE,
          CID_CLASSIFICATION_QB.EMAIL1,
          CID_CLASSIFICATION_QB.EMAIL2,
          CID_CLASSIFICATION_QB.EMAIL3,
          CID_CLASSIFICATION_QB.DATE_CREATED,
          CID_CLASSIFICATION_QB.DATE_MODIFIED
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_CID_CLASSIFICATION_QB /*+createtype(P)*/
(
 CID,
 TAX_YEAR,
 CHANNEL,
 VENUE,
 SEGMENT,
 SUBVENUE,
 PPC_DEVICE,
 PPC_GEO,
 PPC_KW_BUCKET,
 PPC_KW_SUBBUCKET,
 PPC_KW_ADGROUP,
 AFF_PAYOUT_TYPE,
 AFF_NETWORK_ID_RULE,
 AFF_NETWORK_ID,
 BN_DFA_SITE_NAME,
 BN_DFA_PLACEMENT_NAME,
 BN_DFA_CREATIVE_NAME,
 BN_MEDIA_CATEGORY,
 BN_PLACEMENT_DECLARED_TARGET,
 BN_CREATIVE_MESSAGE,
 EMAIL1,
 EMAIL2,
 EMAIL3,
 DATE_CREATED,
 DATE_MODIFIED
)
AS
 SELECT STG_CID_CLASSIFICATION_QB.CID,
        STG_CID_CLASSIFICATION_QB.TAX_YEAR,
        STG_CID_CLASSIFICATION_QB.CHANNEL,
        STG_CID_CLASSIFICATION_QB.VENUE,
        STG_CID_CLASSIFICATION_QB.SEGMENT,
        STG_CID_CLASSIFICATION_QB.SUBVENUE,
        STG_CID_CLASSIFICATION_QB.PPC_DEVICE,
        STG_CID_CLASSIFICATION_QB.PPC_GEO,
        STG_CID_CLASSIFICATION_QB.PPC_KW_BUCKET,
        STG_CID_CLASSIFICATION_QB.PPC_KW_SUBBUCKET,
        STG_CID_CLASSIFICATION_QB.PPC_KW_ADGROUP,
        STG_CID_CLASSIFICATION_QB.AFF_PAYOUT_TYPE,
        STG_CID_CLASSIFICATION_QB.AFF_NETWORK_ID_RULE,
        STG_CID_CLASSIFICATION_QB.AFF_NETWORK_ID,
        STG_CID_CLASSIFICATION_QB.BN_DFA_SITE_NAME,
        STG_CID_CLASSIFICATION_QB.BN_DFA_PLACEMENT_NAME,
        STG_CID_CLASSIFICATION_QB.BN_DFA_CREATIVE_NAME,
        STG_CID_CLASSIFICATION_QB.BN_MEDIA_CATEGORY,
        STG_CID_CLASSIFICATION_QB.BN_PLACEMENT_DECLARED_TARGET,
        STG_CID_CLASSIFICATION_QB.BN_CREATIVE_MESSAGE,
        STG_CID_CLASSIFICATION_QB.EMAIL1,
        STG_CID_CLASSIFICATION_QB.EMAIL2,
        STG_CID_CLASSIFICATION_QB.EMAIL3,
        STG_CID_CLASSIFICATION_QB.DATE_CREATED,
        STG_CID_CLASSIFICATION_QB.DATE_MODIFIED
 FROM CTG_ANALYTICS_STG.STG_CID_CLASSIFICATION_QB
 ORDER BY STG_CID_CLASSIFICATION_QB.CID,
          STG_CID_CLASSIFICATION_QB.TAX_YEAR,
          STG_CID_CLASSIFICATION_QB.CHANNEL,
          STG_CID_CLASSIFICATION_QB.VENUE,
          STG_CID_CLASSIFICATION_QB.SEGMENT,
          STG_CID_CLASSIFICATION_QB.SUBVENUE,
          STG_CID_CLASSIFICATION_QB.PPC_DEVICE,
          STG_CID_CLASSIFICATION_QB.PPC_GEO,
          STG_CID_CLASSIFICATION_QB.PPC_KW_BUCKET,
          STG_CID_CLASSIFICATION_QB.PPC_KW_SUBBUCKET,
          STG_CID_CLASSIFICATION_QB.PPC_KW_ADGROUP,
          STG_CID_CLASSIFICATION_QB.AFF_PAYOUT_TYPE,
          STG_CID_CLASSIFICATION_QB.AFF_NETWORK_ID_RULE,
          STG_CID_CLASSIFICATION_QB.AFF_NETWORK_ID,
          STG_CID_CLASSIFICATION_QB.BN_DFA_SITE_NAME,
          STG_CID_CLASSIFICATION_QB.BN_DFA_PLACEMENT_NAME,
          STG_CID_CLASSIFICATION_QB.BN_DFA_CREATIVE_NAME,
          STG_CID_CLASSIFICATION_QB.BN_MEDIA_CATEGORY,
          STG_CID_CLASSIFICATION_QB.BN_PLACEMENT_DECLARED_TARGET,
          STG_CID_CLASSIFICATION_QB.BN_CREATIVE_MESSAGE,
          STG_CID_CLASSIFICATION_QB.EMAIL1,
          STG_CID_CLASSIFICATION_QB.EMAIL2,
          STG_CID_CLASSIFICATION_QB.EMAIL3,
          STG_CID_CLASSIFICATION_QB.DATE_CREATED,
          STG_CID_CLASSIFICATION_QB.DATE_MODIFIED
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.PRODUCT_ROLLUP /*+createtype(P)*/
(
 PRODUCT_ID,
 PRODUCT_ENGINE_DSC,
 PRODUCT_ROLLUP,
 PAID_FLAG,
 PRODUCT_NAME,
 DISPLAY_PRODUCT_NAME_WITH_SORT,
 PRODUCT_SORT,
 DISPLAY_PRODUCT_NAME,
 PRODUCT_EDTN_DSC,
 PRODUCT_CODE_ROLLUP,
 EFFECTIVE_START_TAX_YEAR,
 EFFECTIVE_END_TAX_YEAR,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE
)
AS
 SELECT PRODUCT_ROLLUP.PRODUCT_ID,
        PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
        PRODUCT_ROLLUP.PRODUCT_ROLLUP,
        PRODUCT_ROLLUP.PAID_FLAG,
        PRODUCT_ROLLUP.PRODUCT_NAME,
        PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
        PRODUCT_ROLLUP.PRODUCT_SORT,
        PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
        PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
        PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
        PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
        PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
        PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
        PRODUCT_ROLLUP.EFFECTIVE_END_DATE
 FROM CTG_ANALYTICS_STG.PRODUCT_ROLLUP
 ORDER BY PRODUCT_ROLLUP.PRODUCT_ID,
          PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
          PRODUCT_ROLLUP.PRODUCT_ROLLUP,
          PRODUCT_ROLLUP.PAID_FLAG,
          PRODUCT_ROLLUP.PRODUCT_NAME,
          PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
          PRODUCT_ROLLUP.PRODUCT_SORT,
          PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
          PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
          PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
          PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
          PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
          PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
          PRODUCT_ROLLUP.EFFECTIVE_END_DATE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.SOLUTION_VARIABLES /*+createtype(P)*/
(
 SOLUTION_VARIABLE_ID,
 VARIABLE_NAME,
 VARIABLE_VALUE,
 ATTRIBUTE,
 DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT SOLUTION_VARIABLES.SOLUTION_VARIABLE_ID,
        SOLUTION_VARIABLES.VARIABLE_NAME,
        SOLUTION_VARIABLES.VARIABLE_VALUE,
        SOLUTION_VARIABLES.ATTRIBUTE,
        SOLUTION_VARIABLES.DESCRIPTION,
        SOLUTION_VARIABLES.BATCH_EVENT_ID,
        SOLUTION_VARIABLES.CREATED_TIMESTAMP,
        SOLUTION_VARIABLES.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 ORDER BY SOLUTION_VARIABLES.SOLUTION_VARIABLE_ID
SEGMENTED BY hash(SOLUTION_VARIABLES.SOLUTION_VARIABLE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_DIM_PRODUCT_ROLLUP /*+createtype(P)*/
(
 PRODUCT_ID,
 PRODUCT_ENGINE_DSC,
 PRODUCT_ROLLUP,
 PAID_FLAG,
 PRODUCT_NAME,
 DISPLAY_PRODUCT_NAME_WITH_SORT,
 PRODUCT_SORT,
 DISPLAY_PRODUCT_NAME,
 PRODUCT_EDTN_DSC,
 PRODUCT_CODE_ROLLUP,
 EFFECTIVE_START_TAX_YEAR,
 EFFECTIVE_END_TAX_YEAR,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_DIM_PRODUCT_ROLLUP.PRODUCT_ID,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_ROLLUP,
        STG_DIM_PRODUCT_ROLLUP.PAID_FLAG,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_NAME,
        STG_DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_SORT,
        STG_DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
        STG_DIM_PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
        STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
        STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
        STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
        STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_END_DATE,
        STG_DIM_PRODUCT_ROLLUP.BATCH_EVENT_ID,
        STG_DIM_PRODUCT_ROLLUP.CREATED_TIMESTAMP,
        STG_DIM_PRODUCT_ROLLUP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_DIM_PRODUCT_ROLLUP
 ORDER BY STG_DIM_PRODUCT_ROLLUP.PRODUCT_ID,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_ROLLUP,
          STG_DIM_PRODUCT_ROLLUP.PAID_FLAG,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_NAME,
          STG_DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_SORT,
          STG_DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
          STG_DIM_PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
          STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
          STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
          STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
          STG_DIM_PRODUCT_ROLLUP.EFFECTIVE_END_DATE,
          STG_DIM_PRODUCT_ROLLUP.BATCH_EVENT_ID,
          STG_DIM_PRODUCT_ROLLUP.CREATED_TIMESTAMP,
          STG_DIM_PRODUCT_ROLLUP.UPDATED_TIMESTAMP
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_AUTH_LOG /*+createtype(P)*/
(
 BATCH_EVENT_ID,
 AUTH_ID,
 AUTH_DT,
 SOURCE,
 ROLE,
 TAX_YEAR,
 AUTH_SOURCE,
 SKU_ID,
 IP_ADDRESS,
 AUTHORIZATION_LEVEL,
 AUTH_LOG_KEY
)
AS
 SELECT STG_TTO_AUTH_LOG.BATCH_EVENT_ID,
        STG_TTO_AUTH_LOG.AUTH_ID,
        STG_TTO_AUTH_LOG.AUTH_DT,
        STG_TTO_AUTH_LOG.SOURCE,
        STG_TTO_AUTH_LOG.ROLE,
        STG_TTO_AUTH_LOG.TAX_YEAR,
        STG_TTO_AUTH_LOG.AUTH_SOURCE,
        STG_TTO_AUTH_LOG.SKU_ID,
        STG_TTO_AUTH_LOG.IP_ADDRESS,
        STG_TTO_AUTH_LOG.AUTHORIZATION_LEVEL,
        STG_TTO_AUTH_LOG.AUTH_LOG_KEY
 FROM CTG_ANALYTICS_STG.STG_TTO_AUTH_LOG
 ORDER BY STG_TTO_AUTH_LOG.BATCH_EVENT_ID,
          STG_TTO_AUTH_LOG.AUTH_ID,
          STG_TTO_AUTH_LOG.AUTH_DT,
          STG_TTO_AUTH_LOG.SOURCE,
          STG_TTO_AUTH_LOG.ROLE,
          STG_TTO_AUTH_LOG.TAX_YEAR,
          STG_TTO_AUTH_LOG.AUTH_SOURCE,
          STG_TTO_AUTH_LOG.SKU_ID,
          STG_TTO_AUTH_LOG.IP_ADDRESS,
          STG_TTO_AUTH_LOG.AUTHORIZATION_LEVEL,
          STG_TTO_AUTH_LOG.AUTH_LOG_KEY
SEGMENTED BY hash(STG_TTO_AUTH_LOG.AUTH_LOG_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.AUTH_MULTIFILER /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR
)
AS
 SELECT AUTH_MULTIFILER.AUTH_ID,
        AUTH_MULTIFILER.TAX_YEAR
 FROM CTG_ANALYTICS_STG.AUTH_MULTIFILER
 ORDER BY AUTH_MULTIFILER.AUTH_ID,
          AUTH_MULTIFILER.TAX_YEAR
SEGMENTED BY hash(AUTH_MULTIFILER.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_ETX_ORDERS /*+createtype(P)*/
(
 ETX_ORDER_ID,
 CHANGE_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 ENGINE_ID,
 PRODUCT_CODE,
 PRODUCT_VERSION,
 TAX_YEAR,
 CREDIT_PRIORITY_CODE,
 FILING_TYPE,
 ORDER_AMOUNT,
 ORDER_TYPE,
 ETX_REF_NUM,
 ORDER_TIMESTAMP,
 PRICE_PRIORITY_CODE,
 PRODUCT_ALIAS_CODE,
 STATUS_TYPE,
 BATCH_EVENT_ID,
 AUTH_ID
)
AS
 SELECT STG_ETX_ORDERS.ETX_ORDER_ID,
        STG_ETX_ORDERS.CHANGE_ID,
        STG_ETX_ORDERS.PRIMARY_ID,
        STG_ETX_ORDERS.SECONDARY_ID,
        STG_ETX_ORDERS.ENGINE_ID,
        STG_ETX_ORDERS.PRODUCT_CODE,
        STG_ETX_ORDERS.PRODUCT_VERSION,
        STG_ETX_ORDERS.TAX_YEAR,
        STG_ETX_ORDERS.CREDIT_PRIORITY_CODE,
        STG_ETX_ORDERS.FILING_TYPE,
        STG_ETX_ORDERS.ORDER_AMOUNT,
        STG_ETX_ORDERS.ORDER_TYPE,
        STG_ETX_ORDERS.ETX_REF_NUM,
        STG_ETX_ORDERS.ORDER_TIMESTAMP,
        STG_ETX_ORDERS.PRICE_PRIORITY_CODE,
        STG_ETX_ORDERS.PRODUCT_ALIAS_CODE,
        STG_ETX_ORDERS.STATUS_TYPE,
        STG_ETX_ORDERS.BATCH_EVENT_ID,
        STG_ETX_ORDERS.AUTH_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_ORDERS
 ORDER BY STG_ETX_ORDERS.ETX_ORDER_ID
SEGMENTED BY hash(STG_ETX_ORDERS.ETX_ORDER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_BRIDGE /*+createtype(P)*/
(
 BRIDGE_ID,
 PROJECT_ID,
 TABLE_NAME,
 SOURCE_AUDIT_KEY,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ETL_BRIDGE.BRIDGE_ID,
        ETL_BRIDGE.PROJECT_ID,
        ETL_BRIDGE.TABLE_NAME,
        ETL_BRIDGE.SOURCE_AUDIT_KEY,
        ETL_BRIDGE.BATCH_EVENT_ID,
        ETL_BRIDGE.CREATED_TIMESTAMP,
        ETL_BRIDGE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ETL_BRIDGE
 ORDER BY ETL_BRIDGE.BRIDGE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP /*+createtype(P)*/
(
 ODS_PROJECT_TABLE_MAP_ID,
 PROJECT_ID,
 TABLE_NAME,
 SOURCE_AUDIT_KEY_EXPR,
 BATCH_LIMIT,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ODS_PROJECT_TABLE_MAP.ODS_PROJECT_TABLE_MAP_ID,
        ODS_PROJECT_TABLE_MAP.PROJECT_ID,
        ODS_PROJECT_TABLE_MAP.TABLE_NAME,
        ODS_PROJECT_TABLE_MAP.SOURCE_AUDIT_KEY_EXPR,
        ODS_PROJECT_TABLE_MAP.BATCH_LIMIT,
        ODS_PROJECT_TABLE_MAP.CREATED_TIMESTAMP,
        ODS_PROJECT_TABLE_MAP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ODS_PROJECT_TABLE_MAP
 ORDER BY ODS_PROJECT_TABLE_MAP.ODS_PROJECT_TABLE_MAP_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_DIM_USER_AGENT_SUPERSET /*+createtype(P)*/
(
 USER_AGENT_ID,
 USER_AGENT,
 DEVICE_FAMILY,
 OS_FAMILY,
 OS_MAJOR,
 OS_MINOR,
 OS_PATCH,
 OS_PATCH_MINOR,
 USER_AGENT_FAMILY,
 USER_AGENT_MAJOR,
 USER_AGENT_MINOR,
 USER_AGENT_PATCH,
 USER_AGENT_BROWSER_VERSION,
 LOAD_DATETIME
)
AS
 SELECT STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_ID,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT,
        STG_DIM_USER_AGENT_SUPERSET.DEVICE_FAMILY,
        STG_DIM_USER_AGENT_SUPERSET.OS_FAMILY,
        STG_DIM_USER_AGENT_SUPERSET.OS_MAJOR,
        STG_DIM_USER_AGENT_SUPERSET.OS_MINOR,
        STG_DIM_USER_AGENT_SUPERSET.OS_PATCH,
        STG_DIM_USER_AGENT_SUPERSET.OS_PATCH_MINOR,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_FAMILY,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_MAJOR,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_MINOR,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_PATCH,
        STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_BROWSER_VERSION,
        STG_DIM_USER_AGENT_SUPERSET.LOAD_DATETIME
 FROM CTG_ANALYTICS_STG.STG_DIM_USER_AGENT_SUPERSET
 ORDER BY STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_ID,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT,
          STG_DIM_USER_AGENT_SUPERSET.DEVICE_FAMILY,
          STG_DIM_USER_AGENT_SUPERSET.OS_FAMILY,
          STG_DIM_USER_AGENT_SUPERSET.OS_MAJOR,
          STG_DIM_USER_AGENT_SUPERSET.OS_MINOR,
          STG_DIM_USER_AGENT_SUPERSET.OS_PATCH,
          STG_DIM_USER_AGENT_SUPERSET.OS_PATCH_MINOR,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_FAMILY,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_MAJOR,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_MINOR,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_PATCH,
          STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_BROWSER_VERSION,
          STG_DIM_USER_AGENT_SUPERSET.LOAD_DATETIME
SEGMENTED BY hash(STG_DIM_USER_AGENT_SUPERSET.USER_AGENT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER /*+createtype(P)*/
(
 BATCH_ID,
 PROJECT_NAME,
 CONFIG_NAME,
 START_TIME,
 END_TIME,
 PROJECT_STATUS,
 RUNNING_HOUR,
 REFERENCE
)
AS
 SELECT AUDIT_PROJECT_HEADER.BATCH_ID,
        AUDIT_PROJECT_HEADER.PROJECT_NAME,
        AUDIT_PROJECT_HEADER.CONFIG_NAME,
        AUDIT_PROJECT_HEADER.START_TIME,
        AUDIT_PROJECT_HEADER.END_TIME,
        AUDIT_PROJECT_HEADER.PROJECT_STATUS,
        AUDIT_PROJECT_HEADER.RUNNING_HOUR,
        AUDIT_PROJECT_HEADER.REFERENCE
 FROM CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_HEADER
 ORDER BY AUDIT_PROJECT_HEADER.BATCH_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL /*+createtype(P)*/
(
 BATCHDTL_ID,
 BATCH_ID,
 STEP_ID,
 STEP_NAME,
 STEP_STATUS,
 START_TIME,
 END_TIME,
 RUNNINGHOUR,
 ERROR_MESSAGE,
 INSERTED_ROWS,
 UPDATED_ROWS
)
AS
 SELECT AUDIT_PROJECT_DETAIL.BATCHDTL_ID,
        AUDIT_PROJECT_DETAIL.BATCH_ID,
        AUDIT_PROJECT_DETAIL.STEP_ID,
        AUDIT_PROJECT_DETAIL.STEP_NAME,
        AUDIT_PROJECT_DETAIL.STEP_STATUS,
        AUDIT_PROJECT_DETAIL.START_TIME,
        AUDIT_PROJECT_DETAIL.END_TIME,
        AUDIT_PROJECT_DETAIL.RUNNINGHOUR,
        AUDIT_PROJECT_DETAIL.ERROR_MESSAGE,
        AUDIT_PROJECT_DETAIL.INSERTED_ROWS,
        AUDIT_PROJECT_DETAIL.UPDATED_ROWS
 FROM CTG_ANALYTICS_ADMIN.AUDIT_PROJECT_DETAIL
 ORDER BY AUDIT_PROJECT_DETAIL.BATCHDTL_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_SESSION_END_LOG /*+createtype(P)*/
(
 SESSION_END_LOG_KEY,
 SESSION_DATE,
 AUTH_ID,
 SKU_ID,
 ORIGINAL_SKU_ID,
 PRICE_PRIORITY_CODE,
 CURRENT_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_SESSION_END_LOG.SESSION_END_LOG_KEY,
        STG_TTO_SESSION_END_LOG.SESSION_DATE,
        STG_TTO_SESSION_END_LOG.AUTH_ID,
        STG_TTO_SESSION_END_LOG.SKU_ID,
        STG_TTO_SESSION_END_LOG.ORIGINAL_SKU_ID,
        STG_TTO_SESSION_END_LOG.PRICE_PRIORITY_CODE,
        STG_TTO_SESSION_END_LOG.CURRENT_PRIORITY_CODE,
        STG_TTO_SESSION_END_LOG.CREDIT_PRIORITY_CODE,
        STG_TTO_SESSION_END_LOG.BATCH_EVENT_ID,
        STG_TTO_SESSION_END_LOG.CREATED_TIMESTAMP,
        STG_TTO_SESSION_END_LOG.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_SESSION_END_LOG
 ORDER BY STG_TTO_SESSION_END_LOG.AUTH_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_SESSIONSTART_LOG /*+createtype(P)*/
(
 SESSIONSTART_LOG_KEY,
 START_DATE,
 AUTH_ID,
 SKU_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_SESSIONSTART_LOG.SESSIONSTART_LOG_KEY,
        STG_TTO_SESSIONSTART_LOG.START_DATE,
        STG_TTO_SESSIONSTART_LOG.AUTH_ID,
        STG_TTO_SESSIONSTART_LOG.SKU_ID,
        STG_TTO_SESSIONSTART_LOG.BATCH_EVENT_ID,
        STG_TTO_SESSIONSTART_LOG.CREATED_TIMESTAMP,
        STG_TTO_SESSIONSTART_LOG.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_SESSIONSTART_LOG
 ORDER BY STG_TTO_SESSIONSTART_LOG.AUTH_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_FORM_IMPORT /*+createtype(P)*/
(
 DS_BIMA_LOG_KEY,
 CREATION_TIMESTAMP,
 PRODUCTION_TEST_FLAG,
 EVENTID,
 CORRELATION_ID,
 YEAR,
 OPERATION,
 SUCCEEDED,
 CLIENT_APP,
 CLIENT_SKU,
 CLIENT_VERSION,
 PROVIDER_ID,
 PARTNER_ID,
 PARTNER_STATUS_CODE,
 OFX_STATUS,
 OFX_MESSAGE,
 AUTHID,
 ALTERNATE_ID,
 USER_ID,
 EIN,
 EMPLOYER_EMAIL,
 DS_HTTP_STATUS,
 DS_ERROR_CODE,
 DS_ERROR_DETAILS,
 DS_DOC_TYPE,
 DS_DOC_ID,
 ORIGIN,
 ELAPSED_MILLISECS,
 SERVICE,
 DEVICE_ID,
 ERO_ID,
 SUB_ENTITY_ID,
 SUB_ENTITY_NAME,
 OFX_VALIDATION,
 COST_BASIS_FLAG,
 FIRST_OFX_ERROR_CODE,
 FIRST_OFX_ERROR_TEXT,
 LAST_OFX_ERROR_CODE,
 LAST_OFX_ERROR_TEXT,
 DOCUMENT_COUNT,
 CHECKSUM,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 REQUEST_UUID,
 MASHUP_FLAG
)
AS
 SELECT TRN_FORM_IMPORT.DS_BIMA_LOG_KEY,
        TRN_FORM_IMPORT.CREATION_TIMESTAMP,
        TRN_FORM_IMPORT.PRODUCTION_TEST_FLAG,
        TRN_FORM_IMPORT.EVENTID,
        TRN_FORM_IMPORT.CORRELATION_ID,
        TRN_FORM_IMPORT.YEAR,
        TRN_FORM_IMPORT.OPERATION,
        TRN_FORM_IMPORT.SUCCEEDED,
        TRN_FORM_IMPORT.CLIENT_APP,
        TRN_FORM_IMPORT.CLIENT_SKU,
        TRN_FORM_IMPORT.CLIENT_VERSION,
        TRN_FORM_IMPORT.PROVIDER_ID,
        TRN_FORM_IMPORT.PARTNER_ID,
        TRN_FORM_IMPORT.PARTNER_STATUS_CODE,
        TRN_FORM_IMPORT.OFX_STATUS,
        TRN_FORM_IMPORT.OFX_MESSAGE,
        TRN_FORM_IMPORT.AUTHID,
        TRN_FORM_IMPORT.ALTERNATE_ID,
        TRN_FORM_IMPORT.USER_ID,
        TRN_FORM_IMPORT.EIN,
        TRN_FORM_IMPORT.EMPLOYER_EMAIL,
        TRN_FORM_IMPORT.DS_HTTP_STATUS,
        TRN_FORM_IMPORT.DS_ERROR_CODE,
        TRN_FORM_IMPORT.DS_ERROR_DETAILS,
        TRN_FORM_IMPORT.DS_DOC_TYPE,
        TRN_FORM_IMPORT.DS_DOC_ID,
        TRN_FORM_IMPORT.ORIGIN,
        TRN_FORM_IMPORT.ELAPSED_MILLISECS,
        TRN_FORM_IMPORT.SERVICE,
        TRN_FORM_IMPORT.DEVICE_ID,
        TRN_FORM_IMPORT.ERO_ID,
        TRN_FORM_IMPORT.SUB_ENTITY_ID,
        TRN_FORM_IMPORT.SUB_ENTITY_NAME,
        TRN_FORM_IMPORT.OFX_VALIDATION,
        TRN_FORM_IMPORT.COST_BASIS_FLAG,
        TRN_FORM_IMPORT.FIRST_OFX_ERROR_CODE,
        TRN_FORM_IMPORT.FIRST_OFX_ERROR_TEXT,
        TRN_FORM_IMPORT.LAST_OFX_ERROR_CODE,
        TRN_FORM_IMPORT.LAST_OFX_ERROR_TEXT,
        TRN_FORM_IMPORT.DOCUMENT_COUNT,
        TRN_FORM_IMPORT.CHECKSUM,
        TRN_FORM_IMPORT.BATCH_EVENT_ID,
        TRN_FORM_IMPORT.CREATED_TIMESTAMP,
        TRN_FORM_IMPORT.UPDATED_TIMESTAMP,
        TRN_FORM_IMPORT.REQUEST_UUID,
        TRN_FORM_IMPORT.MASHUP_FLAG
 FROM CTG_ANALYTICS_SRC.TRN_FORM_IMPORT
 ORDER BY TRN_FORM_IMPORT.DS_BIMA_LOG_KEY
SEGMENTED BY hash(TRN_FORM_IMPORT.DS_BIMA_LOG_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_CTG_OVERRIDE /*+createtype(P)*/
(
 TRANS_ID,
 PROP04_FIXED,
 AUTH_ID_FIXED,
 CREATED_TIMESTAMP
)
AS
 SELECT TRANS_CLICKSTREAM_CTG_OVERRIDE.TRANS_ID,
        TRANS_CLICKSTREAM_CTG_OVERRIDE.PROP04_FIXED,
        TRANS_CLICKSTREAM_CTG_OVERRIDE.AUTH_ID_FIXED,
        TRANS_CLICKSTREAM_CTG_OVERRIDE.CREATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_CTG_OVERRIDE
 ORDER BY TRANS_CLICKSTREAM_CTG_OVERRIDE.TRANS_ID,
          TRANS_CLICKSTREAM_CTG_OVERRIDE.PROP04_FIXED,
          TRANS_CLICKSTREAM_CTG_OVERRIDE.AUTH_ID_FIXED,
          TRANS_CLICKSTREAM_CTG_OVERRIDE.CREATED_TIMESTAMP
SEGMENTED BY hash(TRANS_CLICKSTREAM_CTG_OVERRIDE.TRANS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_SQL_MAP /*+createtype(P)*/
(
 SOURCE_NAME,
 ETL_STAGE,
 EXEC_ORDER,
 ENABLED,
 SQL_FILE,
 SESSION_TO_VALIDATE
)
AS
 SELECT CONFIG_MATT_LOAD_SQL_MAP.SOURCE_NAME,
        CONFIG_MATT_LOAD_SQL_MAP.ETL_STAGE,
        CONFIG_MATT_LOAD_SQL_MAP.EXEC_ORDER,
        CONFIG_MATT_LOAD_SQL_MAP.ENABLED,
        CONFIG_MATT_LOAD_SQL_MAP.SQL_FILE,
        CONFIG_MATT_LOAD_SQL_MAP.SESSION_TO_VALIDATE
 FROM CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_SQL_MAP
 ORDER BY CONFIG_MATT_LOAD_SQL_MAP.SOURCE_NAME,
          CONFIG_MATT_LOAD_SQL_MAP.ETL_STAGE,
          CONFIG_MATT_LOAD_SQL_MAP.EXEC_ORDER,
          CONFIG_MATT_LOAD_SQL_MAP.ENABLED,
          CONFIG_MATT_LOAD_SQL_MAP.SQL_FILE,
          CONFIG_MATT_LOAD_SQL_MAP.SESSION_TO_VALIDATE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT /*+createtype(P)*/
(
 CUSTOMER_SEGMENT_ID,
 SEGMENT_CODE,
 CURRENT_YEAR_SEGMENT,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT LKP_CUSTOMER_SEGMENT.CUSTOMER_SEGMENT_ID,
        LKP_CUSTOMER_SEGMENT.SEGMENT_CODE,
        LKP_CUSTOMER_SEGMENT.CURRENT_YEAR_SEGMENT,
        LKP_CUSTOMER_SEGMENT.TAX_YEAR,
        LKP_CUSTOMER_SEGMENT.BATCH_EVENT_ID,
        LKP_CUSTOMER_SEGMENT.CREATED_TIMESTAMP,
        LKP_CUSTOMER_SEGMENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_SEGMENT
 ORDER BY LKP_CUSTOMER_SEGMENT.CUSTOMER_SEGMENT_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TAXORDER_STATUS /*+createtype(P)*/
(
 TAXORDER_STATUS_ID,
 STATUS,
 DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TAXORDER_STATUS.TAXORDER_STATUS_ID,
        TAXORDER_STATUS.STATUS,
        TAXORDER_STATUS.DESCRIPTION,
        TAXORDER_STATUS.BATCH_EVENT_ID,
        TAXORDER_STATUS.CREATED_TIMESTAMP,
        TAXORDER_STATUS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TAXORDER_STATUS
 ORDER BY TAXORDER_STATUS.TAXORDER_STATUS_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_ETX_RT_ORDERS /*+createtype(P)*/
(
 CHANGE_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 ENGINE_ID,
 PRODUCT_CODE,
 PRODUCT_VERSION,
 TAX_YEAR,
 CREDIT_PRIORITY_CODE,
 FILING_TYPE,
 ORDER_AMOUNT,
 ORDER_TYPE,
 ETX_REF_NUM,
 ORDER_TIMESTAMP,
 PRICE_PRIORITY_CODE,
 PRODUCT_ALIAS_CODE,
 STATUS_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 AUTH_ID
)
AS
 SELECT STG_ETX_RT_ORDERS.CHANGE_ID,
        STG_ETX_RT_ORDERS.PRIMARY_ID,
        STG_ETX_RT_ORDERS.SECONDARY_ID,
        STG_ETX_RT_ORDERS.ENGINE_ID,
        STG_ETX_RT_ORDERS.PRODUCT_CODE,
        STG_ETX_RT_ORDERS.PRODUCT_VERSION,
        STG_ETX_RT_ORDERS.TAX_YEAR,
        STG_ETX_RT_ORDERS.CREDIT_PRIORITY_CODE,
        STG_ETX_RT_ORDERS.FILING_TYPE,
        STG_ETX_RT_ORDERS.ORDER_AMOUNT,
        STG_ETX_RT_ORDERS.ORDER_TYPE,
        STG_ETX_RT_ORDERS.ETX_REF_NUM,
        STG_ETX_RT_ORDERS.ORDER_TIMESTAMP,
        STG_ETX_RT_ORDERS.PRICE_PRIORITY_CODE,
        STG_ETX_RT_ORDERS.PRODUCT_ALIAS_CODE,
        STG_ETX_RT_ORDERS.STATUS_TYPE,
        STG_ETX_RT_ORDERS.BATCH_EVENT_ID,
        STG_ETX_RT_ORDERS.CREATED_TIMESTAMP,
        STG_ETX_RT_ORDERS.UPDATED_TIMESTAMP,
        STG_ETX_RT_ORDERS.AUTH_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_RT_ORDERS
 ORDER BY STG_ETX_RT_ORDERS.CHANGE_ID,
          STG_ETX_RT_ORDERS.PRIMARY_ID,
          STG_ETX_RT_ORDERS.SECONDARY_ID,
          STG_ETX_RT_ORDERS.ENGINE_ID,
          STG_ETX_RT_ORDERS.PRODUCT_CODE,
          STG_ETX_RT_ORDERS.PRODUCT_VERSION,
          STG_ETX_RT_ORDERS.TAX_YEAR,
          STG_ETX_RT_ORDERS.CREDIT_PRIORITY_CODE,
          STG_ETX_RT_ORDERS.FILING_TYPE,
          STG_ETX_RT_ORDERS.ORDER_AMOUNT,
          STG_ETX_RT_ORDERS.ORDER_TYPE,
          STG_ETX_RT_ORDERS.ETX_REF_NUM,
          STG_ETX_RT_ORDERS.ORDER_TIMESTAMP,
          STG_ETX_RT_ORDERS.PRICE_PRIORITY_CODE,
          STG_ETX_RT_ORDERS.PRODUCT_ALIAS_CODE,
          STG_ETX_RT_ORDERS.STATUS_TYPE,
          STG_ETX_RT_ORDERS.BATCH_EVENT_ID,
          STG_ETX_RT_ORDERS.CREATED_TIMESTAMP,
          STG_ETX_RT_ORDERS.UPDATED_TIMESTAMP
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION /*+createtype(P)*/
(
 EFS_APPLICATION_ID,
 APPLICATION_NAME,
 APPROVED_FLAG,
 FIRST_USE_YEAR,
 LAST_USE_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT LKP_EFS_APPLICATION.EFS_APPLICATION_ID,
        LKP_EFS_APPLICATION.APPLICATION_NAME,
        LKP_EFS_APPLICATION.APPROVED_FLAG,
        LKP_EFS_APPLICATION.FIRST_USE_YEAR,
        LKP_EFS_APPLICATION.LAST_USE_YEAR,
        LKP_EFS_APPLICATION.BATCH_EVENT_ID,
        LKP_EFS_APPLICATION.CREATED_TIMESTAMP,
        LKP_EFS_APPLICATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_EFS_APPLICATION
 ORDER BY LKP_EFS_APPLICATION.EFS_APPLICATION_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.RT_FLAG_TY13 /*+createtype(P)*/
(
 FILING_ID,
 RT_FLAG
)
AS
 SELECT RT_FLAG_TY13.FILING_ID,
        RT_FLAG_TY13.RT_FLAG
 FROM CTG_ANALYTICS_SRC.RT_FLAG_TY13
 ORDER BY RT_FLAG_TY13.FILING_ID,
          RT_FLAG_TY13.RT_FLAG
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_MATT_EXTRACT_ORACLE_MAP /*+createtype(P)*/
(
 SUBJECT,
 EXEC_ORDER,
 ENABLED,
 SPOOL_SQL_FILE_NM,
 TARGET_FILE_NM,
 DELIMITER,
 SRC_CONNECTION_STR
)
AS
 SELECT CONFIG_MATT_EXTRACT_ORACLE_MAP.SUBJECT,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.EXEC_ORDER,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.ENABLED,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.SPOOL_SQL_FILE_NM,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.TARGET_FILE_NM,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.DELIMITER,
        CONFIG_MATT_EXTRACT_ORACLE_MAP.SRC_CONNECTION_STR
 FROM CTG_ANALYTICS_ADMIN.CONFIG_MATT_EXTRACT_ORACLE_MAP
 ORDER BY CONFIG_MATT_EXTRACT_ORACLE_MAP.SUBJECT,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.EXEC_ORDER,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.ENABLED,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.SPOOL_SQL_FILE_NM,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.TARGET_FILE_NM,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.DELIMITER,
          CONFIG_MATT_EXTRACT_ORACLE_MAP.SRC_CONNECTION_STR
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_MATT_IMPORT_EXCP_LIST /*+createtype(P)*/
(
 FILE_NAME,
 SOURCE_NAME,
 IMPORT_STATUS
)
AS
 SELECT CONFIG_MATT_IMPORT_EXCP_LIST.FILE_NAME,
        CONFIG_MATT_IMPORT_EXCP_LIST.SOURCE_NAME,
        CONFIG_MATT_IMPORT_EXCP_LIST.IMPORT_STATUS
 FROM CTG_ANALYTICS_ADMIN.CONFIG_MATT_IMPORT_EXCP_LIST
 ORDER BY CONFIG_MATT_IMPORT_EXCP_LIST.FILE_NAME,
          CONFIG_MATT_IMPORT_EXCP_LIST.SOURCE_NAME,
          CONFIG_MATT_IMPORT_EXCP_LIST.IMPORT_STATUS
SEGMENTED BY hash(CONFIG_MATT_IMPORT_EXCP_LIST.FILE_NAME) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_FILE_MAP /*+createtype(P)*/
(
 SOLUTION,
 SOURCE_NAME,
 ETL_STAGE,
 EXEC_ORDER,
 ENABLED,
 SOURCE_FILE,
 TARGET_TABLE,
 DELIMITER,
 SKIP_ROWS,
 QUOTE_FLAG,
 FILLER_TEMPLATE,
 PROJECT_NAME
)
AS
 SELECT CONFIG_MATT_LOAD_FILE_MAP.SOLUTION,
        CONFIG_MATT_LOAD_FILE_MAP.SOURCE_NAME,
        CONFIG_MATT_LOAD_FILE_MAP.ETL_STAGE,
        CONFIG_MATT_LOAD_FILE_MAP.EXEC_ORDER,
        CONFIG_MATT_LOAD_FILE_MAP.ENABLED,
        CONFIG_MATT_LOAD_FILE_MAP.SOURCE_FILE,
        CONFIG_MATT_LOAD_FILE_MAP.TARGET_TABLE,
        CONFIG_MATT_LOAD_FILE_MAP.DELIMITER,
        CONFIG_MATT_LOAD_FILE_MAP.SKIP_ROWS,
        CONFIG_MATT_LOAD_FILE_MAP.QUOTE_FLAG,
        CONFIG_MATT_LOAD_FILE_MAP.FILLER_TEMPLATE,
        CONFIG_MATT_LOAD_FILE_MAP.PROJECT_NAME
 FROM CTG_ANALYTICS_ADMIN.CONFIG_MATT_LOAD_FILE_MAP
 ORDER BY CONFIG_MATT_LOAD_FILE_MAP.SOLUTION,
          CONFIG_MATT_LOAD_FILE_MAP.SOURCE_NAME,
          CONFIG_MATT_LOAD_FILE_MAP.ETL_STAGE,
          CONFIG_MATT_LOAD_FILE_MAP.EXEC_ORDER,
          CONFIG_MATT_LOAD_FILE_MAP.ENABLED,
          CONFIG_MATT_LOAD_FILE_MAP.SOURCE_FILE,
          CONFIG_MATT_LOAD_FILE_MAP.TARGET_TABLE,
          CONFIG_MATT_LOAD_FILE_MAP.DELIMITER,
          CONFIG_MATT_LOAD_FILE_MAP.SKIP_ROWS,
          CONFIG_MATT_LOAD_FILE_MAP.QUOTE_FLAG,
          CONFIG_MATT_LOAD_FILE_MAP.FILLER_TEMPLATE,
          CONFIG_MATT_LOAD_FILE_MAP.PROJECT_NAME
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_MATT /*+createtype(P)*/
(
 AUDIT_KEY,
 BATCH_NAME,
 SESSION_NAME,
 TARGET_TABLENAME,
 ETL_STAGE,
 SOURCE_ROWS,
 INSERTED_ROWS,
 REJECTED_ROWS,
 UPDATED_ROWS,
 SESSION_STATUS,
 LOG_MESSAGE,
 ERROR_MESSAGE,
 START_DATETIME,
 END_DATETIME,
 CREATED_BY,
 CREATED_ON,
 MODIFIED_BY,
 MODIFIED_ON,
 CHECK_SUM,
 FILE_DATE
)
AS
 SELECT ETL_MATT.AUDIT_KEY,
        ETL_MATT.BATCH_NAME,
        ETL_MATT.SESSION_NAME,
        ETL_MATT.TARGET_TABLENAME,
        ETL_MATT.ETL_STAGE,
        ETL_MATT.SOURCE_ROWS,
        ETL_MATT.INSERTED_ROWS,
        ETL_MATT.REJECTED_ROWS,
        ETL_MATT.UPDATED_ROWS,
        ETL_MATT.SESSION_STATUS,
        ETL_MATT.LOG_MESSAGE,
        ETL_MATT.ERROR_MESSAGE,
        ETL_MATT.START_DATETIME,
        ETL_MATT.END_DATETIME,
        ETL_MATT.CREATED_BY,
        ETL_MATT.CREATED_ON,
        ETL_MATT.MODIFIED_BY,
        ETL_MATT.MODIFIED_ON,
        ETL_MATT.CHECK_SUM,
        ETL_MATT.FILE_DATE
 FROM CTG_ANALYTICS_ADMIN.ETL_MATT
 ORDER BY ETL_MATT.AUDIT_KEY,
          ETL_MATT.BATCH_NAME,
          ETL_MATT.SESSION_NAME,
          ETL_MATT.TARGET_TABLENAME,
          ETL_MATT.ETL_STAGE,
          ETL_MATT.SOURCE_ROWS,
          ETL_MATT.INSERTED_ROWS,
          ETL_MATT.REJECTED_ROWS,
          ETL_MATT.UPDATED_ROWS,
          ETL_MATT.SESSION_STATUS,
          ETL_MATT.LOG_MESSAGE,
          ETL_MATT.ERROR_MESSAGE,
          ETL_MATT.START_DATETIME,
          ETL_MATT.END_DATETIME,
          ETL_MATT.CREATED_BY,
          ETL_MATT.CREATED_ON,
          ETL_MATT.MODIFIED_BY,
          ETL_MATT.MODIFIED_ON,
          ETL_MATT.CHECK_SUM,
          ETL_MATT.FILE_DATE
SEGMENTED BY hash(ETL_MATT.AUDIT_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_MATT_CONTROL_TRX /*+createtype(P)*/
(
 SESSION_NAME,
 SOURCE_NAME,
 SOURCE_TYPE,
 TGT_TABLE_NAME,
 MAX_MODIFIED_DATE,
 MAX_CREATED_DATE,
 MAX_ID,
 FILE_DELIMITER
)
AS
 SELECT CONFIG_MATT_CONTROL_TRX.SESSION_NAME,
        CONFIG_MATT_CONTROL_TRX.SOURCE_NAME,
        CONFIG_MATT_CONTROL_TRX.SOURCE_TYPE,
        CONFIG_MATT_CONTROL_TRX.TGT_TABLE_NAME,
        CONFIG_MATT_CONTROL_TRX.MAX_MODIFIED_DATE,
        CONFIG_MATT_CONTROL_TRX.MAX_CREATED_DATE,
        CONFIG_MATT_CONTROL_TRX.MAX_ID,
        CONFIG_MATT_CONTROL_TRX.FILE_DELIMITER
 FROM CTG_ANALYTICS_ADMIN.CONFIG_MATT_CONTROL_TRX
 ORDER BY CONFIG_MATT_CONTROL_TRX.SESSION_NAME,
          CONFIG_MATT_CONTROL_TRX.SOURCE_NAME,
          CONFIG_MATT_CONTROL_TRX.SOURCE_TYPE,
          CONFIG_MATT_CONTROL_TRX.TGT_TABLE_NAME,
          CONFIG_MATT_CONTROL_TRX.MAX_MODIFIED_DATE,
          CONFIG_MATT_CONTROL_TRX.MAX_CREATED_DATE,
          CONFIG_MATT_CONTROL_TRX.MAX_ID,
          CONFIG_MATT_CONTROL_TRX.FILE_DELIMITER
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_PRIMARY_FILER_BILLING_LOCATION /*+createtype(P)*/
(
 PRIMARY_ID,
 STATE_OR_ZIP_CODE,
 RECEIVED_TIMESTAMP,
 ZIP_FLAG,
 TAX_YEAR,
 BATCH_EVENT_ID
)
AS
 SELECT STG_PRIMARY_FILER_BILLING_LOCATION.PRIMARY_ID,
        STG_PRIMARY_FILER_BILLING_LOCATION.STATE_OR_ZIP_CODE,
        STG_PRIMARY_FILER_BILLING_LOCATION.RECEIVED_TIMESTAMP,
        STG_PRIMARY_FILER_BILLING_LOCATION.ZIP_FLAG,
        STG_PRIMARY_FILER_BILLING_LOCATION.TAX_YEAR,
        STG_PRIMARY_FILER_BILLING_LOCATION.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_PRIMARY_FILER_BILLING_LOCATION
 ORDER BY STG_PRIMARY_FILER_BILLING_LOCATION.PRIMARY_ID,
          STG_PRIMARY_FILER_BILLING_LOCATION.STATE_OR_ZIP_CODE,
          STG_PRIMARY_FILER_BILLING_LOCATION.RECEIVED_TIMESTAMP,
          STG_PRIMARY_FILER_BILLING_LOCATION.ZIP_FLAG,
          STG_PRIMARY_FILER_BILLING_LOCATION.TAX_YEAR,
          STG_PRIMARY_FILER_BILLING_LOCATION.BATCH_EVENT_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN /*+createtype(P)*/
(
 BATCH_EVENT_RERUN_ID,
 BATCH_EVENT_ID,
 PROJECT_ID,
 COORDINATOR_INSTANCE_ID,
 START_TIMESTAMP,
 END_TIMESTAMP,
 STATUS,
 PROJECT_MAP_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ETL_BATCH_EVENT_RERUN.BATCH_EVENT_RERUN_ID,
        ETL_BATCH_EVENT_RERUN.BATCH_EVENT_ID,
        ETL_BATCH_EVENT_RERUN.PROJECT_ID,
        ETL_BATCH_EVENT_RERUN.COORDINATOR_INSTANCE_ID,
        ETL_BATCH_EVENT_RERUN.START_TIMESTAMP,
        ETL_BATCH_EVENT_RERUN.END_TIMESTAMP,
        ETL_BATCH_EVENT_RERUN.STATUS,
        ETL_BATCH_EVENT_RERUN.PROJECT_MAP_ID,
        ETL_BATCH_EVENT_RERUN.CREATED_TIMESTAMP,
        ETL_BATCH_EVENT_RERUN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_RERUN
 ORDER BY ETL_BATCH_EVENT_RERUN.BATCH_EVENT_RERUN_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_SCREEN_QB /*+createtype(P)*/
(
 SCREEN_ID,
 APPLICATION_ASSIGNED_ID,
 CHANNEL,
 SOURCE_APPLICATION_CODE,
 SOURCE_APPLICATION_SECTION,
 SOURCE_APPLICATION_SECTION_CONTEXT,
 SOURCE_APPLICATION_GROUP,
 SOURCE_APPLICATION_GROUP_DETAIL,
 FUNNEL_SORT_RANK
)
AS
 SELECT STG_SCREEN_QB.SCREEN_ID,
        STG_SCREEN_QB.APPLICATION_ASSIGNED_ID,
        STG_SCREEN_QB.CHANNEL,
        STG_SCREEN_QB.SOURCE_APPLICATION_CODE,
        STG_SCREEN_QB.SOURCE_APPLICATION_SECTION,
        STG_SCREEN_QB.SOURCE_APPLICATION_SECTION_CONTEXT,
        STG_SCREEN_QB.SOURCE_APPLICATION_GROUP,
        STG_SCREEN_QB.SOURCE_APPLICATION_GROUP_DETAIL,
        STG_SCREEN_QB.FUNNEL_SORT_RANK
 FROM CTG_ANALYTICS_STG.STG_SCREEN_QB
 ORDER BY STG_SCREEN_QB.SCREEN_ID,
          STG_SCREEN_QB.APPLICATION_ASSIGNED_ID,
          STG_SCREEN_QB.CHANNEL,
          STG_SCREEN_QB.SOURCE_APPLICATION_CODE,
          STG_SCREEN_QB.SOURCE_APPLICATION_SECTION,
          STG_SCREEN_QB.SOURCE_APPLICATION_SECTION_CONTEXT,
          STG_SCREEN_QB.SOURCE_APPLICATION_GROUP,
          STG_SCREEN_QB.SOURCE_APPLICATION_GROUP_DETAIL,
          STG_SCREEN_QB.FUNNEL_SORT_RANK
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_SCREEN_UPLOAD_DATA /*+createtype(P)*/
(
 SCREEN_ID,
 APPLICATION_ASSIGNED_ID,
 CHANNEL,
 SOURCE_APPLICATION_CODE
)
AS
 SELECT STG_SCREEN_UPLOAD_DATA.SCREEN_ID,
        STG_SCREEN_UPLOAD_DATA.APPLICATION_ASSIGNED_ID,
        STG_SCREEN_UPLOAD_DATA.CHANNEL,
        STG_SCREEN_UPLOAD_DATA.SOURCE_APPLICATION_CODE
 FROM CTG_ANALYTICS_STG.STG_SCREEN_UPLOAD_DATA
 ORDER BY STG_SCREEN_UPLOAD_DATA.SCREEN_ID,
          STG_SCREEN_UPLOAD_DATA.APPLICATION_ASSIGNED_ID,
          STG_SCREEN_UPLOAD_DATA.CHANNEL,
          STG_SCREEN_UPLOAD_DATA.SOURCE_APPLICATION_CODE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_UPSELL_INFORMATION_QB /*+createtype(P)*/
(
 TAX_YEAR,
 UPGRADE_OFFER_CATEGORY_ROLLUP,
 TAX_SITUATION,
 UPSELL_SEEN_CATEGORY,
 OFFER_INFORMATION,
 UPSELL_INFORMATION,
 FROM_PRODUCT_ID,
 TO_PRODUCT_ID,
 SOURCE,
 FROM_PRODUCT_BUNDLE_ID,
 TO_PRODUCT_BUNDLE_ID
)
AS
 SELECT STG_UPSELL_INFORMATION_QB.TAX_YEAR,
        STG_UPSELL_INFORMATION_QB.UPGRADE_OFFER_CATEGORY_ROLLUP,
        STG_UPSELL_INFORMATION_QB.TAX_SITUATION,
        STG_UPSELL_INFORMATION_QB.UPSELL_SEEN_CATEGORY,
        STG_UPSELL_INFORMATION_QB.OFFER_INFORMATION,
        STG_UPSELL_INFORMATION_QB.UPSELL_INFORMATION,
        STG_UPSELL_INFORMATION_QB.FROM_PRODUCT_ID,
        STG_UPSELL_INFORMATION_QB.TO_PRODUCT_ID,
        STG_UPSELL_INFORMATION_QB.SOURCE,
        STG_UPSELL_INFORMATION_QB.FROM_PRODUCT_BUNDLE_ID,
        STG_UPSELL_INFORMATION_QB.TO_PRODUCT_BUNDLE_ID
 FROM CTG_ANALYTICS_STG.STG_UPSELL_INFORMATION_QB
 ORDER BY STG_UPSELL_INFORMATION_QB.TAX_YEAR,
          STG_UPSELL_INFORMATION_QB.UPGRADE_OFFER_CATEGORY_ROLLUP,
          STG_UPSELL_INFORMATION_QB.TAX_SITUATION,
          STG_UPSELL_INFORMATION_QB.UPSELL_SEEN_CATEGORY,
          STG_UPSELL_INFORMATION_QB.OFFER_INFORMATION,
          STG_UPSELL_INFORMATION_QB.UPSELL_INFORMATION,
          STG_UPSELL_INFORMATION_QB.FROM_PRODUCT_ID,
          STG_UPSELL_INFORMATION_QB.TO_PRODUCT_ID,
          STG_UPSELL_INFORMATION_QB.SOURCE,
          STG_UPSELL_INFORMATION_QB.FROM_PRODUCT_BUNDLE_ID,
          STG_UPSELL_INFORMATION_QB.TO_PRODUCT_BUNDLE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.UPSELL_INFORMATION_SOURCE /*+createtype(P)*/
(
 TAX_YEAR,
 UPGRADE_OFFER_CATEGORY_ROLLUP,
 TAX_SITUATION,
 UPSELL_SEEN_CATEGORY,
 OFFER_INFORMATION,
 UPSELL_INFORMATION,
 FROM_PRODUCT_ID,
 TO_PRODUCT_ID,
 SOURCE,
 FROM_PRODUCT_BUNDLE_ID,
 TO_PRODUCT_BUNDLE_ID
)
AS
 SELECT UPSELL_INFORMATION_SOURCE.TAX_YEAR,
        UPSELL_INFORMATION_SOURCE.UPGRADE_OFFER_CATEGORY_ROLLUP,
        UPSELL_INFORMATION_SOURCE.TAX_SITUATION,
        UPSELL_INFORMATION_SOURCE.UPSELL_SEEN_CATEGORY,
        UPSELL_INFORMATION_SOURCE.OFFER_INFORMATION,
        UPSELL_INFORMATION_SOURCE.UPSELL_INFORMATION,
        UPSELL_INFORMATION_SOURCE.FROM_PRODUCT_ID,
        UPSELL_INFORMATION_SOURCE.TO_PRODUCT_ID,
        UPSELL_INFORMATION_SOURCE.SOURCE,
        UPSELL_INFORMATION_SOURCE.FROM_PRODUCT_BUNDLE_ID,
        UPSELL_INFORMATION_SOURCE.TO_PRODUCT_BUNDLE_ID
 FROM CTG_ANALYTICS_SRC.UPSELL_INFORMATION_SOURCE
 ORDER BY UPSELL_INFORMATION_SOURCE.TAX_YEAR,
          UPSELL_INFORMATION_SOURCE.UPGRADE_OFFER_CATEGORY_ROLLUP,
          UPSELL_INFORMATION_SOURCE.TAX_SITUATION,
          UPSELL_INFORMATION_SOURCE.UPSELL_SEEN_CATEGORY,
          UPSELL_INFORMATION_SOURCE.OFFER_INFORMATION,
          UPSELL_INFORMATION_SOURCE.UPSELL_INFORMATION,
          UPSELL_INFORMATION_SOURCE.FROM_PRODUCT_ID,
          UPSELL_INFORMATION_SOURCE.TO_PRODUCT_ID,
          UPSELL_INFORMATION_SOURCE.SOURCE,
          UPSELL_INFORMATION_SOURCE.FROM_PRODUCT_BUNDLE_ID,
          UPSELL_INFORMATION_SOURCE.TO_PRODUCT_BUNDLE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_ESTORE_ORDER /*+createtype(P)*/
(
 ORDER_NUMBER,
 SHOPPER_ID,
 AUTH_ID,
 TRANSACTED_ITEM,
 PRODUCT_ALIAS,
 CHANNEL,
 REGISTERED,
 PRIMARY_PRIORITY_CODE,
 HISTORICAL_PRIORITY_CODE,
 ITEM_AMOUNT,
 ORDER_DATE,
 PRIMARY_ID,
 SECONDARY_ID,
 TAX_YEAR,
 PRODUCT_STATE,
 ORDER_TYPE,
 PLATFORM,
 MACHINE_ID,
 PRODUCT,
 PRODUCT_ENGINE,
 PREP_TYPE,
 TAX_RETURN_INDEX,
 MATT_DATE,
 NP,
 TAX_RETURN_ID,
 UPGRADE_PATH,
 ITERATION,
 CAMPAIGN,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT STG_ESTORE_ORDER.ORDER_NUMBER,
        STG_ESTORE_ORDER.SHOPPER_ID,
        STG_ESTORE_ORDER.AUTH_ID,
        STG_ESTORE_ORDER.TRANSACTED_ITEM,
        STG_ESTORE_ORDER.PRODUCT_ALIAS,
        STG_ESTORE_ORDER.CHANNEL,
        STG_ESTORE_ORDER.REGISTERED,
        STG_ESTORE_ORDER.PRIMARY_PRIORITY_CODE,
        STG_ESTORE_ORDER.HISTORICAL_PRIORITY_CODE,
        STG_ESTORE_ORDER.ITEM_AMOUNT,
        STG_ESTORE_ORDER.ORDER_DATE,
        STG_ESTORE_ORDER.PRIMARY_ID,
        STG_ESTORE_ORDER.SECONDARY_ID,
        STG_ESTORE_ORDER.TAX_YEAR,
        STG_ESTORE_ORDER.PRODUCT_STATE,
        STG_ESTORE_ORDER.ORDER_TYPE,
        STG_ESTORE_ORDER.PLATFORM,
        STG_ESTORE_ORDER.MACHINE_ID,
        STG_ESTORE_ORDER.PRODUCT,
        STG_ESTORE_ORDER.PRODUCT_ENGINE,
        STG_ESTORE_ORDER.PREP_TYPE,
        STG_ESTORE_ORDER.TAX_RETURN_INDEX,
        STG_ESTORE_ORDER.MATT_DATE,
        STG_ESTORE_ORDER.NP,
        STG_ESTORE_ORDER.TAX_RETURN_ID,
        STG_ESTORE_ORDER.UPGRADE_PATH,
        STG_ESTORE_ORDER.ITERATION,
        STG_ESTORE_ORDER.CAMPAIGN,
        STG_ESTORE_ORDER.BATCH_EVENT_ID,
        STG_ESTORE_ORDER.AUDIT_INS_BY
 FROM CTG_ANALYTICS_STG.STG_ESTORE_ORDER
 ORDER BY STG_ESTORE_ORDER.ORDER_NUMBER,
          STG_ESTORE_ORDER.SHOPPER_ID,
          STG_ESTORE_ORDER.AUTH_ID,
          STG_ESTORE_ORDER.TRANSACTED_ITEM,
          STG_ESTORE_ORDER.PRODUCT_ALIAS,
          STG_ESTORE_ORDER.CHANNEL,
          STG_ESTORE_ORDER.REGISTERED,
          STG_ESTORE_ORDER.PRIMARY_PRIORITY_CODE,
          STG_ESTORE_ORDER.HISTORICAL_PRIORITY_CODE,
          STG_ESTORE_ORDER.ITEM_AMOUNT,
          STG_ESTORE_ORDER.ORDER_DATE,
          STG_ESTORE_ORDER.PRIMARY_ID,
          STG_ESTORE_ORDER.SECONDARY_ID,
          STG_ESTORE_ORDER.TAX_YEAR,
          STG_ESTORE_ORDER.PRODUCT_STATE,
          STG_ESTORE_ORDER.ORDER_TYPE,
          STG_ESTORE_ORDER.PLATFORM,
          STG_ESTORE_ORDER.MACHINE_ID,
          STG_ESTORE_ORDER.PRODUCT,
          STG_ESTORE_ORDER.PRODUCT_ENGINE,
          STG_ESTORE_ORDER.PREP_TYPE,
          STG_ESTORE_ORDER.TAX_RETURN_INDEX,
          STG_ESTORE_ORDER.MATT_DATE,
          STG_ESTORE_ORDER.NP,
          STG_ESTORE_ORDER.TAX_RETURN_ID,
          STG_ESTORE_ORDER.UPGRADE_PATH,
          STG_ESTORE_ORDER.ITERATION,
          STG_ESTORE_ORDER.CAMPAIGN,
          STG_ESTORE_ORDER.BATCH_EVENT_ID,
          STG_ESTORE_ORDER.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_AB_TEST_RECIPE_QB /*+createtype(P)*/
(
 QB_RECIPE_ID,
 RECIPE_IN_BEACON,
 RECIPE_NAME,
 TEST_NAME,
 TEST_DESCRIPTION,
 TEST_BASE_TYPE,
 QB_TEST_RECORD_ID,
 RECIPE_HYPOTHESIS_DESCRIPTION,
 TEST_HYPOTHESIS_DESCRIPTION,
 TEST_START_TIMESTAMP,
 TEST_END_TIMESTAMP,
 PRODUCT_MANAGER_NAME,
 ANALYST_NAME,
 EXPERIENCE_DETAIL_LOCATION,
 EXPERIENCE_DETAIL_VALUE
)
AS
 SELECT STG_AB_TEST_RECIPE_QB.QB_RECIPE_ID,
        STG_AB_TEST_RECIPE_QB.RECIPE_IN_BEACON,
        STG_AB_TEST_RECIPE_QB.RECIPE_NAME,
        STG_AB_TEST_RECIPE_QB.TEST_NAME,
        STG_AB_TEST_RECIPE_QB.TEST_DESCRIPTION,
        STG_AB_TEST_RECIPE_QB.TEST_BASE_TYPE,
        STG_AB_TEST_RECIPE_QB.QB_TEST_RECORD_ID,
        STG_AB_TEST_RECIPE_QB.RECIPE_HYPOTHESIS_DESCRIPTION,
        STG_AB_TEST_RECIPE_QB.TEST_HYPOTHESIS_DESCRIPTION,
        STG_AB_TEST_RECIPE_QB.TEST_START_TIMESTAMP,
        STG_AB_TEST_RECIPE_QB.TEST_END_TIMESTAMP,
        STG_AB_TEST_RECIPE_QB.PRODUCT_MANAGER_NAME,
        STG_AB_TEST_RECIPE_QB.ANALYST_NAME,
        STG_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_LOCATION,
        STG_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_VALUE
 FROM CTG_ANALYTICS_STG.STG_AB_TEST_RECIPE_QB
 ORDER BY STG_AB_TEST_RECIPE_QB.QB_RECIPE_ID,
          STG_AB_TEST_RECIPE_QB.RECIPE_IN_BEACON,
          STG_AB_TEST_RECIPE_QB.RECIPE_NAME,
          STG_AB_TEST_RECIPE_QB.TEST_NAME,
          STG_AB_TEST_RECIPE_QB.TEST_DESCRIPTION,
          STG_AB_TEST_RECIPE_QB.TEST_BASE_TYPE,
          STG_AB_TEST_RECIPE_QB.QB_TEST_RECORD_ID,
          STG_AB_TEST_RECIPE_QB.RECIPE_HYPOTHESIS_DESCRIPTION,
          STG_AB_TEST_RECIPE_QB.TEST_HYPOTHESIS_DESCRIPTION,
          STG_AB_TEST_RECIPE_QB.TEST_START_TIMESTAMP,
          STG_AB_TEST_RECIPE_QB.TEST_END_TIMESTAMP,
          STG_AB_TEST_RECIPE_QB.PRODUCT_MANAGER_NAME,
          STG_AB_TEST_RECIPE_QB.ANALYST_NAME,
          STG_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_LOCATION,
          STG_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_VALUE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_AB_TEST_RECIPE_QB /*+createtype(P)*/
(
 QB_RECIPE_ID,
 RECIPE_IN_BEACON,
 RECIPE_NAME,
 TEST_NAME,
 TEST_DESCRIPTION,
 TEST_BASE_TYPE,
 QB_TEST_RECORD_ID,
 RECIPE_HYPOTHESIS_DESCRIPTION,
 TEST_HYPOTHESIS_DESCRIPTION,
 TEST_START_TIMESTAMP,
 TEST_END_TIMESTAMP,
 PRODUCT_MANAGER_NAME,
 ANALYST_NAME,
 EXPERIENCE_DETAIL_LOCATION,
 EXPERIENCE_DETAIL_VALUE,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_AB_TEST_RECIPE_QB.QB_RECIPE_ID,
        DIM_AB_TEST_RECIPE_QB.RECIPE_IN_BEACON,
        DIM_AB_TEST_RECIPE_QB.RECIPE_NAME,
        DIM_AB_TEST_RECIPE_QB.TEST_NAME,
        DIM_AB_TEST_RECIPE_QB.TEST_DESCRIPTION,
        DIM_AB_TEST_RECIPE_QB.TEST_BASE_TYPE,
        DIM_AB_TEST_RECIPE_QB.QB_TEST_RECORD_ID,
        DIM_AB_TEST_RECIPE_QB.RECIPE_HYPOTHESIS_DESCRIPTION,
        DIM_AB_TEST_RECIPE_QB.TEST_HYPOTHESIS_DESCRIPTION,
        DIM_AB_TEST_RECIPE_QB.TEST_START_TIMESTAMP,
        DIM_AB_TEST_RECIPE_QB.TEST_END_TIMESTAMP,
        DIM_AB_TEST_RECIPE_QB.PRODUCT_MANAGER_NAME,
        DIM_AB_TEST_RECIPE_QB.ANALYST_NAME,
        DIM_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_LOCATION,
        DIM_AB_TEST_RECIPE_QB.EXPERIENCE_DETAIL_VALUE,
        DIM_AB_TEST_RECIPE_QB.CREATED_TIMESTAMP,
        DIM_AB_TEST_RECIPE_QB.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.DIM_AB_TEST_RECIPE_QB
 ORDER BY DIM_AB_TEST_RECIPE_QB.QB_RECIPE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION /*+createtype(P)*/
(
 AUTH_ID_CREATION_ID,
 AUTH_ID,
 AUTH_ID_CREATION_TIMESTAMP,
 SERVICE_ID,
 REALM,
 INTUIT_TRANSACTION_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_AUTH_ID_CREATION.AUTH_ID_CREATION_ID,
        TRN_AUTH_ID_CREATION.AUTH_ID,
        TRN_AUTH_ID_CREATION.AUTH_ID_CREATION_TIMESTAMP,
        TRN_AUTH_ID_CREATION.SERVICE_ID,
        TRN_AUTH_ID_CREATION.REALM,
        TRN_AUTH_ID_CREATION.INTUIT_TRANSACTION_ID,
        TRN_AUTH_ID_CREATION.BATCH_EVENT_ID,
        TRN_AUTH_ID_CREATION.CREATED_TIMESTAMP,
        TRN_AUTH_ID_CREATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_AUTH_ID_CREATION
 ORDER BY TRN_AUTH_ID_CREATION.AUTH_ID
SEGMENTED BY hash(TRN_AUTH_ID_CREATION.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_BUNDLE_ROLLUP_QB /*+createtype(P)*/
(
 PRODUCT_ALIAS_CODE,
 BUNDLE_NAME,
 SUB_BUNDLE_NAME,
 TAX_YEAR
)
AS
 SELECT DIM_BUNDLE_ROLLUP_QB.PRODUCT_ALIAS_CODE,
        DIM_BUNDLE_ROLLUP_QB.BUNDLE_NAME,
        DIM_BUNDLE_ROLLUP_QB.SUB_BUNDLE_NAME,
        DIM_BUNDLE_ROLLUP_QB.TAX_YEAR
 FROM CTG_ANALYTICS_SRC.DIM_BUNDLE_ROLLUP_QB
 ORDER BY DIM_BUNDLE_ROLLUP_QB.PRODUCT_ALIAS_CODE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_DIM_BUNDLE_ROLLUP /*+createtype(P)*/
(
 BUNDLE_NAME,
 SUB_BUNDLE_NAME,
 PRODUCT_ALIAS_CODE,
 TAX_YEAR
)
AS
 SELECT STG_DIM_BUNDLE_ROLLUP.BUNDLE_NAME,
        STG_DIM_BUNDLE_ROLLUP.SUB_BUNDLE_NAME,
        STG_DIM_BUNDLE_ROLLUP.PRODUCT_ALIAS_CODE,
        STG_DIM_BUNDLE_ROLLUP.TAX_YEAR
 FROM CTG_ANALYTICS_STG.STG_DIM_BUNDLE_ROLLUP
 ORDER BY STG_DIM_BUNDLE_ROLLUP.PRODUCT_ALIAS_CODE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_MARKETING_FORECAST_QB /*+createtype(P)*/
(
 FCST_DATE,
 CORE_FLAG,
 MOBILE_APP_FLAG,
 FCST_TYPE,
 FCST_CATEGORY,
 TRAFFIC,
 NEAUTHS,
 UNITS,
 FCST_VERSION,
 TRAFFIC_MULTIPLIER,
 NEAUTHS_MULTIPLIER,
 UNITS_MULTIPLIER
)
AS
 SELECT DIM_MARKETING_FORECAST_QB.FCST_DATE,
        DIM_MARKETING_FORECAST_QB.CORE_FLAG,
        DIM_MARKETING_FORECAST_QB.MOBILE_APP_FLAG,
        DIM_MARKETING_FORECAST_QB.FCST_TYPE,
        DIM_MARKETING_FORECAST_QB.FCST_CATEGORY,
        DIM_MARKETING_FORECAST_QB.TRAFFIC,
        DIM_MARKETING_FORECAST_QB.NEAUTHS,
        DIM_MARKETING_FORECAST_QB.UNITS,
        DIM_MARKETING_FORECAST_QB.FCST_VERSION,
        DIM_MARKETING_FORECAST_QB.TRAFFIC_MULTIPLIER,
        DIM_MARKETING_FORECAST_QB.NEAUTHS_MULTIPLIER,
        DIM_MARKETING_FORECAST_QB.UNITS_MULTIPLIER
 FROM CTG_ANALYTICS_SRC.DIM_MARKETING_FORECAST_QB
 ORDER BY DIM_MARKETING_FORECAST_QB.FCST_DATE,
          DIM_MARKETING_FORECAST_QB.CORE_FLAG,
          DIM_MARKETING_FORECAST_QB.MOBILE_APP_FLAG,
          DIM_MARKETING_FORECAST_QB.FCST_TYPE,
          DIM_MARKETING_FORECAST_QB.FCST_CATEGORY,
          DIM_MARKETING_FORECAST_QB.TRAFFIC,
          DIM_MARKETING_FORECAST_QB.NEAUTHS,
          DIM_MARKETING_FORECAST_QB.UNITS,
          DIM_MARKETING_FORECAST_QB.FCST_VERSION,
          DIM_MARKETING_FORECAST_QB.TRAFFIC_MULTIPLIER,
          DIM_MARKETING_FORECAST_QB.NEAUTHS_MULTIPLIER,
          DIM_MARKETING_FORECAST_QB.UNITS_MULTIPLIER
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_COST_LINK_CONNECTOR /*+createtype(P)*/
(
 CAMPAIGN_DATE,
 AFF_SOURCE,
 AFF_PID,
 AFF_CID,
 AFF_NAME,
 AFF_CLICKS,
 CAMPAIGN_COST_COMMISSION,
 CAMPAIGN_COST_NETWORK,
 CAMPAIGN_COST_BONUS,
 CAMPAIGN_COST_ADJUSTMENT,
 AFF_TTO_AUTH_NEW,
 AFF_TTO_SALES,
 AFF_REVENUE,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_COST_LINK_CONNECTOR.CAMPAIGN_DATE,
        TRN_COST_LINK_CONNECTOR.AFF_SOURCE,
        TRN_COST_LINK_CONNECTOR.AFF_PID,
        TRN_COST_LINK_CONNECTOR.AFF_CID,
        TRN_COST_LINK_CONNECTOR.AFF_NAME,
        TRN_COST_LINK_CONNECTOR.AFF_CLICKS,
        TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_COMMISSION,
        TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_NETWORK,
        TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_BONUS,
        TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_ADJUSTMENT,
        TRN_COST_LINK_CONNECTOR.AFF_TTO_AUTH_NEW,
        TRN_COST_LINK_CONNECTOR.AFF_TTO_SALES,
        TRN_COST_LINK_CONNECTOR.AFF_REVENUE,
        TRN_COST_LINK_CONNECTOR.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_COST_LINK_CONNECTOR
 ORDER BY TRN_COST_LINK_CONNECTOR.CAMPAIGN_DATE,
          TRN_COST_LINK_CONNECTOR.AFF_SOURCE,
          TRN_COST_LINK_CONNECTOR.AFF_PID,
          TRN_COST_LINK_CONNECTOR.AFF_CID,
          TRN_COST_LINK_CONNECTOR.AFF_NAME,
          TRN_COST_LINK_CONNECTOR.AFF_CLICKS,
          TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_COMMISSION,
          TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_NETWORK,
          TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_BONUS,
          TRN_COST_LINK_CONNECTOR.CAMPAIGN_COST_ADJUSTMENT,
          TRN_COST_LINK_CONNECTOR.AFF_TTO_AUTH_NEW,
          TRN_COST_LINK_CONNECTOR.AFF_TTO_SALES,
          TRN_COST_LINK_CONNECTOR.AFF_REVENUE,
          TRN_COST_LINK_CONNECTOR.BATCH_EVENT_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_TILE_QB /*+createtype(P)*/
(
 TILE_NAME,
 SKU_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TILE_QB.TILE_NAME,
        DIM_TILE_QB.SKU_ID,
        DIM_TILE_QB.CREATED_TIMESTAMP,
        DIM_TILE_QB.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.DIM_TILE_QB
 ORDER BY DIM_TILE_QB.TILE_NAME
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TILE_QB /*+createtype(P)*/
(
 SKU_ID,
 TILE_NAME
)
AS
 SELECT STG_TILE_QB.SKU_ID,
        STG_TILE_QB.TILE_NAME
 FROM CTG_ANALYTICS_STG.STG_TILE_QB
 ORDER BY STG_TILE_QB.SKU_ID,
          STG_TILE_QB.TILE_NAME
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_ACCEPTED_RETURN /*+createtype(P)*/
(
 EF_PAYMENTS_KEY,
 PRIMARY_FILER_ID,
 SECONDARY_FILER_ID,
 TAX_YEAR,
 BANK_RTN,
 FILING_TYPE,
 ENGINE_CODE,
 ACCEPTED_TIMESTAMP,
 AMOUNT,
 PAYMENT_METHOD,
 PAYMENT_DESCRIPTION,
 CREDIT_FOR_SALE_PRIORITY_CODE,
 BATCH_EVENT_ID
)
AS
 SELECT STG_ACCEPTED_RETURN.EF_PAYMENTS_KEY,
        STG_ACCEPTED_RETURN.PRIMARY_FILER_ID,
        STG_ACCEPTED_RETURN.SECONDARY_FILER_ID,
        STG_ACCEPTED_RETURN.TAX_YEAR,
        STG_ACCEPTED_RETURN.BANK_RTN,
        STG_ACCEPTED_RETURN.FILING_TYPE,
        STG_ACCEPTED_RETURN.ENGINE_CODE,
        STG_ACCEPTED_RETURN.ACCEPTED_TIMESTAMP,
        STG_ACCEPTED_RETURN.AMOUNT,
        STG_ACCEPTED_RETURN.PAYMENT_METHOD,
        STG_ACCEPTED_RETURN.PAYMENT_DESCRIPTION,
        STG_ACCEPTED_RETURN.CREDIT_FOR_SALE_PRIORITY_CODE,
        STG_ACCEPTED_RETURN.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_ACCEPTED_RETURN
 ORDER BY STG_ACCEPTED_RETURN.PRIMARY_FILER_ID,
          STG_ACCEPTED_RETURN.TAX_YEAR
SEGMENTED BY hash(STG_ACCEPTED_RETURN.PRIMARY_FILER_ID, STG_ACCEPTED_RETURN.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_COST_CAMELOT /*+createtype(P)*/
(
 CAMPAIGN_DATE,
 CID,
 COST,
 CLICKS,
 IMPRESSIONS,
 CREATED_TIMESTAMP,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT STG_COST_CAMELOT.CAMPAIGN_DATE,
        STG_COST_CAMELOT.CID,
        STG_COST_CAMELOT.COST,
        STG_COST_CAMELOT.CLICKS,
        STG_COST_CAMELOT.IMPRESSIONS,
        STG_COST_CAMELOT.CREATED_TIMESTAMP,
        STG_COST_CAMELOT.BATCH_EVENT_ID,
        STG_COST_CAMELOT.AUDIT_INS_BY
 FROM CTG_ANALYTICS_STG.STG_COST_CAMELOT
 ORDER BY STG_COST_CAMELOT.CAMPAIGN_DATE,
          STG_COST_CAMELOT.CID,
          STG_COST_CAMELOT.COST,
          STG_COST_CAMELOT.CLICKS,
          STG_COST_CAMELOT.IMPRESSIONS,
          STG_COST_CAMELOT.CREATED_TIMESTAMP,
          STG_COST_CAMELOT.BATCH_EVENT_ID,
          STG_COST_CAMELOT.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_FORM_IMPORT /*+createtype(P)*/
(
 CREATION_TIMESTAMP,
 PRODUCTION_TEST_FLAG,
 EVENTID,
 CORRELATION_ID,
 YEAR,
 OPERATION,
 SUCCEEDED,
 CLIENT_APP,
 CLIENT_SKU,
 CLIENT_VERSION,
 PROVIDER_ID,
 PARTNER_ID,
 PARTNER_STATUS_CODE,
 OFX_STATUS,
 OFX_MESSAGE,
 AUTHID,
 ALTERNATE_ID,
 USER_ID,
 EIN,
 EMPLOYER_EMAIL,
 DS_HTTP_STATUS,
 DS_ERROR_CODE,
 DS_ERROR_DETAILS,
 DS_DOC_TYPE,
 DS_DOC_ID,
 ORIGIN,
 ELAPSED_MILLISECS,
 SERVICE,
 DEVICE_ID,
 ERO_ID,
 SUB_ENTITY_ID,
 SUB_ENTITY_NAME,
 OFX_VALIDATION,
 COST_BASIS_FLAG,
 FIRST_OFX_ERROR_CODE,
 FIRST_OFX_ERROR_TEXT,
 LAST_OFX_ERROR_CODE,
 LAST_OFX_ERROR_TEXT,
 DOCUMENT_COUNT,
 CHECKSUM,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT STG_FORM_IMPORT.CREATION_TIMESTAMP,
        STG_FORM_IMPORT.PRODUCTION_TEST_FLAG,
        STG_FORM_IMPORT.EVENTID,
        STG_FORM_IMPORT.CORRELATION_ID,
        STG_FORM_IMPORT.YEAR,
        STG_FORM_IMPORT.OPERATION,
        STG_FORM_IMPORT.SUCCEEDED,
        STG_FORM_IMPORT.CLIENT_APP,
        STG_FORM_IMPORT.CLIENT_SKU,
        STG_FORM_IMPORT.CLIENT_VERSION,
        STG_FORM_IMPORT.PROVIDER_ID,
        STG_FORM_IMPORT.PARTNER_ID,
        STG_FORM_IMPORT.PARTNER_STATUS_CODE,
        STG_FORM_IMPORT.OFX_STATUS,
        STG_FORM_IMPORT.OFX_MESSAGE,
        STG_FORM_IMPORT.AUTHID,
        STG_FORM_IMPORT.ALTERNATE_ID,
        STG_FORM_IMPORT.USER_ID,
        STG_FORM_IMPORT.EIN,
        STG_FORM_IMPORT.EMPLOYER_EMAIL,
        STG_FORM_IMPORT.DS_HTTP_STATUS,
        STG_FORM_IMPORT.DS_ERROR_CODE,
        STG_FORM_IMPORT.DS_ERROR_DETAILS,
        STG_FORM_IMPORT.DS_DOC_TYPE,
        STG_FORM_IMPORT.DS_DOC_ID,
        STG_FORM_IMPORT.ORIGIN,
        STG_FORM_IMPORT.ELAPSED_MILLISECS,
        STG_FORM_IMPORT.SERVICE,
        STG_FORM_IMPORT.DEVICE_ID,
        STG_FORM_IMPORT.ERO_ID,
        STG_FORM_IMPORT.SUB_ENTITY_ID,
        STG_FORM_IMPORT.SUB_ENTITY_NAME,
        STG_FORM_IMPORT.OFX_VALIDATION,
        STG_FORM_IMPORT.COST_BASIS_FLAG,
        STG_FORM_IMPORT.FIRST_OFX_ERROR_CODE,
        STG_FORM_IMPORT.FIRST_OFX_ERROR_TEXT,
        STG_FORM_IMPORT.LAST_OFX_ERROR_CODE,
        STG_FORM_IMPORT.LAST_OFX_ERROR_TEXT,
        STG_FORM_IMPORT.DOCUMENT_COUNT,
        STG_FORM_IMPORT.CHECKSUM,
        STG_FORM_IMPORT.MATT_DATE,
        STG_FORM_IMPORT.BATCH_EVENT_ID,
        STG_FORM_IMPORT.AUDIT_INS_BY
 FROM CTG_ANALYTICS_STG.STG_FORM_IMPORT
 ORDER BY STG_FORM_IMPORT.CREATION_TIMESTAMP,
          STG_FORM_IMPORT.PRODUCTION_TEST_FLAG,
          STG_FORM_IMPORT.EVENTID,
          STG_FORM_IMPORT.CORRELATION_ID,
          STG_FORM_IMPORT.YEAR,
          STG_FORM_IMPORT.OPERATION,
          STG_FORM_IMPORT.SUCCEEDED,
          STG_FORM_IMPORT.CLIENT_APP,
          STG_FORM_IMPORT.CLIENT_SKU,
          STG_FORM_IMPORT.CLIENT_VERSION,
          STG_FORM_IMPORT.PROVIDER_ID,
          STG_FORM_IMPORT.PARTNER_ID,
          STG_FORM_IMPORT.PARTNER_STATUS_CODE,
          STG_FORM_IMPORT.OFX_STATUS,
          STG_FORM_IMPORT.OFX_MESSAGE,
          STG_FORM_IMPORT.AUTHID,
          STG_FORM_IMPORT.ALTERNATE_ID,
          STG_FORM_IMPORT.USER_ID,
          STG_FORM_IMPORT.EIN,
          STG_FORM_IMPORT.EMPLOYER_EMAIL,
          STG_FORM_IMPORT.DS_HTTP_STATUS,
          STG_FORM_IMPORT.DS_ERROR_CODE,
          STG_FORM_IMPORT.DS_ERROR_DETAILS,
          STG_FORM_IMPORT.DS_DOC_TYPE,
          STG_FORM_IMPORT.DS_DOC_ID,
          STG_FORM_IMPORT.ORIGIN,
          STG_FORM_IMPORT.ELAPSED_MILLISECS,
          STG_FORM_IMPORT.SERVICE,
          STG_FORM_IMPORT.DEVICE_ID,
          STG_FORM_IMPORT.ERO_ID,
          STG_FORM_IMPORT.SUB_ENTITY_ID,
          STG_FORM_IMPORT.SUB_ENTITY_NAME,
          STG_FORM_IMPORT.OFX_VALIDATION,
          STG_FORM_IMPORT.COST_BASIS_FLAG,
          STG_FORM_IMPORT.FIRST_OFX_ERROR_CODE,
          STG_FORM_IMPORT.FIRST_OFX_ERROR_TEXT,
          STG_FORM_IMPORT.LAST_OFX_ERROR_CODE,
          STG_FORM_IMPORT.LAST_OFX_ERROR_TEXT,
          STG_FORM_IMPORT.DOCUMENT_COUNT,
          STG_FORM_IMPORT.CHECKSUM,
          STG_FORM_IMPORT.MATT_DATE,
          STG_FORM_IMPORT.BATCH_EVENT_ID,
          STG_FORM_IMPORT.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_COST_CAMELOT /*+createtype(P)*/
(
 CAMPAIGN_DATE,
 CID,
 COST,
 CLICKS,
 IMPRESSIONS,
 CREATED_TIMESTAMP,
 BATCH_EVENT_ID,
 UPDATED_TIMESTAMP,
 AUDIT_INS_BY
)
AS
 SELECT TRN_COST_CAMELOT.CAMPAIGN_DATE,
        TRN_COST_CAMELOT.CID,
        TRN_COST_CAMELOT.COST,
        TRN_COST_CAMELOT.CLICKS,
        TRN_COST_CAMELOT.IMPRESSIONS,
        TRN_COST_CAMELOT.CREATED_TIMESTAMP,
        TRN_COST_CAMELOT.BATCH_EVENT_ID,
        TRN_COST_CAMELOT.UPDATED_TIMESTAMP,
        TRN_COST_CAMELOT.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_COST_CAMELOT
 ORDER BY TRN_COST_CAMELOT.CAMPAIGN_DATE,
          TRN_COST_CAMELOT.CID,
          TRN_COST_CAMELOT.COST,
          TRN_COST_CAMELOT.CLICKS,
          TRN_COST_CAMELOT.IMPRESSIONS,
          TRN_COST_CAMELOT.CREATED_TIMESTAMP,
          TRN_COST_CAMELOT.BATCH_EVENT_ID,
          TRN_COST_CAMELOT.UPDATED_TIMESTAMP,
          TRN_COST_CAMELOT.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_COST_COMMISSION_JUNCTION /*+createtype(P)*/
(
 POSTING_DATE,
 EVENT_DATE,
 ID,
 ACTION_NAME,
 TYPE,
 CORRELATION_BASIS,
 STATUS,
 CORRECTED,
 SALE_AMOUNT,
 ORDER_DISCOUNT,
 PUBLISHER_COMMISSION,
 CJ_FEE,
 PUBLISHER_ID,
 PUBLISHER_NAME,
 WEBSITE_ID,
 WEBSITE_NAME,
 LINK_ID,
 ORDER_ID,
 CLICK_DATE,
 ACTION_ID,
 AD_OWNER_AD_ID,
 CREATED_TIMESTAMP,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_COST_COMMISSION_JUNCTION.POSTING_DATE,
        TRN_COST_COMMISSION_JUNCTION.EVENT_DATE,
        TRN_COST_COMMISSION_JUNCTION.ID,
        TRN_COST_COMMISSION_JUNCTION.ACTION_NAME,
        TRN_COST_COMMISSION_JUNCTION.TYPE,
        TRN_COST_COMMISSION_JUNCTION.CORRELATION_BASIS,
        TRN_COST_COMMISSION_JUNCTION.STATUS,
        TRN_COST_COMMISSION_JUNCTION.CORRECTED,
        TRN_COST_COMMISSION_JUNCTION.SALE_AMOUNT,
        TRN_COST_COMMISSION_JUNCTION.ORDER_DISCOUNT,
        TRN_COST_COMMISSION_JUNCTION.PUBLISHER_COMMISSION,
        TRN_COST_COMMISSION_JUNCTION.CJ_FEE,
        TRN_COST_COMMISSION_JUNCTION.PUBLISHER_ID,
        TRN_COST_COMMISSION_JUNCTION.PUBLISHER_NAME,
        TRN_COST_COMMISSION_JUNCTION.WEBSITE_ID,
        TRN_COST_COMMISSION_JUNCTION.WEBSITE_NAME,
        TRN_COST_COMMISSION_JUNCTION.LINK_ID,
        TRN_COST_COMMISSION_JUNCTION.ORDER_ID,
        TRN_COST_COMMISSION_JUNCTION.CLICK_DATE,
        TRN_COST_COMMISSION_JUNCTION.ACTION_ID,
        TRN_COST_COMMISSION_JUNCTION.AD_OWNER_AD_ID,
        TRN_COST_COMMISSION_JUNCTION.CREATED_TIMESTAMP,
        TRN_COST_COMMISSION_JUNCTION.BATCH_EVENT_ID,
        TRN_COST_COMMISSION_JUNCTION.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_COST_COMMISSION_JUNCTION
 ORDER BY TRN_COST_COMMISSION_JUNCTION.POSTING_DATE,
          TRN_COST_COMMISSION_JUNCTION.EVENT_DATE,
          TRN_COST_COMMISSION_JUNCTION.ID,
          TRN_COST_COMMISSION_JUNCTION.ACTION_NAME,
          TRN_COST_COMMISSION_JUNCTION.TYPE,
          TRN_COST_COMMISSION_JUNCTION.CORRELATION_BASIS,
          TRN_COST_COMMISSION_JUNCTION.STATUS,
          TRN_COST_COMMISSION_JUNCTION.CORRECTED,
          TRN_COST_COMMISSION_JUNCTION.SALE_AMOUNT,
          TRN_COST_COMMISSION_JUNCTION.ORDER_DISCOUNT,
          TRN_COST_COMMISSION_JUNCTION.PUBLISHER_COMMISSION,
          TRN_COST_COMMISSION_JUNCTION.CJ_FEE,
          TRN_COST_COMMISSION_JUNCTION.PUBLISHER_ID,
          TRN_COST_COMMISSION_JUNCTION.PUBLISHER_NAME,
          TRN_COST_COMMISSION_JUNCTION.WEBSITE_ID,
          TRN_COST_COMMISSION_JUNCTION.WEBSITE_NAME,
          TRN_COST_COMMISSION_JUNCTION.LINK_ID,
          TRN_COST_COMMISSION_JUNCTION.ORDER_ID,
          TRN_COST_COMMISSION_JUNCTION.CLICK_DATE,
          TRN_COST_COMMISSION_JUNCTION.ACTION_ID,
          TRN_COST_COMMISSION_JUNCTION.AD_OWNER_AD_ID,
          TRN_COST_COMMISSION_JUNCTION.CREATED_TIMESTAMP,
          TRN_COST_COMMISSION_JUNCTION.BATCH_EVENT_ID,
          TRN_COST_COMMISSION_JUNCTION.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_COST_AKQA /*+createtype(P)*/
(
 CAMPAIGN_DATE,
 CID,
 SRID,
 PPC_COST,
 PPC_CLICKS,
 PPC_IMPRESSIONS,
 PPC_AVG_POSITION,
 DEVICE_TYPE,
 CREATED_TIMESTAMP,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_COST_AKQA.CAMPAIGN_DATE,
        TRN_COST_AKQA.CID,
        TRN_COST_AKQA.SRID,
        TRN_COST_AKQA.PPC_COST,
        TRN_COST_AKQA.PPC_CLICKS,
        TRN_COST_AKQA.PPC_IMPRESSIONS,
        TRN_COST_AKQA.PPC_AVG_POSITION,
        TRN_COST_AKQA.DEVICE_TYPE,
        TRN_COST_AKQA.CREATED_TIMESTAMP,
        TRN_COST_AKQA.BATCH_EVENT_ID,
        TRN_COST_AKQA.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_COST_AKQA
 ORDER BY TRN_COST_AKQA.CAMPAIGN_DATE,
          TRN_COST_AKQA.CID,
          TRN_COST_AKQA.SRID,
          TRN_COST_AKQA.PPC_COST,
          TRN_COST_AKQA.PPC_CLICKS,
          TRN_COST_AKQA.PPC_IMPRESSIONS,
          TRN_COST_AKQA.PPC_AVG_POSITION,
          TRN_COST_AKQA.DEVICE_TYPE,
          TRN_COST_AKQA.CREATED_TIMESTAMP,
          TRN_COST_AKQA.BATCH_EVENT_ID,
          TRN_COST_AKQA.AUDIT_INS_BY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_PRODUCT_CODE /*+createtype(P)*/
(
 ITEM_ALIAS_CODE,
 INTUIT_ITEM_CODE,
 PRODUCT_DESCRIPTION,
 PRODUCT_FAMILY_DESCRIPTION,
 PRODUCT_EDITION_DESCRIPTION,
 PRODUCT_VERSION_CODE,
 PRODUCT_ROLLUP
)
AS
 SELECT STG_PRODUCT_CODE.ITEM_ALIAS_CODE,
        STG_PRODUCT_CODE.INTUIT_ITEM_CODE,
        STG_PRODUCT_CODE.PRODUCT_DESCRIPTION,
        STG_PRODUCT_CODE.PRODUCT_FAMILY_DESCRIPTION,
        STG_PRODUCT_CODE.PRODUCT_EDITION_DESCRIPTION,
        STG_PRODUCT_CODE.PRODUCT_VERSION_CODE,
        STG_PRODUCT_CODE.PRODUCT_ROLLUP
 FROM CTG_ANALYTICS_STG.STG_PRODUCT_CODE
 ORDER BY STG_PRODUCT_CODE.ITEM_ALIAS_CODE,
          STG_PRODUCT_CODE.INTUIT_ITEM_CODE,
          STG_PRODUCT_CODE.PRODUCT_DESCRIPTION,
          STG_PRODUCT_CODE.PRODUCT_FAMILY_DESCRIPTION,
          STG_PRODUCT_CODE.PRODUCT_EDITION_DESCRIPTION,
          STG_PRODUCT_CODE.PRODUCT_VERSION_CODE,
          STG_PRODUCT_CODE.PRODUCT_ROLLUP
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_PRODUCT_QB /*+createtype(P)*/
(
 INTUIT_ITEM_CODE,
 ITEM_ALIAS_CODE,
 PRODUCT_DESCRIPTION,
 PRODUCT_FAMILY_DESCRIPTION,
 PRODUCT_EDITION_DESCRIPTION,
 PRODUCT_VERSION_CODE,
 PRODUCT_ROLLUP
)
AS
 SELECT DIM_PRODUCT_QB.INTUIT_ITEM_CODE,
        DIM_PRODUCT_QB.ITEM_ALIAS_CODE,
        DIM_PRODUCT_QB.PRODUCT_DESCRIPTION,
        DIM_PRODUCT_QB.PRODUCT_FAMILY_DESCRIPTION,
        DIM_PRODUCT_QB.PRODUCT_EDITION_DESCRIPTION,
        DIM_PRODUCT_QB.PRODUCT_VERSION_CODE,
        DIM_PRODUCT_QB.PRODUCT_ROLLUP
 FROM CTG_ANALYTICS_SRC.DIM_PRODUCT_QB
 ORDER BY DIM_PRODUCT_QB.INTUIT_ITEM_CODE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_UPSELL_AUTH_ID_EXCLUSION /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_UPSELL_AUTH_ID_EXCLUSION.AUTH_ID,
        TRN_UPSELL_AUTH_ID_EXCLUSION.TAX_YEAR,
        TRN_UPSELL_AUTH_ID_EXCLUSION.BATCH_EVENT_ID,
        TRN_UPSELL_AUTH_ID_EXCLUSION.CREATED_TIMESTAMP,
        TRN_UPSELL_AUTH_ID_EXCLUSION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_UPSELL_AUTH_ID_EXCLUSION
 ORDER BY TRN_UPSELL_AUTH_ID_EXCLUSION.AUTH_ID
SEGMENTED BY hash(TRN_UPSELL_AUTH_ID_EXCLUSION.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_UPSELL_INFORMATION_EXCLUSION /*+createtype(P)*/
(
 UPSELL_INFORMATION,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_UPSELL_INFORMATION_EXCLUSION.UPSELL_INFORMATION,
        TRN_UPSELL_INFORMATION_EXCLUSION.TAX_YEAR,
        TRN_UPSELL_INFORMATION_EXCLUSION.BATCH_EVENT_ID,
        TRN_UPSELL_INFORMATION_EXCLUSION.CREATED_TIMESTAMP,
        TRN_UPSELL_INFORMATION_EXCLUSION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_UPSELL_INFORMATION_EXCLUSION
 ORDER BY TRN_UPSELL_INFORMATION_EXCLUSION.UPSELL_INFORMATION,
          TRN_UPSELL_INFORMATION_EXCLUSION.TAX_YEAR
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_EFS_FILING_STATUS_CHANGE /*+createtype(P)*/
(
 CHANGE_ID,
 TAX_YEAR,
 PRIMARY_ID,
 SECONDARY_ID,
 FILING_ID,
 FILING_TYPE,
 STATUS_TYPE,
 TAX_DATE_ID,
 TIMESTAMP_DTM,
 AUTH_ID
)
AS
 SELECT STG_EFS_FILING_STATUS_CHANGE.CHANGE_ID,
        STG_EFS_FILING_STATUS_CHANGE.TAX_YEAR,
        STG_EFS_FILING_STATUS_CHANGE.PRIMARY_ID AS PRIMARY_FILER_ID,
        STG_EFS_FILING_STATUS_CHANGE.SECONDARY_ID AS SECONDARY_FILER_ID,
        STG_EFS_FILING_STATUS_CHANGE.FILING_ID,
        STG_EFS_FILING_STATUS_CHANGE.FILING_TYPE,
        STG_EFS_FILING_STATUS_CHANGE.STATUS_TYPE,
        STG_EFS_FILING_STATUS_CHANGE.TAX_DATE_ID,
        STG_EFS_FILING_STATUS_CHANGE.TIMESTAMP_DTM,
        STG_EFS_FILING_STATUS_CHANGE.AUTH_ID
 FROM CTG_ANALYTICS_STG.STG_EFS_FILING_STATUS_CHANGE
 ORDER BY STG_EFS_FILING_STATUS_CHANGE.CHANGE_ID
SEGMENTED BY hash(STG_EFS_FILING_STATUS_CHANGE.CHANGE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_CUSTOMER_REVENUE_TABLE /*+createtype(P)*/
(
 CUSTOMER_KEY,
 AUTH_ID,
 TAX_YEAR ENCODING RLE,
 TOTAL_REVENUE,
 FEDERAL_REVENUE,
 STATE_REVENUE,
 STATE_ATTACH_COUNT,
 MINDBENDER_REVENUE,
 MINDBENDER_FLAG ENCODING RLE,
 CA_REFUND_TRANSFER_REVENUE,
 CA_REFUND_TRANSFER_FLAG ENCODING RLE,
 NON_CA_REFUND_TRANSFER_REVENUE,
 NON_CA_REFUND_TRANSFER_FLAG ENCODING RLE,
 REFUND_TRANSFER_REVENUE,
 REFUND_TRANSFER_FLAG ENCODING RLE,
 CA_AUDIT_DEFENSE_REVENUE,
 CA_AUDIT_DEFENSE_FLAG ENCODING RLE,
 NON_CA_AUDIT_DEFENSE_REVENUE,
 NON_CA_AUDIT_DEFENSE_FLAG ENCODING RLE,
 AUDIT_DEFENSE_REVENUE,
 AUDIT_DEFENSE_FLAG ENCODING RLE,
 CA_MAX_REVENUE,
 CA_MAX_FLAG ENCODING RLE,
 NON_CA_MAX_REVENUE,
 NON_CA_MAX_FLAG ENCODING RLE,
 MAX_REVENUE,
 MAX_FLAG ENCODING RLE,
 PS_REVENUE,
 PS_FLAG ENCODING RLE,
 QB_SUBSCRIPTION_REVENUE,
 QB_SUBSCRIPTION_FLAG ENCODING RLE,
 QBTT_SUBSCRIPTION_REVENUE,
 QBTT_SUBSCRIPTION_FLAG ENCODING RLE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_CUSTOMER_REVENUE_TABLE.CUSTOMER_KEY,
        AGG_CUSTOMER_REVENUE_TABLE.AUTH_ID,
        AGG_CUSTOMER_REVENUE_TABLE.TAX_YEAR,
        AGG_CUSTOMER_REVENUE_TABLE.TOTAL_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.FEDERAL_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.STATE_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.STATE_ATTACH_COUNT,
        AGG_CUSTOMER_REVENUE_TABLE.MINDBENDER_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.MINDBENDER_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.CA_REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.CA_REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.CA_AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.CA_AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.CA_MAX_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.CA_MAX_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_MAX_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.NON_CA_MAX_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.MAX_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.MAX_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.PS_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.PS_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.QB_SUBSCRIPTION_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.QB_SUBSCRIPTION_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.QBTT_SUBSCRIPTION_REVENUE,
        AGG_CUSTOMER_REVENUE_TABLE.QBTT_SUBSCRIPTION_FLAG,
        AGG_CUSTOMER_REVENUE_TABLE.BATCH_EVENT_ID,
        AGG_CUSTOMER_REVENUE_TABLE.CREATED_TIMESTAMP,
        AGG_CUSTOMER_REVENUE_TABLE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_CUSTOMER_REVENUE_TABLE
 ORDER BY AGG_CUSTOMER_REVENUE_TABLE.MINDBENDER_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.CA_REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.NON_CA_REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.CA_AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.NON_CA_AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.CA_MAX_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.NON_CA_MAX_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.MAX_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.PS_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.QB_SUBSCRIPTION_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.QBTT_SUBSCRIPTION_FLAG,
          AGG_CUSTOMER_REVENUE_TABLE.TAX_YEAR,
          AGG_CUSTOMER_REVENUE_TABLE.CUSTOMER_KEY,
          AGG_CUSTOMER_REVENUE_TABLE.AUTH_ID
SEGMENTED BY hash(AGG_CUSTOMER_REVENUE_TABLE.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAX_DATE_DBD_3_rep_mrkt_dash5
(
 TAX_DATE_ID ENCODING COMMONDELTA_COMP,
 REPORTING_DATE ENCODING COMMONDELTA_COMP
)
AS
 SELECT DIM_TAX_DATE.TAX_DATE_ID,
        DIM_TAX_DATE.REPORTING_DATE
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 ORDER BY DIM_TAX_DATE.TAX_DATE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAX_DATE_DBD_2_rep_nancy_final_101
(
 TAX_DATE_ID ENCODING COMMONDELTA_COMP,
 TAX_YEAR ENCODING RLE,
 REPORTING_DATE ENCODING COMMONDELTA_COMP
)
AS
 SELECT DIM_TAX_DATE.TAX_DATE_ID,
        DIM_TAX_DATE.TAX_YEAR,
        DIM_TAX_DATE.REPORTING_DATE
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 ORDER BY DIM_TAX_DATE.TAX_YEAR,
          DIM_TAX_DATE.TAX_DATE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAX_DATE
(
 TAX_DATE_ID ENCODING COMMONDELTA_COMP,
 TAX_DATE ENCODING COMMONDELTA_COMP,
 TAX_YEAR ENCODING RLE,
 TAX_WEEK ENCODING RLE,
 TAX_DAY ENCODING RLE,
 TAX_HOUR ENCODING COMMONDELTA_COMP,
 REPORTING_DATE ENCODING COMMONDELTA_COMP,
 TAX_YEAR_IND,
 SEASON_PART,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE
)
AS
 SELECT DIM_TAX_DATE.TAX_DATE_ID,
        DIM_TAX_DATE.TAX_DATE,
        DIM_TAX_DATE.TAX_YEAR,
        DIM_TAX_DATE.TAX_WEEK,
        DIM_TAX_DATE.TAX_DAY,
        DIM_TAX_DATE.TAX_HOUR,
        DIM_TAX_DATE.REPORTING_DATE,
        DIM_TAX_DATE.TAX_YEAR_IND,
        DIM_TAX_DATE.SEASON_PART,
        DIM_TAX_DATE.BATCH_EVENT_ID,
        DIM_TAX_DATE.CREATED_TIMESTAMP,
        DIM_TAX_DATE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 ORDER BY DIM_TAX_DATE.TAX_DATE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_MARKETING_FORECAST /*+createtype(P)*/
(
 MARKETING_FORECAST_ID,
 FCST_DATE,
 CORE_FLAG,
 MOBILE_APP_FLAG,
 FCST_TYPE,
 FCST_CATEGORY,
 TRAFFIC,
 NEAUTHS,
 UNITS,
 FCST_VERSION,
 CURRENT_FCST_IND,
 TRAFFIC_MULTIPLIER,
 NEAUTHS_MULTIPLIER,
 UNITS_MULTIPLIER,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_MARKETING_FORECAST.MARKETING_FORECAST_ID,
        DIM_MARKETING_FORECAST.FCST_DATE,
        DIM_MARKETING_FORECAST.CORE_FLAG,
        DIM_MARKETING_FORECAST.MOBILE_APP_FLAG,
        DIM_MARKETING_FORECAST.FCST_TYPE,
        DIM_MARKETING_FORECAST.FCST_CATEGORY,
        DIM_MARKETING_FORECAST.TRAFFIC,
        DIM_MARKETING_FORECAST.NEAUTHS,
        DIM_MARKETING_FORECAST.UNITS,
        DIM_MARKETING_FORECAST.FCST_VERSION,
        DIM_MARKETING_FORECAST.CURRENT_FCST_IND,
        DIM_MARKETING_FORECAST.TRAFFIC_MULTIPLIER,
        DIM_MARKETING_FORECAST.NEAUTHS_MULTIPLIER,
        DIM_MARKETING_FORECAST.UNITS_MULTIPLIER,
        DIM_MARKETING_FORECAST.TAX_YEAR,
        DIM_MARKETING_FORECAST.BATCH_EVENT_ID,
        DIM_MARKETING_FORECAST.CREATED_TIMESTAMP,
        DIM_MARKETING_FORECAST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_MARKETING_FORECAST
 ORDER BY DIM_MARKETING_FORECAST.MARKETING_FORECAST_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_AUTH /*+createtype(P)*/
(
 AUTH_ID,
 CREATED_TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_AUTH.AUTH_ID,
        DIM_AUTH.CREATED_TAX_YEAR,
        DIM_AUTH.BATCH_EVENT_ID,
        DIM_AUTH.CREATED_TIMESTAMP,
        DIM_AUTH.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_AUTH
 ORDER BY DIM_AUTH.AUTH_ID
SEGMENTED BY hash(DIM_AUTH.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL /*+createtype(P)*/
(
 AUTHORIZATION_LEVEL_ID,
 AUTHORIZATION_LEVEL,
 AUTHORIZATION_NAME,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_AUTHORIZATION_LEVEL.AUTHORIZATION_LEVEL_ID,
        DIM_AUTHORIZATION_LEVEL.AUTHORIZATION_LEVEL,
        DIM_AUTHORIZATION_LEVEL.AUTHORIZATION_NAME,
        DIM_AUTHORIZATION_LEVEL.BATCH_EVENT_ID,
        DIM_AUTHORIZATION_LEVEL.CREATED_TIMESTAMP,
        DIM_AUTHORIZATION_LEVEL.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_AUTHORIZATION_LEVEL
 ORDER BY DIM_AUTHORIZATION_LEVEL.AUTHORIZATION_LEVEL_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_CAMPAIGN_DBD_13_seg_mrkt_dash5
(
 CAMPAIGN_ID ENCODING DELTARANGE_COMP,
 CID,
 CID1,
 CID2,
 CID3,
 CID4,
 CID5,
 CID6,
 CID7,
 CID8,
 CHANNEL,
 CHANNEL_GROUP,
 VENUE,
 SEGMENT,
 SUBVENUE,
 TAX_YEAR,
 PPC_DEVICE,
 PPC_GEO,
 PPC_KW_BUCKET,
 PPC_KW_SUBBUCKET,
 PPC_KW_ADGROUP,
 AFF_PAYOUT_TYPE,
 AFF_NETWORK_ID_RULE,
 AFF_NETWORK_ID,
 BN_DFA_SITE_NAME,
 BN_DFA_PLACEMENT_NAME,
 BN_DFA_CREATIVE_NAME,
 BN_MEDIA_CATEGORY,
 BN_PLACEMENT_DECLARED_TARGET,
 BN_CREATIVE_MESSAGE,
 EMAIL1,
 EMAIL2,
 EMAIL3,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING DELTARANGE_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT DIM_CAMPAIGN.CAMPAIGN_ID,
        DIM_CAMPAIGN.CID,
        DIM_CAMPAIGN.CID1,
        DIM_CAMPAIGN.CID2,
        DIM_CAMPAIGN.CID3,
        DIM_CAMPAIGN.CID4,
        DIM_CAMPAIGN.CID5,
        DIM_CAMPAIGN.CID6,
        DIM_CAMPAIGN.CID7,
        DIM_CAMPAIGN.CID8,
        DIM_CAMPAIGN.CHANNEL,
        DIM_CAMPAIGN.CHANNEL_GROUP,
        DIM_CAMPAIGN.VENUE,
        DIM_CAMPAIGN.SEGMENT,
        DIM_CAMPAIGN.SUBVENUE,
        DIM_CAMPAIGN.TAX_YEAR,
        DIM_CAMPAIGN.PPC_DEVICE,
        DIM_CAMPAIGN.PPC_GEO,
        DIM_CAMPAIGN.PPC_KW_BUCKET,
        DIM_CAMPAIGN.PPC_KW_SUBBUCKET,
        DIM_CAMPAIGN.PPC_KW_ADGROUP,
        DIM_CAMPAIGN.AFF_PAYOUT_TYPE,
        DIM_CAMPAIGN.AFF_NETWORK_ID_RULE,
        DIM_CAMPAIGN.AFF_NETWORK_ID,
        DIM_CAMPAIGN.BN_DFA_SITE_NAME,
        DIM_CAMPAIGN.BN_DFA_PLACEMENT_NAME,
        DIM_CAMPAIGN.BN_DFA_CREATIVE_NAME,
        DIM_CAMPAIGN.BN_MEDIA_CATEGORY,
        DIM_CAMPAIGN.BN_PLACEMENT_DECLARED_TARGET,
        DIM_CAMPAIGN.BN_CREATIVE_MESSAGE,
        DIM_CAMPAIGN.EMAIL1,
        DIM_CAMPAIGN.EMAIL2,
        DIM_CAMPAIGN.EMAIL3,
        DIM_CAMPAIGN.BATCH_EVENT_ID,
        DIM_CAMPAIGN.CREATED_TIMESTAMP,
        DIM_CAMPAIGN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_CAMPAIGN
 ORDER BY DIM_CAMPAIGN.CAMPAIGN_ID
SEGMENTED BY hash(DIM_CAMPAIGN.CAMPAIGN_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PAGE /*+createtype(P)*/
(
 PAGE_ID,
 PAGE_NAME,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_PAGE.PAGE_ID,
        DIM_PAGE.PAGE_NAME,
        DIM_PAGE.BATCH_EVENT_ID,
        DIM_PAGE.CREATED_TIMESTAMP,
        DIM_PAGE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PAGE
 ORDER BY DIM_PAGE.PAGE_ID
SEGMENTED BY hash(DIM_PAGE.PAGE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PAGE_URL_PERF1
(
 UPDATED_TIMESTAMP ENCODING RLE,
 PAGE_GROUP ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 DOMAIN ENCODING RLE,
 PAGE_URL,
 PAGE_URL_ID
)
AS
 SELECT DIM_PAGE_URL.UPDATED_TIMESTAMP,
        DIM_PAGE_URL.PAGE_GROUP,
        DIM_PAGE_URL.BATCH_EVENT_ID,
        DIM_PAGE_URL.CREATED_TIMESTAMP,
        DIM_PAGE_URL.DOMAIN,
        DIM_PAGE_URL.PAGE_URL,
        DIM_PAGE_URL.PAGE_URL_ID
 FROM CTG_ANALYTICS.DIM_PAGE_URL
 ORDER BY DIM_PAGE_URL.UPDATED_TIMESTAMP,
          DIM_PAGE_URL.PAGE_GROUP,
          DIM_PAGE_URL.BATCH_EVENT_ID,
          DIM_PAGE_URL.CREATED_TIMESTAMP,
          DIM_PAGE_URL.DOMAIN,
          DIM_PAGE_URL.PAGE_URL,
          DIM_PAGE_URL.PAGE_URL_ID
SEGMENTED BY hash(DIM_PAGE_URL.PAGE_URL_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRODUCT_DBD_15_seg_mrkt_dash5
(
 PRODUCT_ID ENCODING DELTARANGE_COMP,
 INTUIT_ITEM_CODE,
 PRODUCT_DESCRIPTION,
 PRODUCT_FAMILY_DESCRIPTION,
 PRODUCT_EDITION_DESCRIPTION,
 PRODUCT_VERSION_CODE,
 PRODUCT_ROLLUP,
 PRODUCT_ROLLUP_ID ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING COMMONDELTA_COMP
)
AS
 SELECT DIM_PRODUCT.PRODUCT_ID,
        DIM_PRODUCT.INTUIT_ITEM_CODE,
        DIM_PRODUCT.PRODUCT_DESCRIPTION,
        DIM_PRODUCT.PRODUCT_FAMILY_DESCRIPTION,
        DIM_PRODUCT.PRODUCT_EDITION_DESCRIPTION,
        DIM_PRODUCT.PRODUCT_VERSION_CODE,
        DIM_PRODUCT.PRODUCT_ROLLUP,
        DIM_PRODUCT.PRODUCT_ROLLUP_ID,
        DIM_PRODUCT.BATCH_EVENT_ID,
        DIM_PRODUCT.CREATED_TIMESTAMP,
        DIM_PRODUCT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRODUCT
 ORDER BY DIM_PRODUCT.PRODUCT_ID
SEGMENTED BY hash(DIM_PRODUCT.PRODUCT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_VISITOR_IVID /*+createtype(P)*/
(
 VISITOR_IVID_ID,
 IVID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_VISITOR_IVID.VISITOR_IVID_ID,
        DIM_VISITOR_IVID.IVID,
        DIM_VISITOR_IVID.BATCH_EVENT_ID,
        DIM_VISITOR_IVID.CREATED_TIMESTAMP,
        DIM_VISITOR_IVID.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_VISITOR_IVID
 ORDER BY DIM_VISITOR_IVID.VISITOR_IVID_ID
SEGMENTED BY hash(DIM_VISITOR_IVID.VISITOR_IVID_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_VISITOR_OMT /*+createtype(P)*/
(
 VISITOR_OMT_ID,
 VISID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID
)
AS
 SELECT DIM_VISITOR_OMT.VISITOR_OMT_ID,
        DIM_VISITOR_OMT.VISID,
        DIM_VISITOR_OMT.BATCH_EVENT_ID,
        DIM_VISITOR_OMT.CREATED_TIMESTAMP,
        DIM_VISITOR_OMT.UPDATED_TIMESTAMP,
        DIM_VISITOR_OMT.VISITOR_ID
 FROM CTG_ANALYTICS.DIM_VISITOR_OMT
 ORDER BY DIM_VISITOR_OMT.VISITOR_OMT_ID
SEGMENTED BY hash(DIM_VISITOR_OMT.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_VISITOR_OMT_OMT_ID_v1_v1 /*+createtype(P)*/
(
 VISITOR_OMT_ID,
 VISITOR_ID
)
AS
 SELECT DIM_VISITOR_OMT.VISITOR_OMT_ID,
        DIM_VISITOR_OMT.VISITOR_ID
 FROM CTG_ANALYTICS.DIM_VISITOR_OMT
 ORDER BY DIM_VISITOR_OMT.VISITOR_OMT_ID
SEGMENTED BY hash(DIM_VISITOR_OMT.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_VISITOR_OMT_OMT_ID_v2 /*+createtype(P)*/
(
 VISITOR_OMT_ID,
 VISITOR_ID
)
AS
 SELECT DIM_VISITOR_OMT.VISITOR_OMT_ID,
        DIM_VISITOR_OMT.VISITOR_ID
 FROM CTG_ANALYTICS.DIM_VISITOR_OMT
 ORDER BY DIM_VISITOR_OMT.VISITOR_OMT_ID
SEGMENTED BY hash(DIM_VISITOR_OMT.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_VISITOR_OMT_DBD_1_rep_care_1
(
 VISITOR_OMT_ID ENCODING COMMONDELTA_COMP,
 VISITOR_ID ENCODING DELTARANGE_COMP
)
AS
 SELECT DIM_VISITOR_OMT.VISITOR_OMT_ID,
        DIM_VISITOR_OMT.VISITOR_ID
 FROM CTG_ANALYTICS.DIM_VISITOR_OMT
 ORDER BY DIM_VISITOR_OMT.VISITOR_OMT_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTHENTICATION /*+createtype(P)*/
(
 AUTHENTICATION_ID,
 AUTH_LOG_KEY,
 AUTH_ID,
 AUTH_TIMESTAMP,
 TAX_DATE_ID,
 TAX_YEAR,
 SKU_ROLLUP_ID,
 AUTHORIZATION_LEVEL_ID,
 SOURCE_APPLICATION_ID,
 IP_ADDRESS,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_AUTHENTICATION.AUTHENTICATION_ID,
        FACT_AUTHENTICATION.AUTH_LOG_KEY,
        FACT_AUTHENTICATION.AUTH_ID,
        FACT_AUTHENTICATION.AUTH_TIMESTAMP,
        FACT_AUTHENTICATION.TAX_DATE_ID,
        FACT_AUTHENTICATION.TAX_YEAR,
        FACT_AUTHENTICATION.SKU_ROLLUP_ID,
        FACT_AUTHENTICATION.AUTHORIZATION_LEVEL_ID,
        FACT_AUTHENTICATION.SOURCE_APPLICATION_ID,
        FACT_AUTHENTICATION.IP_ADDRESS,
        FACT_AUTHENTICATION.BATCH_EVENT_ID,
        FACT_AUTHENTICATION.CREATED_TIMESTAMP,
        FACT_AUTHENTICATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION
 ORDER BY FACT_AUTHENTICATION.AUTHENTICATION_ID
SEGMENTED BY hash(FACT_AUTHENTICATION.AUTHENTICATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTHENTICATION_DBD_5_seg_mrkt_dash5
(
 AUTHENTICATION_ID ENCODING DELTARANGE_COMP,
 AUTH_TIMESTAMP ENCODING COMMONDELTA_COMP,
 SKU_ROLLUP_ID ENCODING RLE
)
AS
 SELECT FACT_AUTHENTICATION.AUTHENTICATION_ID,
        FACT_AUTHENTICATION.AUTH_TIMESTAMP,
        FACT_AUTHENTICATION.SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION
 ORDER BY FACT_AUTHENTICATION.SKU_ROLLUP_ID,
          FACT_AUTHENTICATION.AUTHENTICATION_ID
SEGMENTED BY hash(FACT_AUTHENTICATION.AUTHENTICATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTHENTICATION_DBD_3_seg_nancy_final_101
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 AUTH_TIMESTAMP ENCODING COMMONDELTA_COMP,
 TAX_YEAR ENCODING RLE,
 SKU_ROLLUP_ID ENCODING RLE
)
AS
 SELECT FACT_AUTHENTICATION.AUTH_ID,
        FACT_AUTHENTICATION.AUTH_TIMESTAMP,
        FACT_AUTHENTICATION.TAX_YEAR,
        FACT_AUTHENTICATION.SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION
 ORDER BY FACT_AUTHENTICATION.TAX_YEAR,
          FACT_AUTHENTICATION.SKU_ROLLUP_ID,
          FACT_AUTHENTICATION.AUTH_TIMESTAMP,
          FACT_AUTHENTICATION.AUTH_ID
SEGMENTED BY hash(FACT_AUTHENTICATION.AUTH_ID, FACT_AUTHENTICATION.AUTH_TIMESTAMP, FACT_AUTHENTICATION.SKU_ROLLUP_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_PERF1
(
 AB_TEST_ID,
 VISITOR_IVID_ID,
 NONFFA_FLAG ENCODING RLE,
 PURCHASE_FLAG ENCODING RLE,
 VALID_FOR_FIRST_VISIT_FLAG ENCODING RLE,
 PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID ENCODING RLE,
 FORM_ID ENCODING RLE,
 HELP_USAGE_ID ENCODING RLE,
 START_EXPERIENCE ENCODING RLE,
 AUTH_ID_SOURCE_ID ENCODING RLE,
 PRIOR_YEAR_TAXPREP_METHOD_ID ENCODING RLE,
 SOURCE_APPLICATION_ID ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 SITE_AREA_ID ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE,
 EXPERIENCE_ID ENCODING RLE,
 EXPERIENCE_RENDERED_ID ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 PRIORITY_CODE_ID ENCODING RLE,
 RECIPE_ID ENCODING RLE,
 TAX_DATE_ID ENCODING RLE,
 SCREEN_ID ENCODING RLE,
 VISIT_NUM,
 GEO_LOCATION_ID,
 CAMPAIGN_ID,
 USER_AGENT_ID,
 POST_KEYWORD_ID,
 PAGE_URL_ID,
 REFERRER_PAGE_URL_ID,
 PAGE_ID,
 AUTH_ID,
 SERVER_TIMESTAMP,
 IP_ADDRESS,
 VISITOR_OMT_ID,
 CLICKSTREAM_ID,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT FACT_CLICKSTREAM.AB_TEST_ID,
        FACT_CLICKSTREAM.VISITOR_IVID_ID,
        FACT_CLICKSTREAM.NONFFA_FLAG,
        FACT_CLICKSTREAM.PURCHASE_FLAG,
        FACT_CLICKSTREAM.VALID_FOR_FIRST_VISIT_FLAG,
        FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
        FACT_CLICKSTREAM.FORM_ID,
        FACT_CLICKSTREAM.HELP_USAGE_ID,
        FACT_CLICKSTREAM.START_EXPERIENCE,
        FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID,
        FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_ID,
        FACT_CLICKSTREAM.SOURCE_APPLICATION_ID,
        FACT_CLICKSTREAM.TAX_YEAR,
        FACT_CLICKSTREAM.SITE_AREA_ID,
        FACT_CLICKSTREAM.UPDATED_TIMESTAMP,
        FACT_CLICKSTREAM.EXPERIENCE_ID,
        FACT_CLICKSTREAM.EXPERIENCE_RENDERED_ID,
        FACT_CLICKSTREAM.BATCH_EVENT_ID,
        FACT_CLICKSTREAM.CREATED_TIMESTAMP,
        FACT_CLICKSTREAM.PRIORITY_CODE_ID,
        FACT_CLICKSTREAM.RECIPE_ID,
        FACT_CLICKSTREAM.TAX_DATE_ID,
        FACT_CLICKSTREAM.SCREEN_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.GEO_LOCATION_ID,
        FACT_CLICKSTREAM.CAMPAIGN_ID,
        FACT_CLICKSTREAM.USER_AGENT_ID,
        FACT_CLICKSTREAM.POST_KEYWORD_ID,
        FACT_CLICKSTREAM.PAGE_URL_ID,
        FACT_CLICKSTREAM.REFERRER_PAGE_URL_ID,
        FACT_CLICKSTREAM.PAGE_ID,
        FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP,
        FACT_CLICKSTREAM.IP_ADDRESS,
        FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.CLICKSTREAM_ID,
        FACT_CLICKSTREAM.VISITOR_ID,
        FACT_CLICKSTREAM.SESSION_KEY,
        FACT_CLICKSTREAM.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 ORDER BY FACT_CLICKSTREAM.TAX_YEAR,
          FACT_CLICKSTREAM.NONFFA_FLAG,
          FACT_CLICKSTREAM.PURCHASE_FLAG,
          FACT_CLICKSTREAM.VALID_FOR_FIRST_VISIT_FLAG,
          FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
          FACT_CLICKSTREAM.FORM_ID,
          FACT_CLICKSTREAM.HELP_USAGE_ID,
          FACT_CLICKSTREAM.START_EXPERIENCE,
          FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID,
          FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_ID,
          FACT_CLICKSTREAM.SOURCE_APPLICATION_ID,
          FACT_CLICKSTREAM.SITE_AREA_ID,
          FACT_CLICKSTREAM.EXPERIENCE_ID,
          FACT_CLICKSTREAM.EXPERIENCE_RENDERED_ID,
          FACT_CLICKSTREAM.BATCH_EVENT_ID,
          FACT_CLICKSTREAM.PRIORITY_CODE_ID,
          FACT_CLICKSTREAM.RECIPE_ID,
          FACT_CLICKSTREAM.TAX_DATE_ID,
          FACT_CLICKSTREAM.SCREEN_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          FACT_CLICKSTREAM.CAMPAIGN_ID,
          FACT_CLICKSTREAM.USER_AGENT_ID,
          FACT_CLICKSTREAM.PAGE_URL_ID,
          FACT_CLICKSTREAM.AUTH_ID,
          FACT_CLICKSTREAM.SERVER_TIMESTAMP,
          FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.CLICKSTREAM_ID
SEGMENTED BY hash(FACT_CLICKSTREAM.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_PERF2
(
 AB_TEST_ID,
 VISITOR_IVID_ID,
 NONFFA_FLAG ENCODING RLE,
 PURCHASE_FLAG ENCODING RLE,
 VALID_FOR_FIRST_VISIT_FLAG ENCODING RLE,
 PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID ENCODING RLE,
 FORM_ID ENCODING RLE,
 HELP_USAGE_ID ENCODING RLE,
 START_EXPERIENCE ENCODING RLE,
 AUTH_ID_SOURCE_ID ENCODING RLE,
 PRIOR_YEAR_TAXPREP_METHOD_ID ENCODING RLE,
 SOURCE_APPLICATION_ID ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 SITE_AREA_ID ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE,
 EXPERIENCE_ID ENCODING RLE,
 EXPERIENCE_RENDERED_ID ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 PRIORITY_CODE_ID ENCODING RLE,
 RECIPE_ID ENCODING RLE,
 TAX_DATE_ID ENCODING RLE,
 SCREEN_ID ENCODING RLE,
 VISIT_NUM,
 GEO_LOCATION_ID,
 CAMPAIGN_ID,
 USER_AGENT_ID,
 POST_KEYWORD_ID,
 PAGE_URL_ID,
 REFERRER_PAGE_URL_ID,
 PAGE_ID,
 AUTH_ID,
 SERVER_TIMESTAMP,
 IP_ADDRESS,
 VISITOR_OMT_ID,
 CLICKSTREAM_ID,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT FACT_CLICKSTREAM.AB_TEST_ID,
        FACT_CLICKSTREAM.VISITOR_IVID_ID,
        FACT_CLICKSTREAM.NONFFA_FLAG,
        FACT_CLICKSTREAM.PURCHASE_FLAG,
        FACT_CLICKSTREAM.VALID_FOR_FIRST_VISIT_FLAG,
        FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
        FACT_CLICKSTREAM.FORM_ID,
        FACT_CLICKSTREAM.HELP_USAGE_ID,
        FACT_CLICKSTREAM.START_EXPERIENCE,
        FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID,
        FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_ID,
        FACT_CLICKSTREAM.SOURCE_APPLICATION_ID,
        FACT_CLICKSTREAM.TAX_YEAR,
        FACT_CLICKSTREAM.SITE_AREA_ID,
        FACT_CLICKSTREAM.UPDATED_TIMESTAMP,
        FACT_CLICKSTREAM.EXPERIENCE_ID,
        FACT_CLICKSTREAM.EXPERIENCE_RENDERED_ID,
        FACT_CLICKSTREAM.BATCH_EVENT_ID,
        FACT_CLICKSTREAM.CREATED_TIMESTAMP,
        FACT_CLICKSTREAM.PRIORITY_CODE_ID,
        FACT_CLICKSTREAM.RECIPE_ID,
        FACT_CLICKSTREAM.TAX_DATE_ID,
        FACT_CLICKSTREAM.SCREEN_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.GEO_LOCATION_ID,
        FACT_CLICKSTREAM.CAMPAIGN_ID,
        FACT_CLICKSTREAM.USER_AGENT_ID,
        FACT_CLICKSTREAM.POST_KEYWORD_ID,
        FACT_CLICKSTREAM.PAGE_URL_ID,
        FACT_CLICKSTREAM.REFERRER_PAGE_URL_ID,
        FACT_CLICKSTREAM.PAGE_ID,
        FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP,
        FACT_CLICKSTREAM.IP_ADDRESS,
        FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.CLICKSTREAM_ID,
        FACT_CLICKSTREAM.VISITOR_ID,
        FACT_CLICKSTREAM.SESSION_KEY,
        FACT_CLICKSTREAM.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 ORDER BY FACT_CLICKSTREAM.TAX_YEAR,
          FACT_CLICKSTREAM.NONFFA_FLAG,
          FACT_CLICKSTREAM.PURCHASE_FLAG,
          FACT_CLICKSTREAM.VALID_FOR_FIRST_VISIT_FLAG,
          FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
          FACT_CLICKSTREAM.FORM_ID,
          FACT_CLICKSTREAM.HELP_USAGE_ID,
          FACT_CLICKSTREAM.START_EXPERIENCE,
          FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID,
          FACT_CLICKSTREAM.PRIOR_YEAR_TAXPREP_METHOD_ID,
          FACT_CLICKSTREAM.SOURCE_APPLICATION_ID,
          FACT_CLICKSTREAM.SITE_AREA_ID,
          FACT_CLICKSTREAM.EXPERIENCE_ID,
          FACT_CLICKSTREAM.EXPERIENCE_RENDERED_ID,
          FACT_CLICKSTREAM.BATCH_EVENT_ID,
          FACT_CLICKSTREAM.PRIORITY_CODE_ID,
          FACT_CLICKSTREAM.RECIPE_ID,
          FACT_CLICKSTREAM.TAX_DATE_ID,
          FACT_CLICKSTREAM.SCREEN_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          FACT_CLICKSTREAM.CAMPAIGN_ID,
          FACT_CLICKSTREAM.USER_AGENT_ID,
          FACT_CLICKSTREAM.PAGE_URL_ID,
          FACT_CLICKSTREAM.AUTH_ID,
          FACT_CLICKSTREAM.SERVER_TIMESTAMP,
          FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.CLICKSTREAM_ID
SEGMENTED BY hash(FACT_CLICKSTREAM.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST_DBD_16_seg_mrkt_dash5
(
 AUTHENTICATION_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 FIRST_AUTH_TIMESTAMP ENCODING COMMONDELTA_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_AUTHENTICATION_FIRST.AUTHENTICATION_ID,
        SUB_AUTHENTICATION_FIRST.AUTH_ID,
        SUB_AUTHENTICATION_FIRST.FIRST_AUTH_TIMESTAMP,
        SUB_AUTHENTICATION_FIRST.TAX_YEAR,
        SUB_AUTHENTICATION_FIRST.BATCH_EVENT_ID,
        SUB_AUTHENTICATION_FIRST.CREATED_TIMESTAMP,
        SUB_AUTHENTICATION_FIRST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST
 ORDER BY SUB_AUTHENTICATION_FIRST.AUTHENTICATION_ID
SEGMENTED BY hash(SUB_AUTHENTICATION_FIRST.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST_DBD_28_seg_nancy_final_101
(
 AUTHENTICATION_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 FIRST_AUTH_TIMESTAMP ENCODING GCDDELTA,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_AUTHORIZATION_FIRST.AUTHENTICATION_ID,
        SUB_AUTHORIZATION_FIRST.AUTH_ID,
        SUB_AUTHORIZATION_FIRST.FIRST_AUTH_TIMESTAMP,
        SUB_AUTHORIZATION_FIRST.TAX_YEAR,
        SUB_AUTHORIZATION_FIRST.BATCH_EVENT_ID,
        SUB_AUTHORIZATION_FIRST.CREATED_TIMESTAMP,
        SUB_AUTHORIZATION_FIRST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST
 ORDER BY SUB_AUTHORIZATION_FIRST.AUTHENTICATION_ID
SEGMENTED BY hash(SUB_AUTHORIZATION_FIRST.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_FIRST /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 VISITOR_OMT_ID,
 FIRST_SERVER_TIMESTAMP,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID
)
AS
 SELECT SUB_CLICKSTREAM_VISITOR_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_VISITOR_FIRST.VISITOR_OMT_ID,
        SUB_CLICKSTREAM_VISITOR_FIRST.FIRST_SERVER_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_VISITOR_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_VISITOR_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_FIRST.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_FIRST.VISITOR_ID
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_FIRST
 ORDER BY SUB_CLICKSTREAM_VISITOR_FIRST.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_CLICKSTREAM_VISITOR_FIRST.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_FORM /*+createtype(P)*/
(
 FORM_ID,
 FORM_ID_SRC,
 FORM_NAME,
 COMPLEXITY,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_FORM.FORM_ID,
        DIM_FORM.FORM_ID_SRC,
        DIM_FORM.FORM_NAME,
        DIM_FORM.COMPLEXITY,
        DIM_FORM.BATCH_EVENT_ID,
        DIM_FORM.CREATED_TIMESTAMP,
        DIM_FORM.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_FORM
 ORDER BY DIM_FORM.FORM_ID
SEGMENTED BY hash(DIM_FORM.FORM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST_DBD_17_seg_mrkt_dash5
(
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING RLE,
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 FIRST_SERVER_TIMESTAMP ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.VISITOR_OMT_ID,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.FIRST_SERVER_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST
 ORDER BY SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_CLICKSTREAM_VISITOR_NONFFA_FIRST.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH_DBD_29_seg_nancy_final_101
(
 AUTHENTICATION_ID ENCODING COMMONDELTA_COMP,
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 VISIT_NUM ENCODING BLOCKDICT_COMP,
 TIME_DIFFERENTIAL ENCODING BLOCKDICT_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT BRIDGE_CLICKSTREAM_AUTH.AUTHENTICATION_ID,
        BRIDGE_CLICKSTREAM_AUTH.CLICKSTREAM_ID,
        BRIDGE_CLICKSTREAM_AUTH.VISITOR_OMT_ID,
        BRIDGE_CLICKSTREAM_AUTH.VISIT_NUM,
        BRIDGE_CLICKSTREAM_AUTH.TIME_DIFFERENTIAL,
        BRIDGE_CLICKSTREAM_AUTH.BATCH_EVENT_ID,
        BRIDGE_CLICKSTREAM_AUTH.CREATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_AUTH.UPDATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_AUTH.VISITOR_ID,
        BRIDGE_CLICKSTREAM_AUTH.SESSION_KEY,
        BRIDGE_CLICKSTREAM_AUTH.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH
 ORDER BY BRIDGE_CLICKSTREAM_AUTH.AUTHENTICATION_ID
SEGMENTED BY hash(BRIDGE_CLICKSTREAM_AUTH.AUTHENTICATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER_DBD_30_seg_nancy_final_101
(
 TAXORDER_ID ENCODING COMMONDELTA_COMP,
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 VISIT_NUM ENCODING BLOCKDICT_COMP,
 TIME_DIFFERENTIAL ENCODING BLOCKDICT_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING RLE,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT BRIDGE_CLICKSTREAM_TAXORDER.TAXORDER_ID,
        BRIDGE_CLICKSTREAM_TAXORDER.CLICKSTREAM_ID,
        BRIDGE_CLICKSTREAM_TAXORDER.VISITOR_OMT_ID,
        BRIDGE_CLICKSTREAM_TAXORDER.VISIT_NUM,
        BRIDGE_CLICKSTREAM_TAXORDER.TIME_DIFFERENTIAL,
        BRIDGE_CLICKSTREAM_TAXORDER.BATCH_EVENT_ID,
        BRIDGE_CLICKSTREAM_TAXORDER.CREATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_TAXORDER.UPDATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_TAXORDER.VISITOR_ID,
        BRIDGE_CLICKSTREAM_TAXORDER.SESSION_KEY,
        BRIDGE_CLICKSTREAM_TAXORDER.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER
 ORDER BY BRIDGE_CLICKSTREAM_TAXORDER.TAXORDER_ID
SEGMENTED BY hash(BRIDGE_CLICKSTREAM_TAXORDER.TAXORDER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST_DBD_18_seg_mrkt_dash5
(
 TAXORDER_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAXFILER_ID ENCODING DELTAVAL,
 FIRST_FED_TAXORDER_TIMESTAMP ENCODING GCDDELTA,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_TAXORDER_FED_FIRST.TAXORDER_ID,
        SUB_TAXORDER_FED_FIRST.AUTH_ID,
        SUB_TAXORDER_FED_FIRST.TAXFILER_ID,
        SUB_TAXORDER_FED_FIRST.FIRST_FED_TAXORDER_TIMESTAMP,
        SUB_TAXORDER_FED_FIRST.TAX_YEAR,
        SUB_TAXORDER_FED_FIRST.BATCH_EVENT_ID,
        SUB_TAXORDER_FED_FIRST.CREATED_TIMESTAMP,
        SUB_TAXORDER_FED_FIRST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST
 ORDER BY SUB_TAXORDER_FED_FIRST.TAXORDER_ID
SEGMENTED BY hash(SUB_TAXORDER_FED_FIRST.TAXORDER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAXFILER_SEGMENT /*+createtype(P)*/
(
 TAXFILER_SEGMENT_ID,
 TAXFILER_ID,
 TAXFILER_SEGMENT_CODE,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TAXFILER_SEGMENT.TAXFILER_SEGMENT_ID,
        DIM_TAXFILER_SEGMENT.TAXFILER_ID,
        DIM_TAXFILER_SEGMENT.TAXFILER_SEGMENT_CODE,
        DIM_TAXFILER_SEGMENT.TAX_YEAR,
        DIM_TAXFILER_SEGMENT.BATCH_EVENT_ID,
        DIM_TAXFILER_SEGMENT.CREATED_TIMESTAMP,
        DIM_TAXFILER_SEGMENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TAXFILER_SEGMENT
 ORDER BY DIM_TAXFILER_SEGMENT.TAXFILER_SEGMENT_ID
SEGMENTED BY hash(DIM_TAXFILER_SEGMENT.TAXFILER_SEGMENT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAXORDER_PERF
(
 VALID_FLAG ENCODING RLE,
 RT_FLAG ENCODING RLE,
 STATUS_TYPE ENCODING RLE,
 ORDER_TYPE ENCODING RLE,
 SOURCE_APPLICATION_ID ENCODING RLE,
 PRODUCT_VERSION ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 ORIGINAL_SKU_ROLLUP_ID ENCODING RLE,
 FILING_TYPE_ID ENCODING RLE,
 UPDATED_TIMESTAMP,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP,
 ORDER_AMOUNT ENCODING RLE,
 PRODUCT_ALIAS_ID ENCODING RLE,
 PRICE_PRIORITY_ID ENCODING RLE,
 CREDIT_PRIORITY_ID ENCODING RLE,
 CURRENT_PRIORITY_ID ENCODING RLE,
 TAX_DATE_ID,
 CUSTOMER_KEY,
 AUTH_ID,
 TAXFILER_ID,
 ORDER_NUMBER,
 CHANGE_ID,
 ORDER_TIMESTAMP,
 TTO_ORDERS_KEY,
 TAXORDER_ID
)
AS
 SELECT FACT_TAXORDER.VALID_FLAG,
        FACT_TAXORDER.RT_FLAG,
        FACT_TAXORDER.STATUS_TYPE,
        FACT_TAXORDER.ORDER_TYPE,
        FACT_TAXORDER.SOURCE_APPLICATION_ID,
        FACT_TAXORDER.PRODUCT_VERSION,
        FACT_TAXORDER.TAX_YEAR,
        FACT_TAXORDER.ORIGINAL_SKU_ROLLUP_ID,
        FACT_TAXORDER.FILING_TYPE_ID,
        FACT_TAXORDER.UPDATED_TIMESTAMP,
        FACT_TAXORDER.BATCH_EVENT_ID,
        FACT_TAXORDER.CREATED_TIMESTAMP,
        FACT_TAXORDER.ORDER_AMOUNT,
        FACT_TAXORDER.PRODUCT_ALIAS_ID,
        FACT_TAXORDER.PRICE_PRIORITY_ID,
        FACT_TAXORDER.CREDIT_PRIORITY_ID,
        FACT_TAXORDER.CURRENT_PRIORITY_ID,
        FACT_TAXORDER.TAX_DATE_ID,
        FACT_TAXORDER.CUSTOMER_KEY,
        FACT_TAXORDER.AUTH_ID,
        FACT_TAXORDER.TAXFILER_ID,
        FACT_TAXORDER.ORDER_NUMBER,
        FACT_TAXORDER.CHANGE_ID,
        FACT_TAXORDER.ORDER_TIMESTAMP,
        FACT_TAXORDER.TTO_ORDERS_KEY,
        FACT_TAXORDER.TAXORDER_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 ORDER BY FACT_TAXORDER.TAX_YEAR,
          FACT_TAXORDER.VALID_FLAG,
          FACT_TAXORDER.RT_FLAG,
          FACT_TAXORDER.STATUS_TYPE,
          FACT_TAXORDER.ORDER_TYPE,
          FACT_TAXORDER.SOURCE_APPLICATION_ID,
          FACT_TAXORDER.PRODUCT_VERSION,
          FACT_TAXORDER.ORIGINAL_SKU_ROLLUP_ID,
          FACT_TAXORDER.FILING_TYPE_ID,
          FACT_TAXORDER.BATCH_EVENT_ID,
          FACT_TAXORDER.ORDER_AMOUNT,
          FACT_TAXORDER.PRODUCT_ALIAS_ID,
          FACT_TAXORDER.PRICE_PRIORITY_ID,
          FACT_TAXORDER.CREDIT_PRIORITY_ID,
          FACT_TAXORDER.CURRENT_PRIORITY_ID,
          FACT_TAXORDER.CUSTOMER_KEY,
          FACT_TAXORDER.AUTH_ID,
          FACT_TAXORDER.TAXFILER_ID,
          FACT_TAXORDER.TTO_ORDERS_KEY,
          FACT_TAXORDER.TAXORDER_ID
SEGMENTED BY hash(FACT_TAXORDER.TAXORDER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_MULTIFILER_VISITOR /*+createtype(P)*/
(
 VISITOR_OMT_ID,
 TAX_YEAR,
 MULTIFILER_TIMESTAMP,
 MULTIFILER_REASON_ID,
 PARENT_MULTIFILER_REASON_ID,
 GENERATION_NUMBER,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID
)
AS
 SELECT FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID,
        FACT_MULTIFILER_VISITOR.TAX_YEAR,
        FACT_MULTIFILER_VISITOR.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR.GENERATION_NUMBER,
        FACT_MULTIFILER_VISITOR.BATCH_EVENT_ID,
        FACT_MULTIFILER_VISITOR.CREATED_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.UPDATED_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.VISITOR_ID
 FROM CTG_ANALYTICS.FACT_MULTIFILER_VISITOR
 ORDER BY FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID
SEGMENTED BY hash(FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID, FACT_MULTIFILER_VISITOR.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_MULTIFILER_VISITOR_DBD_31_seg_nancy_final_101
(
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 MULTIFILER_TIMESTAMP ENCODING GCDDELTA,
 MULTIFILER_REASON_ID ENCODING BLOCKDICT_COMP,
 PARENT_MULTIFILER_REASON_ID ENCODING BLOCKDICT_COMP,
 GENERATION_NUMBER ENCODING BLOCKDICT_COMP,
 BATCH_EVENT_ID ENCODING BLOCKDICT_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 VISITOR_ID
)
AS
 SELECT FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID,
        FACT_MULTIFILER_VISITOR.TAX_YEAR,
        FACT_MULTIFILER_VISITOR.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR.GENERATION_NUMBER,
        FACT_MULTIFILER_VISITOR.BATCH_EVENT_ID,
        FACT_MULTIFILER_VISITOR.CREATED_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.UPDATED_TIMESTAMP,
        FACT_MULTIFILER_VISITOR.VISITOR_ID
 FROM CTG_ANALYTICS.FACT_MULTIFILER_VISITOR
 ORDER BY FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID
SEGMENTED BY hash(FACT_MULTIFILER_VISITOR.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_MULTIFILER_AUTH /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 MULTIFILER_TIMESTAMP,
 MULTIFILER_REASON_ID,
 PARENT_MULTIFILER_REASON_ID,
 GENERATION_NUMBER,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_MULTIFILER_AUTH.AUTH_ID,
        FACT_MULTIFILER_AUTH.TAX_YEAR,
        FACT_MULTIFILER_AUTH.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_AUTH.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH.GENERATION_NUMBER,
        FACT_MULTIFILER_AUTH.BATCH_EVENT_ID,
        FACT_MULTIFILER_AUTH.CREATED_TIMESTAMP,
        FACT_MULTIFILER_AUTH.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_MULTIFILER_AUTH
 ORDER BY FACT_MULTIFILER_AUTH.AUTH_ID,
          FACT_MULTIFILER_AUTH.TAX_YEAR,
          FACT_MULTIFILER_AUTH.MULTIFILER_TIMESTAMP
SEGMENTED BY hash(FACT_MULTIFILER_AUTH.AUTH_ID, FACT_MULTIFILER_AUTH.TAX_YEAR, FACT_MULTIFILER_AUTH.MULTIFILER_TIMESTAMP) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_MULTIFILER_AUTH_DBD_32_seg_nancy_final_101
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING BLOCKDICT_COMP,
 MULTIFILER_TIMESTAMP ENCODING GCDDELTA,
 MULTIFILER_REASON_ID ENCODING BLOCKDICT_COMP,
 PARENT_MULTIFILER_REASON_ID ENCODING BLOCKDICT_COMP,
 GENERATION_NUMBER ENCODING BLOCKDICT_COMP,
 BATCH_EVENT_ID ENCODING BLOCKDICT_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT FACT_MULTIFILER_AUTH.AUTH_ID,
        FACT_MULTIFILER_AUTH.TAX_YEAR,
        FACT_MULTIFILER_AUTH.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_AUTH.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH.GENERATION_NUMBER,
        FACT_MULTIFILER_AUTH.BATCH_EVENT_ID,
        FACT_MULTIFILER_AUTH.CREATED_TIMESTAMP,
        FACT_MULTIFILER_AUTH.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_MULTIFILER_AUTH
 ORDER BY FACT_MULTIFILER_AUTH.AUTH_ID,
          FACT_MULTIFILER_AUTH.TAX_YEAR,
          FACT_MULTIFILER_AUTH.MULTIFILER_TIMESTAMP
SEGMENTED BY hash(FACT_MULTIFILER_AUTH.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_AUTH_ID_SOURCE /*+createtype(P)*/
(
 AUTH_ID_SOURCE_ID,
 SOURCE_NAME,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 BATCH_EVENT_ID
)
AS
 SELECT DIM_AUTH_ID_SOURCE.AUTH_ID_SOURCE_ID,
        DIM_AUTH_ID_SOURCE.SOURCE_NAME,
        DIM_AUTH_ID_SOURCE.CREATED_TIMESTAMP,
        DIM_AUTH_ID_SOURCE.UPDATED_TIMESTAMP,
        DIM_AUTH_ID_SOURCE.BATCH_EVENT_ID
 FROM CTG_ANALYTICS.DIM_AUTH_ID_SOURCE
 ORDER BY DIM_AUTH_ID_SOURCE.AUTH_ID_SOURCE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRODUCT_ROLLUP /*+createtype(P)*/
(
 PRODUCT_ROLLUP_ID,
 PRODUCT_ID,
 PRODUCT_ENGINE_DSC,
 PRODUCT_ROLLUP,
 PAID_FLAG,
 PRODUCT_NAME,
 DISPLAY_PRODUCT_NAME_WITH_SORT,
 PRODUCT_SORT,
 DISPLAY_PRODUCT_NAME,
 PRODUCT_EDTN_DSC,
 PRODUCT_CODE_ROLLUP,
 EFFECTIVE_START_TAX_YEAR,
 EFFECTIVE_END_TAX_YEAR,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_PRODUCT_ROLLUP.PRODUCT_ROLLUP_ID,
        DIM_PRODUCT_ROLLUP.PRODUCT_ID,
        DIM_PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
        DIM_PRODUCT_ROLLUP.PRODUCT_ROLLUP,
        DIM_PRODUCT_ROLLUP.PAID_FLAG,
        DIM_PRODUCT_ROLLUP.PRODUCT_NAME,
        DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
        DIM_PRODUCT_ROLLUP.PRODUCT_SORT,
        DIM_PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
        DIM_PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
        DIM_PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
        DIM_PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
        DIM_PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
        DIM_PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
        DIM_PRODUCT_ROLLUP.EFFECTIVE_END_DATE,
        DIM_PRODUCT_ROLLUP.BATCH_EVENT_ID,
        DIM_PRODUCT_ROLLUP.CREATED_TIMESTAMP,
        DIM_PRODUCT_ROLLUP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRODUCT_ROLLUP
 ORDER BY DIM_PRODUCT_ROLLUP.PRODUCT_ROLLUP_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_VISITOR_AUTHID_DBD_20_seg_mrkt_dash5
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 FIRST_VISIT_TIMESTAMP ENCODING GCDDELTA,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 VISITOR_ID
)
AS
 SELECT FACT_VISITOR_AUTHID.AUTH_ID,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP,
        FACT_VISITOR_AUTHID.BATCH_EVENT_ID,
        FACT_VISITOR_AUTHID.CREATED_TIMESTAMP,
        FACT_VISITOR_AUTHID.UPDATED_TIMESTAMP,
        FACT_VISITOR_AUTHID.VISITOR_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 ORDER BY FACT_VISITOR_AUTHID.AUTH_ID,
          FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
          FACT_VISITOR_AUTHID.TAX_YEAR
SEGMENTED BY hash(FACT_VISITOR_AUTHID.AUTH_ID, FACT_VISITOR_AUTHID.VISITOR_OMT_ID, FACT_VISITOR_AUTHID.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_VISITOR_AUTHID_DBD_8_seg_mrkt_dash5
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 FIRST_VISIT_TIMESTAMP ENCODING GCDDELTA
)
AS
 SELECT FACT_VISITOR_AUTHID.AUTH_ID,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 ORDER BY FACT_VISITOR_AUTHID.AUTH_ID,
          FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
          FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP
SEGMENTED BY hash(FACT_VISITOR_AUTHID.VISITOR_OMT_ID, FACT_VISITOR_AUTHID.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAXFILER /*+createtype(P)*/
(
 TAXFILER_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TAXFILER.TAXFILER_ID,
        DIM_TAXFILER.PRIMARY_ID,
        DIM_TAXFILER.SECONDARY_ID,
        DIM_TAXFILER.BATCH_EVENT_ID,
        DIM_TAXFILER.CREATED_TIMESTAMP,
        DIM_TAXFILER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TAXFILER
 ORDER BY DIM_TAXFILER.PRIMARY_ID
SEGMENTED BY hash(DIM_TAXFILER.PRIMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRODUCT_ALIAS /*+createtype(P)*/
(
 PRODUCT_ALIAS_ID,
 PRODUCT_ID,
 ITEM_ALIAS_CODE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID,
        DIM_PRODUCT_ALIAS.PRODUCT_ID,
        DIM_PRODUCT_ALIAS.ITEM_ALIAS_CODE,
        DIM_PRODUCT_ALIAS.BATCH_EVENT_ID,
        DIM_PRODUCT_ALIAS.CREATED_TIMESTAMP,
        DIM_PRODUCT_ALIAS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRODUCT_ALIAS
 ORDER BY DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID
SEGMENTED BY hash(DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRODUCT_ALIAS_DBD_21_seg_mrkt_dash5
(
 PRODUCT_ALIAS_ID ENCODING DELTARANGE_COMP,
 PRODUCT_ID ENCODING DELTARANGE_COMP,
 ITEM_ALIAS_CODE,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING COMMONDELTA_COMP
)
AS
 SELECT DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID,
        DIM_PRODUCT_ALIAS.PRODUCT_ID,
        DIM_PRODUCT_ALIAS.ITEM_ALIAS_CODE,
        DIM_PRODUCT_ALIAS.BATCH_EVENT_ID,
        DIM_PRODUCT_ALIAS.CREATED_TIMESTAMP,
        DIM_PRODUCT_ALIAS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRODUCT_ALIAS
 ORDER BY DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID
SEGMENTED BY hash(DIM_PRODUCT_ALIAS.PRODUCT_ALIAS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRIORITY_CODE /*+createtype(P)*/
(
 PRIORITY_ID,
 PRIORITY_CODE,
 SOURCE_CODE_ALIAS,
 ALLIANCE,
 SPONSOR_TYPE,
 MARKETING_DESCRIPTION,
 SALES_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_PRIORITY_CODE.PRIORITY_ID,
        DIM_PRIORITY_CODE.PRIORITY_CODE,
        DIM_PRIORITY_CODE.SOURCE_CODE_ALIAS,
        DIM_PRIORITY_CODE.ALLIANCE,
        DIM_PRIORITY_CODE.SPONSOR_TYPE,
        DIM_PRIORITY_CODE.MARKETING_DESCRIPTION,
        DIM_PRIORITY_CODE.SALES_DESCRIPTION,
        DIM_PRIORITY_CODE.BATCH_EVENT_ID,
        DIM_PRIORITY_CODE.CREATED_TIMESTAMP,
        DIM_PRIORITY_CODE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRIORITY_CODE
 ORDER BY DIM_PRIORITY_CODE.PRIORITY_ID
SEGMENTED BY hash(DIM_PRIORITY_CODE.PRIORITY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN_DBD_25_seg_mrkt_dash5
(
 AUTH_CREDIT_CAMPAIGN_ID ENCODING DELTAVAL,
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 NEAUTH_TIMESTAMP ENCODING GCDDELTA,
 NEAUTH_TAX_DATE_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 CAMPAIGN_ID ENCODING DELTARANGE_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING COMMONDELTA_COMP
)
AS
 SELECT SUB_AUTH_CREDIT_CAMPAIGN.AUTH_CREDIT_CAMPAIGN_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.AUTH_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.NEAUTH_TIMESTAMP,
        SUB_AUTH_CREDIT_CAMPAIGN.NEAUTH_TAX_DATE_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.TAX_YEAR,
        SUB_AUTH_CREDIT_CAMPAIGN.CAMPAIGN_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.BATCH_EVENT_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.CREATED_TIMESTAMP,
        SUB_AUTH_CREDIT_CAMPAIGN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN
 ORDER BY SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN_DBD_8_seg_nancy_final_101
(
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 NEAUTH_TAX_DATE_ID ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 CAMPAIGN_ID ENCODING DELTARANGE_COMP
)
AS
 SELECT SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.AUTH_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.NEAUTH_TAX_DATE_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.TAX_YEAR,
        SUB_AUTH_CREDIT_CAMPAIGN.CAMPAIGN_ID
 FROM CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN
 ORDER BY SUB_AUTH_CREDIT_CAMPAIGN.NEAUTH_TAX_DATE_ID,
          SUB_AUTH_CREDIT_CAMPAIGN.TAX_YEAR,
          SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_AUTH_CREDIT_CAMPAIGN.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_PRS /*+createtype(P)*/
(
 PRS_ID,
 AUTH_ID,
 TAX_YEAR,
 PRS_TIMESTAMP,
 SCORE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_PRS.PRS_ID,
        FACT_PRS.AUTH_ID,
        FACT_PRS.TAX_YEAR,
        FACT_PRS.PRS_TIMESTAMP,
        FACT_PRS.SCORE,
        FACT_PRS.BATCH_EVENT_ID,
        FACT_PRS.CREATED_TIMESTAMP,
        FACT_PRS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_PRS
 ORDER BY FACT_PRS.AUTH_ID,
          FACT_PRS.TAX_YEAR,
          FACT_PRS.PRS_TIMESTAMP
SEGMENTED BY hash(FACT_PRS.PRS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_BUNDLE_ROLLUP /*+createtype(P)*/
(
 BUNDLE_ROLLUP_ID,
 PRODUCT_ID,
 BUNDLE_NAME,
 SUB_BUNDLE_NAME,
 PRODUCT_ALIAS_CODE,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_BUNDLE_ROLLUP.BUNDLE_ROLLUP_ID,
        DIM_BUNDLE_ROLLUP.PRODUCT_ID,
        DIM_BUNDLE_ROLLUP.BUNDLE_NAME,
        DIM_BUNDLE_ROLLUP.SUB_BUNDLE_NAME,
        DIM_BUNDLE_ROLLUP.PRODUCT_ALIAS_CODE,
        DIM_BUNDLE_ROLLUP.TAX_YEAR,
        DIM_BUNDLE_ROLLUP.BATCH_EVENT_ID,
        DIM_BUNDLE_ROLLUP.CREATED_TIMESTAMP,
        DIM_BUNDLE_ROLLUP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_BUNDLE_ROLLUP
 ORDER BY DIM_BUNDLE_ROLLUP.BUNDLE_ROLLUP_ID
SEGMENTED BY hash(DIM_BUNDLE_ROLLUP.BUNDLE_ROLLUP_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_AUTH_ID_PRS /*+createtype(P)*/
(
 AUTH_ID_PRS_ID,
 AUTH_ID,
 TAX_YEAR,
 AVERAGE_SCORE,
 SCORE_COUNT,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_AUTH_ID_PRS.AUTH_ID_PRS_ID,
        AGG_AUTH_ID_PRS.AUTH_ID,
        AGG_AUTH_ID_PRS.TAX_YEAR,
        AGG_AUTH_ID_PRS.AVERAGE_SCORE,
        AGG_AUTH_ID_PRS.SCORE_COUNT,
        AGG_AUTH_ID_PRS.BATCH_EVENT_ID,
        AGG_AUTH_ID_PRS.CREATED_TIMESTAMP,
        AGG_AUTH_ID_PRS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_AUTH_ID_PRS
 ORDER BY AGG_AUTH_ID_PRS.AUTH_ID,
          AGG_AUTH_ID_PRS.TAX_YEAR
SEGMENTED BY hash(AGG_AUTH_ID_PRS.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_POST_KEYWORD /*+createtype(P)*/
(
 POST_KEYWORD_ID,
 POST_KEYWORD,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_POST_KEYWORD.POST_KEYWORD_ID,
        DIM_POST_KEYWORD.POST_KEYWORD,
        DIM_POST_KEYWORD.BATCH_EVENT_ID,
        DIM_POST_KEYWORD.CREATED_TIMESTAMP,
        DIM_POST_KEYWORD.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_POST_KEYWORD
 ORDER BY DIM_POST_KEYWORD.POST_KEYWORD_ID
SEGMENTED BY hash(DIM_POST_KEYWORD.POST_KEYWORD_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_MULTIFILER_REASON /*+createtype(P)*/
(
 MULTIFILER_REASON_ID,
 REASON,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_MULTIFILER_REASON.MULTIFILER_REASON_ID,
        DIM_MULTIFILER_REASON.REASON,
        DIM_MULTIFILER_REASON.BATCH_EVENT_ID,
        DIM_MULTIFILER_REASON.CREATED_TIMESTAMP,
        DIM_MULTIFILER_REASON.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_MULTIFILER_REASON
 ORDER BY DIM_MULTIFILER_REASON.MULTIFILER_REASON_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING BLOCKDICT_COMP,
 CLICKSTREAM_ID ENCODING DELTARANGE_COMP,
 START_EXPERIENCE,
 FIRST_START_TIMESTAMP ENCODING GCDDELTA,
 BATCH_EVENT_ID ENCODING BLOCKDICT_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 FIRST_START_TAX_DATE_ID ENCODING DELTARANGE_COMP,
 FIRST_START_USER_AGENT_ID ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_CLICKSTREAM_TT_START_FIRST.AUTH_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_TT_START_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.START_EXPERIENCE,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_TAX_DATE_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_USER_AGENT_ID
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST
 ORDER BY SUB_CLICKSTREAM_TT_START_FIRST.AUTH_ID,
          SUB_CLICKSTREAM_TT_START_FIRST.TAX_YEAR
SEGMENTED BY hash(SUB_CLICKSTREAM_TT_START_FIRST.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST1 /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 CLICKSTREAM_ID,
 START_EXPERIENCE,
 FIRST_START_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 FIRST_START_TAX_DATE_ID,
 FIRST_START_USER_AGENT_ID
)
AS
 SELECT SUB_CLICKSTREAM_TT_START_FIRST.AUTH_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_TT_START_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.START_EXPERIENCE,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_TAX_DATE_ID,
        SUB_CLICKSTREAM_TT_START_FIRST.FIRST_START_USER_AGENT_ID
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST
 ORDER BY SUB_CLICKSTREAM_TT_START_FIRST.AUTH_ID,
          SUB_CLICKSTREAM_TT_START_FIRST.TAX_YEAR
SEGMENTED BY hash(SUB_CLICKSTREAM_TT_START_FIRST.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_URL_PARAMETERS /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 ZNA,
 ZNP,
 SRID,
 ADID,
 PRIORITY_CODE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_URL_PARAMETERS.CLICKSTREAM_ID,
        FACT_URL_PARAMETERS.ZNA,
        FACT_URL_PARAMETERS.ZNP,
        FACT_URL_PARAMETERS.SRID,
        FACT_URL_PARAMETERS.ADID,
        FACT_URL_PARAMETERS.PRIORITY_CODE,
        FACT_URL_PARAMETERS.BATCH_EVENT_ID,
        FACT_URL_PARAMETERS.CREATED_TIMESTAMP,
        FACT_URL_PARAMETERS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_URL_PARAMETERS
 ORDER BY FACT_URL_PARAMETERS.CLICKSTREAM_ID
SEGMENTED BY hash(FACT_URL_PARAMETERS.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_SOURCE_APPLICATION /*+createtype(P)*/
(
 SOURCE_APPLICATION_ID,
 SOURCE_APPLICATION_DESC,
 SOURCE_APPLICATION_VALUE,
 STANDARD_APPLICATION_VALUE,
 ROLLUP_APPLICATION_VALUE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 USER_AGENT_ID
)
AS
 SELECT DIM_SOURCE_APPLICATION.SOURCE_APPLICATION_ID,
        DIM_SOURCE_APPLICATION.SOURCE_APPLICATION_DESC,
        DIM_SOURCE_APPLICATION.SOURCE_APPLICATION_VALUE,
        DIM_SOURCE_APPLICATION.STANDARD_APPLICATION_VALUE,
        DIM_SOURCE_APPLICATION.ROLLUP_APPLICATION_VALUE,
        DIM_SOURCE_APPLICATION.BATCH_EVENT_ID,
        DIM_SOURCE_APPLICATION.CREATED_TIMESTAMP,
        DIM_SOURCE_APPLICATION.UPDATED_TIMESTAMP,
        DIM_SOURCE_APPLICATION.USER_AGENT_ID
 FROM CTG_ANALYTICS.DIM_SOURCE_APPLICATION
 ORDER BY DIM_SOURCE_APPLICATION.SOURCE_APPLICATION_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAXPREP_SESSION /*+createtype(P)*/
(
 TAXPREP_SESSION_ID,
 SESSION_LOG_KEY,
 AUTH_ID,
 TAX_YEAR,
 TAX_DATE_ID,
 SESSION_TIMESTAMP,
 SESSION_TYPE,
 SKU_ROLLUP_ID,
 ORIGINAL_SKU_ROLLUP_ID,
 PRICE_PRIORITY_ID,
 CURRENT_PRIORITY_ID,
 CREDIT_PRIORITY_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID,
        FACT_TAXPREP_SESSION.SESSION_LOG_KEY,
        FACT_TAXPREP_SESSION.AUTH_ID,
        FACT_TAXPREP_SESSION.TAX_YEAR,
        FACT_TAXPREP_SESSION.TAX_DATE_ID,
        FACT_TAXPREP_SESSION.SESSION_TIMESTAMP,
        FACT_TAXPREP_SESSION.SESSION_TYPE,
        FACT_TAXPREP_SESSION.SKU_ROLLUP_ID,
        FACT_TAXPREP_SESSION.ORIGINAL_SKU_ROLLUP_ID,
        FACT_TAXPREP_SESSION.PRICE_PRIORITY_ID,
        FACT_TAXPREP_SESSION.CURRENT_PRIORITY_ID,
        FACT_TAXPREP_SESSION.CREDIT_PRIORITY_ID,
        FACT_TAXPREP_SESSION.BATCH_EVENT_ID,
        FACT_TAXPREP_SESSION.CREATED_TIMESTAMP,
        FACT_TAXPREP_SESSION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_TAXPREP_SESSION
 ORDER BY FACT_TAXPREP_SESSION.AUTH_ID,
          FACT_TAXPREP_SESSION.TAX_YEAR
SEGMENTED BY hash(FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAXPREP_SESSION_DBD_10_seg_mrkt_dash5
(
 TAXPREP_SESSION_ID ENCODING DELTARANGE_COMP,
 SESSION_TIMESTAMP ENCODING GCDDELTA,
 SKU_ROLLUP_ID ENCODING RLE
)
AS
 SELECT FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID,
        FACT_TAXPREP_SESSION.SESSION_TIMESTAMP,
        FACT_TAXPREP_SESSION.SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_TAXPREP_SESSION
 ORDER BY FACT_TAXPREP_SESSION.SKU_ROLLUP_ID,
          FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID
SEGMENTED BY hash(FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAXPREP_SESSION_DBD_35_seg_nancy_final_101
(
 TAXPREP_SESSION_ID ENCODING DELTARANGE_COMP,
 SESSION_LOG_KEY ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 TAX_DATE_ID ENCODING COMMONDELTA_COMP,
 SESSION_TIMESTAMP ENCODING GCDDELTA,
 SESSION_TYPE,
 SKU_ROLLUP_ID ENCODING BLOCKDICT_COMP,
 ORIGINAL_SKU_ROLLUP_ID ENCODING BLOCKDICT_COMP,
 PRICE_PRIORITY_ID ENCODING BLOCKDICT_COMP,
 CURRENT_PRIORITY_ID ENCODING BLOCKDICT_COMP,
 CREDIT_PRIORITY_ID ENCODING BLOCKDICT_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID,
        FACT_TAXPREP_SESSION.SESSION_LOG_KEY,
        FACT_TAXPREP_SESSION.AUTH_ID,
        FACT_TAXPREP_SESSION.TAX_YEAR,
        FACT_TAXPREP_SESSION.TAX_DATE_ID,
        FACT_TAXPREP_SESSION.SESSION_TIMESTAMP,
        FACT_TAXPREP_SESSION.SESSION_TYPE,
        FACT_TAXPREP_SESSION.SKU_ROLLUP_ID,
        FACT_TAXPREP_SESSION.ORIGINAL_SKU_ROLLUP_ID,
        FACT_TAXPREP_SESSION.PRICE_PRIORITY_ID,
        FACT_TAXPREP_SESSION.CURRENT_PRIORITY_ID,
        FACT_TAXPREP_SESSION.CREDIT_PRIORITY_ID,
        FACT_TAXPREP_SESSION.BATCH_EVENT_ID,
        FACT_TAXPREP_SESSION.CREATED_TIMESTAMP,
        FACT_TAXPREP_SESSION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_TAXPREP_SESSION
 ORDER BY FACT_TAXPREP_SESSION.AUTH_ID,
          FACT_TAXPREP_SESSION.TAX_YEAR
SEGMENTED BY hash(FACT_TAXPREP_SESSION.TAXPREP_SESSION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_UPSELL_INFORMATION /*+createtype(P)*/
(
 UPSELL_INFORMATION_ID,
 UPSELL_OFFER_ID,
 UPSELL_INFORMATION,
 TAX_YEAR,
 FROM_PRODUCT_ID,
 TO_PRODUCT_ID,
 FROM_PRODUCT_BUNDLE_ID,
 TO_PRODUCT_BUNDLE_ID,
 SOURCE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_UPSELL_INFORMATION.UPSELL_INFORMATION_ID,
        DIM_UPSELL_INFORMATION.UPSELL_OFFER_ID,
        DIM_UPSELL_INFORMATION.UPSELL_INFORMATION,
        DIM_UPSELL_INFORMATION.TAX_YEAR,
        DIM_UPSELL_INFORMATION.FROM_PRODUCT_ID,
        DIM_UPSELL_INFORMATION.TO_PRODUCT_ID,
        DIM_UPSELL_INFORMATION.FROM_PRODUCT_BUNDLE_ID,
        DIM_UPSELL_INFORMATION.TO_PRODUCT_BUNDLE_ID,
        DIM_UPSELL_INFORMATION.SOURCE,
        DIM_UPSELL_INFORMATION.BATCH_EVENT_ID,
        DIM_UPSELL_INFORMATION.CREATED_TIMESTAMP,
        DIM_UPSELL_INFORMATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_UPSELL_INFORMATION
 ORDER BY DIM_UPSELL_INFORMATION.UPSELL_INFORMATION_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_UPSELL_OFFER /*+createtype(P)*/
(
 UPSELL_OFFER_ID,
 TAX_YEAR,
 UPGRADE_OFFER_CATEGORY_ROLLUP,
 TAX_SITUATION,
 UPSELL_SEEN_CATEGORY,
 OFFER_INFORMATION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_UPSELL_OFFER.UPSELL_OFFER_ID,
        DIM_UPSELL_OFFER.TAX_YEAR,
        DIM_UPSELL_OFFER.UPGRADE_OFFER_CATEGORY_ROLLUP,
        DIM_UPSELL_OFFER.TAX_SITUATION,
        DIM_UPSELL_OFFER.UPSELL_SEEN_CATEGORY,
        DIM_UPSELL_OFFER.OFFER_INFORMATION,
        DIM_UPSELL_OFFER.BATCH_EVENT_ID,
        DIM_UPSELL_OFFER.CREATED_TIMESTAMP,
        DIM_UPSELL_OFFER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_UPSELL_OFFER
 ORDER BY DIM_UPSELL_OFFER.UPSELL_OFFER_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_UPSELL /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 UPSELL_OFFER_ID,
 UPSELL_INFORMATION_ID,
 AUTH_ID,
 TAX_YEAR,
 OFFER_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_CLICKSTREAM_UPSELL.CLICKSTREAM_ID,
        FACT_CLICKSTREAM_UPSELL.UPSELL_OFFER_ID,
        FACT_CLICKSTREAM_UPSELL.UPSELL_INFORMATION_ID,
        FACT_CLICKSTREAM_UPSELL.AUTH_ID,
        FACT_CLICKSTREAM_UPSELL.TAX_YEAR,
        FACT_CLICKSTREAM_UPSELL.OFFER_TIMESTAMP,
        FACT_CLICKSTREAM_UPSELL.BATCH_EVENT_ID,
        FACT_CLICKSTREAM_UPSELL.CREATED_TIMESTAMP,
        FACT_CLICKSTREAM_UPSELL.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM_UPSELL
 ORDER BY FACT_CLICKSTREAM_UPSELL.CLICKSTREAM_ID
SEGMENTED BY hash(FACT_CLICKSTREAM_UPSELL.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_GEO_LOCATION /*+createtype(P)*/
(
 GEO_LOCATION_ID,
 COUNTRY,
 STATE_ABBREVIATION,
 DMA_ID,
 CITY,
 ZIP_CODE,
 TAXABLE_STATE_FLAG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_GEO_LOCATION.GEO_LOCATION_ID,
        DIM_GEO_LOCATION.COUNTRY,
        DIM_GEO_LOCATION.STATE_ABBREVIATION,
        DIM_GEO_LOCATION.DMA_ID,
        DIM_GEO_LOCATION.CITY,
        DIM_GEO_LOCATION.ZIP_CODE,
        DIM_GEO_LOCATION.TAXABLE_STATE_FLAG,
        DIM_GEO_LOCATION.BATCH_EVENT_ID,
        DIM_GEO_LOCATION.CREATED_TIMESTAMP,
        DIM_GEO_LOCATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_GEO_LOCATION
 ORDER BY DIM_GEO_LOCATION.GEO_LOCATION_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_FILING_TYPE /*+createtype(P)*/
(
 FILING_TYPE_ID,
 FILING_TYPE,
 FORM_FAMILY,
 AGENCY,
 ETX_CLASS_ID,
 DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_FILING_TYPE.FILING_TYPE_ID,
        DIM_FILING_TYPE.FILING_TYPE,
        DIM_FILING_TYPE.FORM_FAMILY,
        DIM_FILING_TYPE.AGENCY,
        DIM_FILING_TYPE.ETX_CLASS_ID,
        DIM_FILING_TYPE.DESCRIPTION,
        DIM_FILING_TYPE.BATCH_EVENT_ID,
        DIM_FILING_TYPE.CREATED_TIMESTAMP,
        DIM_FILING_TYPE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_FILING_TYPE
 ORDER BY DIM_FILING_TYPE.FILING_TYPE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_HELP_USAGE /*+createtype(P)*/
(
 HELP_USAGE_ID,
 HELP_USAGE_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_HELP_USAGE.HELP_USAGE_ID,
        DIM_HELP_USAGE.HELP_USAGE_DESCRIPTION,
        DIM_HELP_USAGE.BATCH_EVENT_ID,
        DIM_HELP_USAGE.CREATED_TIMESTAMP,
        DIM_HELP_USAGE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_HELP_USAGE
 ORDER BY DIM_HELP_USAGE.HELP_USAGE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_SEGMENT /*+createtype(P)*/
(
 SEGMENT_ID,
 SEGMENT_CODE,
 SEGMENT_GROUP,
 CUSTOMER_TYPE,
 CUSTOMER_TYPE_RANK,
 DEFINITION,
 YEARS_PURCHASED,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_SEGMENT.SEGMENT_ID,
        DIM_SEGMENT.SEGMENT_CODE,
        DIM_SEGMENT.SEGMENT_GROUP,
        DIM_SEGMENT.CUSTOMER_TYPE,
        DIM_SEGMENT.CUSTOMER_TYPE_RANK,
        DIM_SEGMENT.DEFINITION,
        DIM_SEGMENT.YEARS_PURCHASED,
        DIM_SEGMENT.TAX_YEAR,
        DIM_SEGMENT.BATCH_EVENT_ID,
        DIM_SEGMENT.CREATED_TIMESTAMP,
        DIM_SEGMENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_SEGMENT
 ORDER BY DIM_SEGMENT.SEGMENT_CODE,
          DIM_SEGMENT.TAX_YEAR
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION /*+createtype(P)*/
(
 PRIMARY_FILER_LOCATION_ID,
 PRIMARY_ID,
 BILLING_STATE_CODE,
 STATE_RECEIVED_TIMESTAMP,
 BILLING_ZIP_CODE,
 ZIP_RECEIVED_TIMESTAMP,
 RESIDENCE_STATE_CODE,
 RESIDENCE_ZIP_CODE,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_PRIMARY_FILER_LOCATION.PRIMARY_FILER_LOCATION_ID,
        DIM_PRIMARY_FILER_LOCATION.PRIMARY_ID,
        DIM_PRIMARY_FILER_LOCATION.BILLING_STATE_CODE,
        DIM_PRIMARY_FILER_LOCATION.STATE_RECEIVED_TIMESTAMP,
        DIM_PRIMARY_FILER_LOCATION.BILLING_ZIP_CODE,
        DIM_PRIMARY_FILER_LOCATION.ZIP_RECEIVED_TIMESTAMP,
        DIM_PRIMARY_FILER_LOCATION.RESIDENCE_STATE_CODE,
        DIM_PRIMARY_FILER_LOCATION.RESIDENCE_ZIP_CODE,
        DIM_PRIMARY_FILER_LOCATION.TAX_YEAR,
        DIM_PRIMARY_FILER_LOCATION.BATCH_EVENT_ID,
        DIM_PRIMARY_FILER_LOCATION.CREATED_TIMESTAMP,
        DIM_PRIMARY_FILER_LOCATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_PRIMARY_FILER_LOCATION
 ORDER BY DIM_PRIMARY_FILER_LOCATION.PRIMARY_FILER_LOCATION_ID
SEGMENTED BY hash(DIM_PRIMARY_FILER_LOCATION.PRIMARY_FILER_LOCATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_SITE_AREA /*+createtype(P)*/
(
 SITE_AREA_ID,
 SITE_AREA,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_SITE_AREA.SITE_AREA_ID,
        DIM_SITE_AREA.SITE_AREA,
        DIM_SITE_AREA.BATCH_EVENT_ID,
        DIM_SITE_AREA.CREATED_TIMESTAMP,
        DIM_SITE_AREA.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_SITE_AREA
 ORDER BY DIM_SITE_AREA.SITE_AREA_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE /*+createtype(P)*/
(
 SESSION_TO_COMPLETE_ID,
 AUTH_ID,
 TAX_YEAR,
 SESSION_COUNT,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_SESSIONS_TO_COMPLETE.SESSION_TO_COMPLETE_ID,
        AGG_SESSIONS_TO_COMPLETE.AUTH_ID,
        AGG_SESSIONS_TO_COMPLETE.TAX_YEAR,
        AGG_SESSIONS_TO_COMPLETE.SESSION_COUNT,
        AGG_SESSIONS_TO_COMPLETE.BATCH_EVENT_ID,
        AGG_SESSIONS_TO_COMPLETE.CREATED_TIMESTAMP,
        AGG_SESSIONS_TO_COMPLETE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE
 ORDER BY AGG_SESSIONS_TO_COMPLETE.AUTH_ID,
          AGG_SESSIONS_TO_COMPLETE.TAX_YEAR
SEGMENTED BY hash(AGG_SESSIONS_TO_COMPLETE.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_SCREEN /*+createtype(P)*/
(
 SCREEN_ID,
 APPLICATION_ASSIGNED_ID,
 CHANNEL,
 SOURCE_APPLICATION_CODE,
 SOURCE_APPLICATION_SECTION,
 SOURCE_APPLICATION_SECTION_CONTEXT,
 SOURCE_APPLICATION_GROUP,
 SOURCE_APPLICATION_GROUP_DETAIL,
 FUNNEL_SORT_RANK,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_SCREEN.SCREEN_ID,
        DIM_SCREEN.APPLICATION_ASSIGNED_ID,
        DIM_SCREEN.CHANNEL,
        DIM_SCREEN.SOURCE_APPLICATION_CODE,
        DIM_SCREEN.SOURCE_APPLICATION_SECTION,
        DIM_SCREEN.SOURCE_APPLICATION_SECTION_CONTEXT,
        DIM_SCREEN.SOURCE_APPLICATION_GROUP,
        DIM_SCREEN.SOURCE_APPLICATION_GROUP_DETAIL,
        DIM_SCREEN.FUNNEL_SORT_RANK,
        DIM_SCREEN.BATCH_EVENT_ID,
        DIM_SCREEN.CREATED_TIMESTAMP,
        DIM_SCREEN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_SCREEN
 ORDER BY DIM_SCREEN.SCREEN_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_SKU_SELECTION /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 AUTH_ID,
 VISITOR_OMT_ID,
 TAX_YEAR,
 TAX_DATE_ID,
 SERVER_TIMESTAMP,
 RECOMMEND_REASON,
 RECOMMENDED_SKU_ROLLUP_ID,
 SELECTED_SKU_ROLLUP_ID,
 DEFAULT_RECOMMENDED_SKU_ROLLUP_ID,
 EXPERIENCE_LOCATION_SEEN,
 EXPERIENCE_SUB_LOCATION_SEEN,
 EXPERIENCE_LOCATION_RECOMMENDED,
 EXPERIENCE_SUB_LOCATION_RECOMMENDED,
 SITUATION_CHANGED,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID
)
AS
 SELECT FACT_SKU_SELECTION.CLICKSTREAM_ID,
        FACT_SKU_SELECTION.AUTH_ID,
        FACT_SKU_SELECTION.VISITOR_OMT_ID,
        FACT_SKU_SELECTION.TAX_YEAR,
        FACT_SKU_SELECTION.TAX_DATE_ID,
        FACT_SKU_SELECTION.SERVER_TIMESTAMP,
        FACT_SKU_SELECTION.RECOMMEND_REASON,
        FACT_SKU_SELECTION.RECOMMENDED_SKU_ROLLUP_ID,
        FACT_SKU_SELECTION.SELECTED_SKU_ROLLUP_ID,
        FACT_SKU_SELECTION.DEFAULT_RECOMMENDED_SKU_ROLLUP_ID,
        FACT_SKU_SELECTION.EXPERIENCE_LOCATION_SEEN,
        FACT_SKU_SELECTION.EXPERIENCE_SUB_LOCATION_SEEN,
        FACT_SKU_SELECTION.EXPERIENCE_LOCATION_RECOMMENDED,
        FACT_SKU_SELECTION.EXPERIENCE_SUB_LOCATION_RECOMMENDED,
        FACT_SKU_SELECTION.SITUATION_CHANGED,
        FACT_SKU_SELECTION.BATCH_EVENT_ID,
        FACT_SKU_SELECTION.CREATED_TIMESTAMP,
        FACT_SKU_SELECTION.UPDATED_TIMESTAMP,
        FACT_SKU_SELECTION.VISITOR_ID
 FROM CTG_ANALYTICS.FACT_SKU_SELECTION
 ORDER BY FACT_SKU_SELECTION.CLICKSTREAM_ID
SEGMENTED BY hash(FACT_SKU_SELECTION.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_SKU_ROLLUP /*+createtype(P)*/
(
 SKU_ROLLUP_ID,
 SKU_ID,
 SKU_DESCRIPTION,
 SKU_ROLLUP,
 PAID_FLAG,
 SKU_NAME,
 DISPLAY_SKU_NAME_WITH_SORT,
 SKU_SORT,
 DISPLAY_SKU_NAME,
 PRODUCT_EDITION_DESCRIPTION,
 PRODUCT_CODE_ROLLUP,
 EFFECTIVE_START_TAX_YEAR,
 EFFECTIVE_END_TAX_YEAR,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_SKU_ROLLUP.SKU_ROLLUP_ID,
        DIM_SKU_ROLLUP.SKU_ID,
        DIM_SKU_ROLLUP.SKU_DESCRIPTION,
        DIM_SKU_ROLLUP.SKU_ROLLUP,
        DIM_SKU_ROLLUP.PAID_FLAG,
        DIM_SKU_ROLLUP.SKU_NAME,
        DIM_SKU_ROLLUP.DISPLAY_SKU_NAME_WITH_SORT,
        DIM_SKU_ROLLUP.SKU_SORT,
        DIM_SKU_ROLLUP.DISPLAY_SKU_NAME,
        DIM_SKU_ROLLUP.PRODUCT_EDITION_DESCRIPTION,
        DIM_SKU_ROLLUP.PRODUCT_CODE_ROLLUP,
        DIM_SKU_ROLLUP.EFFECTIVE_START_TAX_YEAR,
        DIM_SKU_ROLLUP.EFFECTIVE_END_TAX_YEAR,
        DIM_SKU_ROLLUP.EFFECTIVE_START_DATE,
        DIM_SKU_ROLLUP.EFFECTIVE_END_DATE,
        DIM_SKU_ROLLUP.BATCH_EVENT_ID,
        DIM_SKU_ROLLUP.CREATED_TIMESTAMP,
        DIM_SKU_ROLLUP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_SKU_ROLLUP
 ORDER BY DIM_SKU_ROLLUP.SKU_ROLLUP_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_SKU_ROLLUP_DBD_6_rep_nancy_final_101
(
 SKU_ROLLUP_ID ENCODING COMMONDELTA_COMP,
 SKU_ROLLUP,
 DISPLAY_SKU_NAME_WITH_SORT
)
AS
 SELECT DIM_SKU_ROLLUP.SKU_ROLLUP_ID,
        DIM_SKU_ROLLUP.SKU_ROLLUP,
        DIM_SKU_ROLLUP.DISPLAY_SKU_NAME_WITH_SORT
 FROM CTG_ANALYTICS.DIM_SKU_ROLLUP
 ORDER BY DIM_SKU_ROLLUP.SKU_ROLLUP_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_STATE /*+createtype(P)*/
(
 STATE_ID,
 STATE_NAME,
 STATE_CODE,
 STATE_TYPE,
 TAXABLE,
 FFA,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_STATE.STATE_ID,
        DIM_STATE.STATE_NAME,
        DIM_STATE.STATE_CODE,
        DIM_STATE.STATE_TYPE,
        DIM_STATE.TAXABLE,
        DIM_STATE.FFA,
        DIM_STATE.EFFECTIVE_START_DATE,
        DIM_STATE.EFFECTIVE_END_DATE,
        DIM_STATE.BATCH_EVENT_ID,
        DIM_STATE.CREATED_TIMESTAMP,
        DIM_STATE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_STATE
 ORDER BY DIM_STATE.STATE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.AGG_SESSION_P1
(
 BOUNCE_FLAG ENCODING RLE,
 NONFFA_FLAG ENCODING RLE,
 PAGE_BOUNCE_FLAG ENCODING RLE,
 END_FORM ENCODING RLE,
 START_FORM ENCODING RLE,
 FIRST_START_EXPERIENCE ENCODING RLE,
 FIRST_CHANNEL_GROUP ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 FIRST_CHANNEL ENCODING RLE,
 AUTH_ID_COUNT ENCODING RLE,
 PAGE_COUNT ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 MAX_AUTH_CLICK_COUNT ENCODING RLE,
 HIT_COUNT,
 VISIT_NUM,
 FIRST_CAMPAIGN_ID,
 FIRST_CID,
 LANDING_PAGE,
 FIRST_USER_AGENT,
 FIRST_USER_AGENT_ID,
 FIRST_PAGE_URL,
 FIRST_PAGE_URL_ID,
 FIRST_POST_KEYWORD,
 REFERRER_PAGE_URL,
 REFERRER_PAGE_URL_ID,
 FIRST_COMPLETE_TIMESTAMP,
 FIRST_AUTHORIZATION_TIMESTAMP,
 FIRST_AUTH_TIMESTAMP,
 AUTH_ID,
 FIRST_START_TIMESTAMP,
 MIN_SERVER_TIMESTAMP,
 MAX_SERVER_TIMESTAMP,
 VISITOR_OMT_ID,
 FIRST_CLICKSTREAM_ID,
 LAST_CLICKSTREAM_ID,
 SESSION_ID,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY,
 SESSION_AUTH_TYPE_ID,
 SESSION_AUTH_TYPE_ID_AUTH_TIMESTAMP
)
AS
 SELECT AGG_SESSION.BOUNCE_FLAG,
        AGG_SESSION.NONFFA_FLAG,
        AGG_SESSION.PAGE_BOUNCE_FLAG,
        AGG_SESSION.END_FORM,
        AGG_SESSION.START_FORM,
        AGG_SESSION.FIRST_START_EXPERIENCE,
        AGG_SESSION.FIRST_CHANNEL_GROUP,
        AGG_SESSION.TAX_YEAR,
        AGG_SESSION.FIRST_CHANNEL,
        AGG_SESSION.AUTH_ID_COUNT,
        AGG_SESSION.PAGE_COUNT,
        AGG_SESSION.CREATED_TIMESTAMP,
        AGG_SESSION.UPDATED_TIMESTAMP,
        AGG_SESSION.BATCH_EVENT_ID,
        AGG_SESSION.MAX_AUTH_CLICK_COUNT,
        AGG_SESSION.HIT_COUNT,
        AGG_SESSION.VISIT_NUM,
        AGG_SESSION.FIRST_CAMPAIGN_ID,
        AGG_SESSION.FIRST_CID,
        AGG_SESSION.LANDING_PAGE,
        AGG_SESSION.FIRST_USER_AGENT,
        AGG_SESSION.FIRST_USER_AGENT_ID,
        AGG_SESSION.FIRST_PAGE_URL,
        AGG_SESSION.FIRST_PAGE_URL_ID,
        AGG_SESSION.FIRST_POST_KEYWORD,
        AGG_SESSION.REFERRER_PAGE_URL,
        AGG_SESSION.REFERRER_PAGE_URL_ID,
        AGG_SESSION.FIRST_COMPLETE_TIMESTAMP,
        AGG_SESSION.FIRST_AUTHORIZATION_TIMESTAMP,
        AGG_SESSION.FIRST_AUTH_TIMESTAMP,
        AGG_SESSION.AUTH_ID,
        AGG_SESSION.FIRST_START_TIMESTAMP,
        AGG_SESSION.MIN_SERVER_TIMESTAMP,
        AGG_SESSION.MAX_SERVER_TIMESTAMP,
        AGG_SESSION.VISITOR_OMT_ID,
        AGG_SESSION.FIRST_CLICKSTREAM_ID,
        AGG_SESSION.LAST_CLICKSTREAM_ID,
        AGG_SESSION.SESSION_ID,
        AGG_SESSION.VISITOR_ID,
        AGG_SESSION.SESSION_KEY,
        AGG_SESSION.SESSION_OMT_KEY,
        AGG_SESSION.SESSION_AUTH_TYPE_ID,
        AGG_SESSION.SESSION_AUTH_TYPE_ID_AUTH_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_SESSION
 ORDER BY AGG_SESSION.BOUNCE_FLAG,
          AGG_SESSION.NONFFA_FLAG,
          AGG_SESSION.PAGE_BOUNCE_FLAG,
          AGG_SESSION.END_FORM,
          AGG_SESSION.START_FORM,
          AGG_SESSION.FIRST_START_EXPERIENCE,
          AGG_SESSION.FIRST_CHANNEL_GROUP,
          AGG_SESSION.TAX_YEAR,
          AGG_SESSION.FIRST_CHANNEL,
          AGG_SESSION.AUTH_ID_COUNT,
          AGG_SESSION.PAGE_COUNT,
          AGG_SESSION.CREATED_TIMESTAMP,
          AGG_SESSION.UPDATED_TIMESTAMP,
          AGG_SESSION.BATCH_EVENT_ID,
          AGG_SESSION.MAX_AUTH_CLICK_COUNT,
          AGG_SESSION.VISIT_NUM,
          AGG_SESSION.FIRST_USER_AGENT_ID,
          AGG_SESSION.AUTH_ID,
          AGG_SESSION.FIRST_START_TIMESTAMP,
          AGG_SESSION.VISITOR_OMT_ID,
          AGG_SESSION.SESSION_ID
SEGMENTED BY hash(AGG_SESSION.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXPREP_SESSION /*+createtype(P)*/
(
 TAXPREP_SESSION_ID,
 CLICKSTREAM_ID,
 VISITOR_OMT_ID,
 VISIT_NUM,
 TIME_DIFFERENTIAL,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT BRIDGE_CLICKSTREAM_TAXPREP_SESSION.TAXPREP_SESSION_ID,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.CLICKSTREAM_ID,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.VISITOR_OMT_ID,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.VISIT_NUM,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.TIME_DIFFERENTIAL,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.BATCH_EVENT_ID,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.CREATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.UPDATED_TIMESTAMP,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.VISITOR_ID,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.SESSION_KEY,
        BRIDGE_CLICKSTREAM_TAXPREP_SESSION.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXPREP_SESSION
 ORDER BY BRIDGE_CLICKSTREAM_TAXPREP_SESSION.TAXPREP_SESSION_ID
SEGMENTED BY hash(BRIDGE_CLICKSTREAM_TAXPREP_SESSION.TAXPREP_SESSION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN_SP2
(
 FIRST_SESSION_FLAG ENCODING RLE,
 TAX_YEAR ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 VISITOR_CREDIT_CAMPAIGN_TAX_DATE_ID ENCODING RLE,
 VISIT_NUM ENCODING RLE,
 CAMPAIGN_ID ENCODING RLE,
 VISITOR_CREDIT_CAMPAIGN_SERVER_TIMESTAMP,
 VISITOR_OMT_ID,
 CLICKSTREAM_ID,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.FIRST_SESSION_FLAG,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.TAX_YEAR,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_CREDIT_CAMPAIGN_TAX_DATE_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISIT_NUM,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CAMPAIGN_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_CREDIT_CAMPAIGN_SERVER_TIMESTAMP,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_OMT_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_ID,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.SESSION_KEY,
        SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN
 ORDER BY SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.FIRST_SESSION_FLAG,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.TAX_YEAR,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.UPDATED_TIMESTAMP,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.BATCH_EVENT_ID,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CREATED_TIMESTAMP,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_CREDIT_CAMPAIGN_TAX_DATE_ID,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISIT_NUM,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CAMPAIGN_ID,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_OMT_ID,
          SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST /*+createtype(P)*/
(
 CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_ID,
 CLICKSTREAM_ID,
 RECIPE_ID,
 VISITOR_OMT_ID,
 VISIT_NUM,
 AUTH_ID,
 TAX_YEAR,
 FIRST_ASSIGNMENT_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID,
 SESSION_KEY,
 SESSION_OMT_KEY
)
AS
 SELECT SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.RECIPE_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.VISITOR_OMT_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.VISIT_NUM,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.AUTH_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.FIRST_ASSIGNMENT_TIMESTAMP,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.VISITOR_ID,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.SESSION_KEY,
        SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.SESSION_OMT_KEY
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST
 ORDER BY SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.CLICKSTREAM_ID,
          SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.RECIPE_ID
SEGMENTED BY hash(SUB_CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST.CLICKSTREAM_RECIPE_ASSIGNMENT_FIRST_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE /*+createtype(P)*/
(
 CLICKSTREAM_RECIPE_ID,
 CLICKSTREAM_ID,
 RECIPE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP
)
AS
 SELECT FACT_CLICKSTREAM_RECIPE.CLICKSTREAM_RECIPE_ID,
        FACT_CLICKSTREAM_RECIPE.CLICKSTREAM_ID,
        FACT_CLICKSTREAM_RECIPE.RECIPE_ID,
        FACT_CLICKSTREAM_RECIPE.BATCH_EVENT_ID,
        FACT_CLICKSTREAM_RECIPE.CREATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM_RECIPE
 ORDER BY FACT_CLICKSTREAM_RECIPE.CLICKSTREAM_ID,
          FACT_CLICKSTREAM_RECIPE.RECIPE_ID
SEGMENTED BY hash(FACT_CLICKSTREAM_RECIPE.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_RECIPE /*+createtype(P)*/
(
 RECIPE_ID,
 QB_RECIPE_ID,
 AB_TEST_ID,
 RECIPE_IN_BEACON,
 EXPERIENCE_DETAIL_LOCATION,
 EXPERIENCE_DETAIL_VALUE,
 RECIPE_NAME,
 RECIPE_HYPOTHESIS_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_RECIPE.RECIPE_ID,
        DIM_RECIPE.QB_RECIPE_ID,
        DIM_RECIPE.AB_TEST_ID,
        DIM_RECIPE.RECIPE_IN_BEACON,
        DIM_RECIPE.EXPERIENCE_DETAIL_LOCATION,
        DIM_RECIPE.EXPERIENCE_DETAIL_VALUE,
        DIM_RECIPE.RECIPE_NAME,
        DIM_RECIPE.RECIPE_HYPOTHESIS_DESCRIPTION,
        DIM_RECIPE.BATCH_EVENT_ID,
        DIM_RECIPE.CREATED_TIMESTAMP,
        DIM_RECIPE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_RECIPE
 ORDER BY DIM_RECIPE.RECIPE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_AB_TEST /*+createtype(P)*/
(
 AB_TEST_ID,
 QB_TEST_RECORD_ID,
 TEST_NAME,
 TEST_DESCRIPTION,
 TEST_HYPOTHESIS_DESCRIPTION,
 TEST_BASE_TYPE,
 PRODUCT_MANAGER_NAME,
 ANALYST_NAME,
 TEST_START_TIMESTAMP,
 TEST_END_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_AB_TEST.AB_TEST_ID,
        DIM_AB_TEST.QB_TEST_RECORD_ID,
        DIM_AB_TEST.TEST_NAME,
        DIM_AB_TEST.TEST_DESCRIPTION,
        DIM_AB_TEST.TEST_HYPOTHESIS_DESCRIPTION,
        DIM_AB_TEST.TEST_BASE_TYPE,
        DIM_AB_TEST.PRODUCT_MANAGER_NAME,
        DIM_AB_TEST.ANALYST_NAME,
        DIM_AB_TEST.TEST_START_TIMESTAMP,
        DIM_AB_TEST.TEST_END_TIMESTAMP,
        DIM_AB_TEST.BATCH_EVENT_ID,
        DIM_AB_TEST.CREATED_TIMESTAMP,
        DIM_AB_TEST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_AB_TEST
 ORDER BY DIM_AB_TEST.AB_TEST_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST
(
 TAXPREP_SESSION_ID ENCODING DELTARANGE_COMP,
 AUTH_ID ENCODING DELTARANGE_COMP,
 FIRST_SESSION_TIMESTAMP ENCODING GCDDELTA,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 FIRST_SESSION_TAX_DATE_ID ENCODING DELTARANGE_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING COMMONDELTA_COMP
)
AS
 SELECT SUB_TAXPREP_SESSION_FIRST.TAXPREP_SESSION_ID,
        SUB_TAXPREP_SESSION_FIRST.AUTH_ID,
        SUB_TAXPREP_SESSION_FIRST.FIRST_SESSION_TIMESTAMP,
        SUB_TAXPREP_SESSION_FIRST.TAX_YEAR,
        SUB_TAXPREP_SESSION_FIRST.FIRST_SESSION_TAX_DATE_ID,
        SUB_TAXPREP_SESSION_FIRST.BATCH_EVENT_ID,
        SUB_TAXPREP_SESSION_FIRST.CREATED_TIMESTAMP,
        SUB_TAXPREP_SESSION_FIRST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST
 ORDER BY SUB_TAXPREP_SESSION_FIRST.AUTH_ID
SEGMENTED BY hash(SUB_TAXPREP_SESSION_FIRST.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAXPREP_METHOD /*+createtype(P)*/
(
 TAXPREP_METHOD_ID,
 TAXPREP_METHOD_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TAXPREP_METHOD.TAXPREP_METHOD_ID,
        DIM_TAXPREP_METHOD.TAXPREP_METHOD_DESCRIPTION,
        DIM_TAXPREP_METHOD.BATCH_EVENT_ID,
        DIM_TAXPREP_METHOD.CREATED_TIMESTAMP,
        DIM_TAXPREP_METHOD.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TAXPREP_METHOD
 ORDER BY DIM_TAXPREP_METHOD.TAXPREP_METHOD_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE /*+createtype(P)*/
(
 TAXPREP_METHOD_SOURCE_ID,
 TAXPREP_METHOD_SOURCE_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TAXPREP_METHOD_SOURCE.TAXPREP_METHOD_SOURCE_ID,
        DIM_TAXPREP_METHOD_SOURCE.TAXPREP_METHOD_SOURCE_DESCRIPTION,
        DIM_TAXPREP_METHOD_SOURCE.BATCH_EVENT_ID,
        DIM_TAXPREP_METHOD_SOURCE.CREATED_TIMESTAMP,
        DIM_TAXPREP_METHOD_SOURCE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TAXPREP_METHOD_SOURCE
 ORDER BY DIM_TAXPREP_METHOD_SOURCE.TAXPREP_METHOD_SOURCE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 VISITOR_OMT_ID,
 AUTH_ID,
 FIRST_START_TIMESTAMP,
 FIRST_START_TAX_DATE_ID,
 TAX_YEAR,
 PRIOR_YEAR_TAXPREP_METHOD_ID,
 PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 VISITOR_ID
)
AS
 SELECT SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.CLICKSTREAM_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.VISITOR_OMT_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.AUTH_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.FIRST_START_TIMESTAMP,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.FIRST_START_TAX_DATE_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.TAX_YEAR,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.PRIOR_YEAR_TAXPREP_METHOD_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.BATCH_EVENT_ID,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.CREATED_TIMESTAMP,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.UPDATED_TIMESTAMP,
        SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.VISITOR_ID
 FROM CTG_ANALYTICS.SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST
 ORDER BY SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.CLICKSTREAM_ID
SEGMENTED BY hash(SUB_CLICKSTREAM_PRIOR_YEAR_TAXPREP_METHOD_FIRST.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_CUSTOMER_TYPE /*+createtype(P)*/
(
 CUSTOMER_TYPE_ID,
 CUSTOMER_TYPE,
 CUSTOMER_TYPE_RANK,
 CUSTOMER_TYPE_ROLLUP,
 CUSTOMER_TYPE_ROLLUP_RANK,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_CUSTOMER_TYPE.CUSTOMER_TYPE_ID,
        DIM_CUSTOMER_TYPE.CUSTOMER_TYPE,
        DIM_CUSTOMER_TYPE.CUSTOMER_TYPE_RANK,
        DIM_CUSTOMER_TYPE.CUSTOMER_TYPE_ROLLUP,
        DIM_CUSTOMER_TYPE.CUSTOMER_TYPE_ROLLUP_RANK,
        DIM_CUSTOMER_TYPE.BATCH_EVENT_ID,
        DIM_CUSTOMER_TYPE.CREATED_TIMESTAMP,
        DIM_CUSTOMER_TYPE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_CUSTOMER_TYPE
 ORDER BY DIM_CUSTOMER_TYPE.CUSTOMER_TYPE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_CUSTOMER_DEFINITION /*+createtype(P)*/
(
 CUSTOMER_DEFINITION_ID,
 CUSTOMER_DEFINITION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_CUSTOMER_DEFINITION.CUSTOMER_DEFINITION_ID,
        DIM_CUSTOMER_DEFINITION.CUSTOMER_DEFINITION,
        DIM_CUSTOMER_DEFINITION.BATCH_EVENT_ID,
        DIM_CUSTOMER_DEFINITION.CREATED_TIMESTAMP,
        DIM_CUSTOMER_DEFINITION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_CUSTOMER_DEFINITION
 ORDER BY DIM_CUSTOMER_DEFINITION.CUSTOMER_DEFINITION_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT /*+createtype(P)*/
(
 CUSTOMER_KEY,
 TAX_YEAR,
 CUSTOMER_TYPE_ID,
 CUSTOMER_DEFINITION_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT SUB_CUSTOMER_SEGMENT.CUSTOMER_KEY,
        SUB_CUSTOMER_SEGMENT.TAX_YEAR,
        SUB_CUSTOMER_SEGMENT.CUSTOMER_TYPE_ID,
        SUB_CUSTOMER_SEGMENT.CUSTOMER_DEFINITION_ID,
        SUB_CUSTOMER_SEGMENT.BATCH_EVENT_ID,
        SUB_CUSTOMER_SEGMENT.CREATED_TIMESTAMP,
        SUB_CUSTOMER_SEGMENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT
 ORDER BY SUB_CUSTOMER_SEGMENT.CUSTOMER_KEY,
          SUB_CUSTOMER_SEGMENT.TAX_YEAR
SEGMENTED BY hash(SUB_CUSTOMER_SEGMENT.CUSTOMER_KEY, SUB_CUSTOMER_SEGMENT.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED
(
 TAXORDER_ID ENCODING DELTARANGE_COMP,
 CUSTOMER_KEY ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 ORDER_TIMESTAMP ENCODING GCDDELTA,
 ITEM_ALIAS_RANK ENCODING COMMONDELTA_COMP,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING RLE
)
AS
 SELECT SUB_TAXORDER_COMPLETED_RANKED.TAXORDER_ID,
        SUB_TAXORDER_COMPLETED_RANKED.CUSTOMER_KEY,
        SUB_TAXORDER_COMPLETED_RANKED.TAX_YEAR,
        SUB_TAXORDER_COMPLETED_RANKED.ORDER_TIMESTAMP,
        SUB_TAXORDER_COMPLETED_RANKED.ITEM_ALIAS_RANK,
        SUB_TAXORDER_COMPLETED_RANKED.BATCH_EVENT_ID,
        SUB_TAXORDER_COMPLETED_RANKED.CREATED_TIMESTAMP,
        SUB_TAXORDER_COMPLETED_RANKED.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED
 ORDER BY SUB_TAXORDER_COMPLETED_RANKED.TAXORDER_ID
SEGMENTED BY hash(SUB_TAXORDER_COMPLETED_RANKED.TAXORDER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_CAMPAIGN_COST /*+createtype(P)*/
(
 CAMPAIGN_COST_ID,
 TAX_DATE_ID,
 CAMPAIGN_ID,
 VENDOR_ID,
 TAX_YEAR,
 COST_AMOUNT,
 CLICK_COUNT,
 IMPRESSION_COUNT,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_CAMPAIGN_COST.CAMPAIGN_COST_ID,
        AGG_CAMPAIGN_COST.TAX_DATE_ID,
        AGG_CAMPAIGN_COST.CAMPAIGN_ID,
        AGG_CAMPAIGN_COST.VENDOR_ID,
        AGG_CAMPAIGN_COST.TAX_YEAR,
        AGG_CAMPAIGN_COST.COST_AMOUNT,
        AGG_CAMPAIGN_COST.CLICK_COUNT,
        AGG_CAMPAIGN_COST.IMPRESSION_COUNT,
        AGG_CAMPAIGN_COST.BATCH_EVENT_ID,
        AGG_CAMPAIGN_COST.CREATED_TIMESTAMP,
        AGG_CAMPAIGN_COST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_CAMPAIGN_COST
 ORDER BY AGG_CAMPAIGN_COST.CAMPAIGN_COST_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_VENDOR /*+createtype(P)*/
(
 VENDOR_ID,
 VENDOR_NAME,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_VENDOR.VENDOR_ID,
        DIM_VENDOR.VENDOR_NAME,
        DIM_VENDOR.BATCH_EVENT_ID,
        DIM_VENDOR.CREATED_TIMESTAMP,
        DIM_VENDOR.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_VENDOR
 ORDER BY DIM_VENDOR.VENDOR_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_ACCEPTED_RETURN /*+createtype(P)*/
(
 EF_PAYMENTS_KEY,
 PRIMARY_FILER_ID,
 SECONDARY_FILER_ID,
 TAXFILER_ID,
 TAX_YEAR,
 BANK_RTN,
 FILING_TYPE_ID,
 PRODUCT_ALIAS_ID,
 ACCEPTED_TIMESTAMP,
 ACCEPTED_TAX_DATE_ID,
 AMOUNT,
 PAYMENT_METHOD,
 PAYMENT_DESCRIPTION,
 CREDIT_FOR_SALE_PRIORITY_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_ACCEPTED_RETURN.EF_PAYMENTS_KEY,
        FACT_ACCEPTED_RETURN.PRIMARY_FILER_ID,
        FACT_ACCEPTED_RETURN.SECONDARY_FILER_ID,
        FACT_ACCEPTED_RETURN.TAXFILER_ID,
        FACT_ACCEPTED_RETURN.TAX_YEAR,
        FACT_ACCEPTED_RETURN.BANK_RTN,
        FACT_ACCEPTED_RETURN.FILING_TYPE_ID,
        FACT_ACCEPTED_RETURN.PRODUCT_ALIAS_ID,
        FACT_ACCEPTED_RETURN.ACCEPTED_TIMESTAMP,
        FACT_ACCEPTED_RETURN.ACCEPTED_TAX_DATE_ID,
        FACT_ACCEPTED_RETURN.AMOUNT,
        FACT_ACCEPTED_RETURN.PAYMENT_METHOD,
        FACT_ACCEPTED_RETURN.PAYMENT_DESCRIPTION,
        FACT_ACCEPTED_RETURN.CREDIT_FOR_SALE_PRIORITY_ID,
        FACT_ACCEPTED_RETURN.BATCH_EVENT_ID,
        FACT_ACCEPTED_RETURN.CREATED_TIMESTAMP,
        FACT_ACCEPTED_RETURN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_ACCEPTED_RETURN
 ORDER BY FACT_ACCEPTED_RETURN.PRIMARY_FILER_ID,
          FACT_ACCEPTED_RETURN.TAX_YEAR
SEGMENTED BY hash(FACT_ACCEPTED_RETURN.PRIMARY_FILER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_RETURN /*+createtype(P)*/
(
 PRIMARY_FILER_ID,
 TAX_YEAR,
 FED_ACCEPTED_TIMESTAMP,
 FED_TOTAL_REFUND_AMOUNT,
 FED_PAYMENT_METHOD,
 FED_PAYMENT_DESCRIPTION,
 STATE_ACCEPTED_TIMESTAMP,
 STATE_TOTAL_REFUND_AMOUNT,
 STATE_PAYMENT_METHOD,
 STATE_PAYMENT_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_CUSTOMER_ACCEPTED_RETURN.PRIMARY_FILER_ID,
        AGG_CUSTOMER_ACCEPTED_RETURN.TAX_YEAR,
        AGG_CUSTOMER_ACCEPTED_RETURN.FED_ACCEPTED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_RETURN.FED_TOTAL_REFUND_AMOUNT,
        AGG_CUSTOMER_ACCEPTED_RETURN.FED_PAYMENT_METHOD,
        AGG_CUSTOMER_ACCEPTED_RETURN.FED_PAYMENT_DESCRIPTION,
        AGG_CUSTOMER_ACCEPTED_RETURN.STATE_ACCEPTED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_RETURN.STATE_TOTAL_REFUND_AMOUNT,
        AGG_CUSTOMER_ACCEPTED_RETURN.STATE_PAYMENT_METHOD,
        AGG_CUSTOMER_ACCEPTED_RETURN.STATE_PAYMENT_DESCRIPTION,
        AGG_CUSTOMER_ACCEPTED_RETURN.BATCH_EVENT_ID,
        AGG_CUSTOMER_ACCEPTED_RETURN.CREATED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_RETURN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_RETURN
 ORDER BY AGG_CUSTOMER_ACCEPTED_RETURN.PRIMARY_FILER_ID,
          AGG_CUSTOMER_ACCEPTED_RETURN.TAX_YEAR
SEGMENTED BY hash(AGG_CUSTOMER_ACCEPTED_RETURN.PRIMARY_FILER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_TILE /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 TILE_ID,
 TILE_SEQUENCE_NUMBER,
 FINAL_TILE_FLAG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_CLICKSTREAM_TILE.CLICKSTREAM_ID,
        FACT_CLICKSTREAM_TILE.TILE_ID,
        FACT_CLICKSTREAM_TILE.TILE_SEQUENCE_NUMBER,
        FACT_CLICKSTREAM_TILE.FINAL_TILE_FLAG,
        FACT_CLICKSTREAM_TILE.BATCH_EVENT_ID,
        FACT_CLICKSTREAM_TILE.CREATED_TIMESTAMP,
        FACT_CLICKSTREAM_TILE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM_TILE
 ORDER BY FACT_CLICKSTREAM_TILE.CLICKSTREAM_ID,
          FACT_CLICKSTREAM_TILE.TILE_ID
SEGMENTED BY hash(FACT_CLICKSTREAM_TILE.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_TILE /*+createtype(P)*/
(
 TILE_ID,
 TILE_NAME,
 SKU_ROLLUP_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_TILE.TILE_ID,
        DIM_TILE.TILE_NAME,
        DIM_TILE.SKU_ROLLUP_ID,
        DIM_TILE.BATCH_EVENT_ID,
        DIM_TILE.CREATED_TIMESTAMP,
        DIM_TILE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_TILE
 ORDER BY DIM_TILE.TILE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_EXPERIENCE /*+createtype(P)*/
(
 EXPERIENCE_ID,
 EXPERIENCE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EXPERIENCE.EXPERIENCE_ID,
        DIM_EXPERIENCE.EXPERIENCE,
        DIM_EXPERIENCE.BATCH_EVENT_ID,
        DIM_EXPERIENCE.CREATED_TIMESTAMP,
        DIM_EXPERIENCE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EXPERIENCE
 ORDER BY DIM_EXPERIENCE.EXPERIENCE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED /*+createtype(P)*/
(
 EXPERIENCE_RENDERED_ID,
 EXPERIENCE_RENDERED,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EXPERIENCE_RENDERED.EXPERIENCE_RENDERED_ID,
        DIM_EXPERIENCE_RENDERED.EXPERIENCE_RENDERED,
        DIM_EXPERIENCE_RENDERED.BATCH_EVENT_ID,
        DIM_EXPERIENCE_RENDERED.CREATED_TIMESTAMP,
        DIM_EXPERIENCE_RENDERED.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EXPERIENCE_RENDERED
 ORDER BY DIM_EXPERIENCE_RENDERED.EXPERIENCE_RENDERED_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING BLOCKDICT_COMP,
 CLICKSTREAM_MULTIFILER_TIMESTAMP ENCODING GCDDELTA,
 TAXORDER_MULTIFILER_TIMESTAMP ENCODING RLE,
 BATCH_EVENT_ID ENCODING BLOCKDICT_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP
)
AS
 SELECT SUB_AUTH_ID_MULTIFILER.AUTH_ID,
        SUB_AUTH_ID_MULTIFILER.TAX_YEAR,
        SUB_AUTH_ID_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP,
        SUB_AUTH_ID_MULTIFILER.TAXORDER_MULTIFILER_TIMESTAMP,
        SUB_AUTH_ID_MULTIFILER.BATCH_EVENT_ID,
        SUB_AUTH_ID_MULTIFILER.CREATED_TIMESTAMP,
        SUB_AUTH_ID_MULTIFILER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER
 ORDER BY SUB_AUTH_ID_MULTIFILER.AUTH_ID,
          SUB_AUTH_ID_MULTIFILER.TAX_YEAR
SEGMENTED BY hash(SUB_AUTH_ID_MULTIFILER.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_VISITOR_MULTIFILER
(
 VISITOR_OMT_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 CLICKSTREAM_MULTIFILER_TIMESTAMP ENCODING RLE,
 AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP ENCODING GCDDELTA,
 AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP ENCODING RLE,
 BATCH_EVENT_ID ENCODING BLOCKDICT_COMP,
 CREATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 UPDATED_TIMESTAMP ENCODING BLOCKDICT_COMP,
 VISITOR_ID
)
AS
 SELECT SUB_VISITOR_MULTIFILER.VISITOR_OMT_ID,
        SUB_VISITOR_MULTIFILER.TAX_YEAR,
        SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP,
        SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP,
        SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP,
        SUB_VISITOR_MULTIFILER.BATCH_EVENT_ID,
        SUB_VISITOR_MULTIFILER.CREATED_TIMESTAMP,
        SUB_VISITOR_MULTIFILER.UPDATED_TIMESTAMP,
        SUB_VISITOR_MULTIFILER.VISITOR_ID
 FROM CTG_ANALYTICS.SUB_VISITOR_MULTIFILER
 ORDER BY SUB_VISITOR_MULTIFILER.VISITOR_OMT_ID,
          SUB_VISITOR_MULTIFILER.TAX_YEAR
SEGMENTED BY hash(SUB_VISITOR_MULTIFILER.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTH_ID_START_SKU /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 START_SKU_ROLLUP_ID,
 START_SKU,
 START_SKU_TIMESTAMP,
 START_SKU_TAX_DATE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_AUTH_ID_START_SKU.AUTH_ID,
        FACT_AUTH_ID_START_SKU.TAX_YEAR,
        FACT_AUTH_ID_START_SKU.START_SKU_ROLLUP_ID,
        FACT_AUTH_ID_START_SKU.START_SKU,
        FACT_AUTH_ID_START_SKU.START_SKU_TIMESTAMP,
        FACT_AUTH_ID_START_SKU.START_SKU_TAX_DATE_ID,
        FACT_AUTH_ID_START_SKU.BATCH_EVENT_ID,
        FACT_AUTH_ID_START_SKU.CREATED_TIMESTAMP,
        FACT_AUTH_ID_START_SKU.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTH_ID_START_SKU
 ORDER BY FACT_AUTH_ID_START_SKU.AUTH_ID,
          FACT_AUTH_ID_START_SKU.TAX_YEAR
SEGMENTED BY hash(FACT_AUTH_ID_START_SKU.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTH_ID_AUTHORIZATION_USER_AGENT /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 FIRST_AUTHORIZATION_TIMESTAMP,
 FIRST_AUTHORIZATION_TAX_DATE_ID,
 FIRST_AUTHORIZATION_USER_AGENT_ID,
 FIRST_AUTHORIZATION_DEVICE_TYPE,
 FIRST_AUTHORIZATION_PLATFORM_TYPE,
 FIRST_AUTHORIZATION_APP_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.TAX_YEAR,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_TIMESTAMP,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_TAX_DATE_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_USER_AGENT_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_DEVICE_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_PLATFORM_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_APP_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.BATCH_EVENT_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.CREATED_TIMESTAMP,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTH_ID_AUTHORIZATION_USER_AGENT
 ORDER BY FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.AUTH_ID,
          FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.TAX_YEAR
SEGMENTED BY hash(FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTH_ID_AUTHENTICATION_USER_AGENT /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 FIRST_AUTHENTICATION_TIMESTAMP,
 FIRST_AUTHENTICATION_TAX_DATE_ID,
 FIRST_AUTHENTICATION_USER_AGENT_ID,
 FIRST_AUTHENTICATION_DEVICE_TYPE,
 FIRST_AUTHENTICATION_PLATFORM_TYPE,
 FIRST_AUTHENTICATION_APP_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.TAX_YEAR,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_TIMESTAMP,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_TAX_DATE_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_USER_AGENT_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_DEVICE_TYPE,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_PLATFORM_TYPE,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_APP_TYPE,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.BATCH_EVENT_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.CREATED_TIMESTAMP,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTH_ID_AUTHENTICATION_USER_AGENT
 ORDER BY FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.AUTH_ID,
          FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.TAX_YEAR
SEGMENTED BY hash(FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_FED_EFILING_STATUS /*+createtype(P)*/
(
 PRIMARY_FILER_ID,
 TAX_YEAR,
 FED_FIRST_ATTEMPTED_TIMESTAMP,
 FED_LAST_EFILE_STATUS_TIMESTAMP,
 FED_LAST_EFILE_STATUS_CODE_ID,
 FED_FIRST_ACCEPTED_TIMESTAMP,
 FED_LAST_ACCEPTED_TIMESTAMP,
 REJECTED_COUNT,
 FED_FIRST_REJECTED_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_FED_EFILING_STATUS.PRIMARY_FILER_ID,
        AGG_FED_EFILING_STATUS.TAX_YEAR,
        AGG_FED_EFILING_STATUS.FED_FIRST_ATTEMPTED_TIMESTAMP,
        AGG_FED_EFILING_STATUS.FED_LAST_EFILE_STATUS_TIMESTAMP,
        AGG_FED_EFILING_STATUS.FED_LAST_EFILE_STATUS_CODE_ID,
        AGG_FED_EFILING_STATUS.FED_FIRST_ACCEPTED_TIMESTAMP,
        AGG_FED_EFILING_STATUS.FED_LAST_ACCEPTED_TIMESTAMP,
        AGG_FED_EFILING_STATUS.REJECTED_COUNT,
        AGG_FED_EFILING_STATUS.FED_FIRST_REJECTED_TIMESTAMP,
        AGG_FED_EFILING_STATUS.BATCH_EVENT_ID,
        AGG_FED_EFILING_STATUS.CREATED_TIMESTAMP,
        AGG_FED_EFILING_STATUS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_FED_EFILING_STATUS
 ORDER BY AGG_FED_EFILING_STATUS.PRIMARY_FILER_ID,
          AGG_FED_EFILING_STATUS.TAX_YEAR
SEGMENTED BY hash(AGG_FED_EFILING_STATUS.PRIMARY_FILER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_EFILE_STATUS /*+createtype(P)*/
(
 CHANGE_ID,
 TAX_YEAR,
 TAXFILER_ID,
 PRIMARY_ID,
 FILING_ID,
 FILING_TYPE_ID,
 EFILE_STATUS_CODE_ID,
 EFILE_STATUS_TAX_DATE_ID,
 EFILE_STATUS_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 AUTH_ID
)
AS
 SELECT FACT_EFILE_STATUS.CHANGE_ID,
        FACT_EFILE_STATUS.TAX_YEAR,
        FACT_EFILE_STATUS.TAXFILER_ID,
        FACT_EFILE_STATUS.PRIMARY_ID AS PRIMARY_FILER_ID,
        FACT_EFILE_STATUS.FILING_ID,
        FACT_EFILE_STATUS.FILING_TYPE_ID,
        FACT_EFILE_STATUS.EFILE_STATUS_CODE_ID,
        FACT_EFILE_STATUS.EFILE_STATUS_TAX_DATE_ID,
        FACT_EFILE_STATUS.EFILE_STATUS_TIMESTAMP,
        FACT_EFILE_STATUS.BATCH_EVENT_ID,
        FACT_EFILE_STATUS.CREATED_TIMESTAMP,
        FACT_EFILE_STATUS.UPDATED_TIMESTAMP,
        FACT_EFILE_STATUS.AUTH_ID
 FROM CTG_ANALYTICS.FACT_EFILE_STATUS
 ORDER BY FACT_EFILE_STATUS.CHANGE_ID,
          FACT_EFILE_STATUS.TAX_YEAR
SEGMENTED BY hash(FACT_EFILE_STATUS.TAXFILER_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_EFILE_STATUS_CODE /*+createtype(P)*/
(
 EFILE_STATUS_CODE_ID,
 EFILE_STATUS_CODE,
 EFILE_STATUS_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EFILE_STATUS_CODE.EFILE_STATUS_CODE_ID,
        DIM_EFILE_STATUS_CODE.EFILE_STATUS_CODE,
        DIM_EFILE_STATUS_CODE.EFILE_STATUS_DESCRIPTION,
        DIM_EFILE_STATUS_CODE.BATCH_EVENT_ID,
        DIM_EFILE_STATUS_CODE.CREATED_TIMESTAMP,
        DIM_EFILE_STATUS_CODE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EFILE_STATUS_CODE
 ORDER BY DIM_EFILE_STATUS_CODE.EFILE_STATUS_CODE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_USER_AGENT /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 FIRST_COMPLETED_TIMESTAMP,
 FIRST_COMPLETED_TAX_DATE_ID,
 FIRST_COMPLETED_USER_AGENT_ID,
 FIRST_COMPLETED_DEVICE_TYPE,
 FIRST_COMPLETED_PLATFORM_TYPE,
 FIRST_COMPLETED_APP_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_AUTH_ID_COMPLETED_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.TAX_YEAR,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_TAX_DATE_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_USER_AGENT_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_DEVICE_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_PLATFORM_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_APP_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.BATCH_EVENT_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.CREATED_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_USER_AGENT
 ORDER BY FACT_AUTH_ID_COMPLETED_USER_AGENT.AUTH_ID,
          FACT_AUTH_ID_COMPLETED_USER_AGENT.TAX_YEAR
SEGMENTED BY hash(FACT_AUTH_ID_COMPLETED_USER_AGENT.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU
(
 AUTH_ID ENCODING DELTARANGE_COMP,
 TAX_YEAR ENCODING COMMONDELTA_COMP,
 COMPLETED_SKU_RANKED,
 FIRST_COMPLETED_SKU_TIMESTAMP ENCODING GCDDELTA,
 FIRST_COMPLETED_SKU_TAX_DATE_ID ENCODING DELTARANGE_COMP,
 PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
 PRIOR_YEAR_COMPLETED_SKU_RANKED,
 BATCH_EVENT_ID ENCODING RLE,
 CREATED_TIMESTAMP ENCODING RLE,
 UPDATED_TIMESTAMP ENCODING RLE
)
AS
 SELECT FACT_AUTH_ID_COMPLETED_SKU.AUTH_ID,
        FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR,
        FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.FIRST_COMPLETED_SKU_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_SKU.FIRST_COMPLETED_SKU_TAX_DATE_ID,
        FACT_AUTH_ID_COMPLETED_SKU.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.PRIOR_YEAR_COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.BATCH_EVENT_ID,
        FACT_AUTH_ID_COMPLETED_SKU.CREATED_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_SKU.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU
 ORDER BY FACT_AUTH_ID_COMPLETED_SKU.AUTH_ID,
          FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR
SEGMENTED BY hash(FACT_AUTH_ID_COMPLETED_SKU.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR /*+createtype(P)*/
(
 FORM_IMPORT_ERROR_ID,
 STATUS_CODE,
 STATUS_MESSAGE,
 REQUEST_HTTP_STATUS,
 REQUEST_ERROR_CODE,
 REQUEST_ERROR_DETAILS,
 PARTNER_AUTHENTICATION_ERROR_CODE,
 PARTNER_REQUEST_ERROR_CODE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_FORM_IMPORT_ERROR.FORM_IMPORT_ERROR_ID,
        DIM_FORM_IMPORT_ERROR.STATUS_CODE,
        DIM_FORM_IMPORT_ERROR.STATUS_MESSAGE,
        DIM_FORM_IMPORT_ERROR.REQUEST_HTTP_STATUS,
        DIM_FORM_IMPORT_ERROR.REQUEST_ERROR_CODE,
        DIM_FORM_IMPORT_ERROR.REQUEST_ERROR_DETAILS,
        DIM_FORM_IMPORT_ERROR.PARTNER_AUTHENTICATION_ERROR_CODE,
        DIM_FORM_IMPORT_ERROR.PARTNER_REQUEST_ERROR_CODE,
        DIM_FORM_IMPORT_ERROR.BATCH_EVENT_ID,
        DIM_FORM_IMPORT_ERROR.CREATED_TIMESTAMP,
        DIM_FORM_IMPORT_ERROR.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_FORM_IMPORT_ERROR
 ORDER BY DIM_FORM_IMPORT_ERROR.FORM_IMPORT_ERROR_ID
SEGMENTED BY hash(DIM_FORM_IMPORT_ERROR.FORM_IMPORT_ERROR_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_IMPORT_DOC /*+createtype(P)*/
(
 IMPORT_DOC_ID,
 DOC_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_IMPORT_DOC.IMPORT_DOC_ID,
        DIM_IMPORT_DOC.DOC_TYPE,
        DIM_IMPORT_DOC.BATCH_EVENT_ID,
        DIM_IMPORT_DOC.CREATED_TIMESTAMP,
        DIM_IMPORT_DOC.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_IMPORT_DOC
 ORDER BY DIM_IMPORT_DOC.IMPORT_DOC_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_IMPORT_PARTNER /*+createtype(P)*/
(
 IMPORT_PARTNER_ID,
 IMPORT_PARTNER_NAME,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_IMPORT_PARTNER.IMPORT_PARTNER_ID,
        DIM_IMPORT_PARTNER.IMPORT_PARTNER_NAME,
        DIM_IMPORT_PARTNER.BATCH_EVENT_ID,
        DIM_IMPORT_PARTNER.CREATED_TIMESTAMP,
        DIM_IMPORT_PARTNER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_IMPORT_PARTNER
 ORDER BY DIM_IMPORT_PARTNER.IMPORT_PARTNER_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_IMPORT_SERVICE /*+createtype(P)*/
(
 IMPORT_SERVICE_ID,
 IMPORT_SERVICE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_IMPORT_SERVICE.IMPORT_SERVICE_ID,
        DIM_IMPORT_SERVICE.IMPORT_SERVICE,
        DIM_IMPORT_SERVICE.BATCH_EVENT_ID,
        DIM_IMPORT_SERVICE.CREATED_TIMESTAMP,
        DIM_IMPORT_SERVICE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_IMPORT_SERVICE
 ORDER BY DIM_IMPORT_SERVICE.IMPORT_SERVICE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_IMPORT_PLATFORM /*+createtype(P)*/
(
 IMPORT_PLATFORM_ID,
 PLATFORM_APPLICATION,
 PLATFORM_APPLICATION_VERSION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_IMPORT_PLATFORM.IMPORT_PLATFORM_ID,
        DIM_IMPORT_PLATFORM.PLATFORM_APPLICATION,
        DIM_IMPORT_PLATFORM.PLATFORM_APPLICATION_VERSION,
        DIM_IMPORT_PLATFORM.BATCH_EVENT_ID,
        DIM_IMPORT_PLATFORM.CREATED_TIMESTAMP,
        DIM_IMPORT_PLATFORM.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_IMPORT_PLATFORM
 ORDER BY DIM_IMPORT_PLATFORM.IMPORT_PLATFORM_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_FORM_IMPORT_REQUEST /*+createtype(P)*/
(
 FORM_IMPORT_REQUEST_ID,
 AUTH_ID,
 ALTERNATE_ID,
 TAX_YEAR,
 REQUEST_TIMESTAMP,
 REQUEST_TAX_DATE_ID,
 IMPORT_DOC_ID,
 IMPORT_PLATFORM_ID,
 IMPORT_SERVICE_ID,
 IMPORT_PARTNER_ID,
 RAW_EMPLOYER_INFORMATION,
 FORM_IMPORT_ERROR_ID,
 RAW_CLIENT_SKU,
 REQUEST_ELASPED_MILISECONDS,
 IMPORT_W2_FLAG,
 IMPORT_ANY_1099_FLAG,
 IMPORT_1098_FLAG,
 IMPORT_1099R_FLAG,
 IMPORT_1099INT_FLAG,
 IMPORT_1099DIV_FLAG,
 IMPORT_1099B_FLAG,
 DOCUMENT_COUNT,
 IMPORT_REQUEST_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 FORM_TAX_YEAR,
 REQUEST_SUCCESS_FLAG
)
AS
 SELECT FACT_FORM_IMPORT_REQUEST.FORM_IMPORT_REQUEST_ID,
        FACT_FORM_IMPORT_REQUEST.AUTH_ID,
        FACT_FORM_IMPORT_REQUEST.ALTERNATE_ID,
        FACT_FORM_IMPORT_REQUEST.TAX_YEAR,
        FACT_FORM_IMPORT_REQUEST.REQUEST_TIMESTAMP,
        FACT_FORM_IMPORT_REQUEST.REQUEST_TAX_DATE_ID,
        FACT_FORM_IMPORT_REQUEST.IMPORT_DOC_ID,
        FACT_FORM_IMPORT_REQUEST.IMPORT_PLATFORM_ID,
        FACT_FORM_IMPORT_REQUEST.IMPORT_SERVICE_ID,
        FACT_FORM_IMPORT_REQUEST.IMPORT_PARTNER_ID,
        FACT_FORM_IMPORT_REQUEST.RAW_EMPLOYER_INFORMATION,
        FACT_FORM_IMPORT_REQUEST.FORM_IMPORT_ERROR_ID,
        FACT_FORM_IMPORT_REQUEST.RAW_CLIENT_SKU,
        FACT_FORM_IMPORT_REQUEST.REQUEST_ELASPED_MILISECONDS AS REQUEST_ELAPSED_MILLISECS,
        FACT_FORM_IMPORT_REQUEST.IMPORT_W2_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_ANY_1099_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_1098_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_1099R_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_1099INT_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_1099DIV_FLAG,
        FACT_FORM_IMPORT_REQUEST.IMPORT_1099B_FLAG,
        FACT_FORM_IMPORT_REQUEST.DOCUMENT_COUNT,
        FACT_FORM_IMPORT_REQUEST.IMPORT_REQUEST_ID,
        FACT_FORM_IMPORT_REQUEST.BATCH_EVENT_ID,
        FACT_FORM_IMPORT_REQUEST.CREATED_TIMESTAMP,
        FACT_FORM_IMPORT_REQUEST.UPDATED_TIMESTAMP,
        FACT_FORM_IMPORT_REQUEST.FORM_TAX_YEAR,
        FACT_FORM_IMPORT_REQUEST.REQUEST_SUCCESS_FLAG
 FROM CTG_ANALYTICS.FACT_FORM_IMPORT_REQUEST
 ORDER BY FACT_FORM_IMPORT_REQUEST.AUTH_ID,
          FACT_FORM_IMPORT_REQUEST.TAX_YEAR
SEGMENTED BY hash(FACT_FORM_IMPORT_REQUEST.FORM_IMPORT_REQUEST_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE /*+createtype(P)*/
(
 CLICKSTREAM_ELIGIBLE_EXPERIENCE_ID,
 CLICKSTREAM_ID,
 EXPERIENCE_ID,
 POSITION_NUM,
 SELECTED_FLAG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.CLICKSTREAM_ELIGIBLE_EXPERIENCE_ID,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.CLICKSTREAM_ID,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.EXPERIENCE_ID,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.POSITION_NUM,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.SELECTED_FLAG,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.BATCH_EVENT_ID,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.CREATED_TIMESTAMP,
        FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE
 ORDER BY FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.CLICKSTREAM_ID,
          FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.EXPERIENCE_ID
SEGMENTED BY hash(FACT_CLICKSTREAM_ELIGIBLE_EXPERIENCE.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD /*+createtype(P)*/
(
 EFILE_PAYMENT_METHOD_ID,
 EFILE_PAYMENT_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EFILE_PAYMENT_METHOD.EFILE_PAYMENT_METHOD_ID,
        DIM_EFILE_PAYMENT_METHOD.EFILE_PAYMENT_DESCRIPTION,
        DIM_EFILE_PAYMENT_METHOD.BATCH_EVENT_ID,
        DIM_EFILE_PAYMENT_METHOD.CREATED_TIMESTAMP,
        DIM_EFILE_PAYMENT_METHOD.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EFILE_PAYMENT_METHOD
 ORDER BY DIM_EFILE_PAYMENT_METHOD.EFILE_PAYMENT_METHOD_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_ACCEPTED_REFUND /*+createtype(P)*/
(
 FILING_ID,
 TAX_YEAR,
 SEQUENCE_NUMBER,
 PRIMARY_ID,
 SECONDARY_ID,
 TAXFILER_ID,
 EFILE_PAYMENT_METHOD_ID,
 BANK_PRODUCT,
 AMOUNT,
 FILING_TYPE_ID,
 APPLICATION,
 PRODUCT_ALIAS_ID,
 ACCEPTED_TIMESTAMP,
 ACCEPTED_TAX_DATE_ID,
 BANK_RTN,
 CREDIT_FOR_SALE_PRIORITY_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 AUTH_ID
)
AS
 SELECT FACT_ACCEPTED_REFUND.FILING_ID,
        FACT_ACCEPTED_REFUND.TAX_YEAR,
        FACT_ACCEPTED_REFUND.SEQUENCE_NUMBER,
        FACT_ACCEPTED_REFUND.PRIMARY_ID,
        FACT_ACCEPTED_REFUND.SECONDARY_ID,
        FACT_ACCEPTED_REFUND.TAXFILER_ID,
        FACT_ACCEPTED_REFUND.EFILE_PAYMENT_METHOD_ID,
        FACT_ACCEPTED_REFUND.BANK_PRODUCT,
        FACT_ACCEPTED_REFUND.AMOUNT,
        FACT_ACCEPTED_REFUND.FILING_TYPE_ID,
        FACT_ACCEPTED_REFUND.APPLICATION,
        FACT_ACCEPTED_REFUND.PRODUCT_ALIAS_ID,
        FACT_ACCEPTED_REFUND.ACCEPTED_TIMESTAMP,
        FACT_ACCEPTED_REFUND.ACCEPTED_TAX_DATE_ID,
        FACT_ACCEPTED_REFUND.BANK_RTN,
        FACT_ACCEPTED_REFUND.CREDIT_FOR_SALE_PRIORITY_ID,
        FACT_ACCEPTED_REFUND.BATCH_EVENT_ID,
        FACT_ACCEPTED_REFUND.CREATED_TIMESTAMP,
        FACT_ACCEPTED_REFUND.UPDATED_TIMESTAMP,
        FACT_ACCEPTED_REFUND.AUTH_ID
 FROM CTG_ANALYTICS.FACT_ACCEPTED_REFUND
 ORDER BY FACT_ACCEPTED_REFUND.FILING_ID,
          FACT_ACCEPTED_REFUND.TAX_YEAR,
          FACT_ACCEPTED_REFUND.SEQUENCE_NUMBER
SEGMENTED BY hash(FACT_ACCEPTED_REFUND.FILING_ID, FACT_ACCEPTED_REFUND.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_REFUND /*+createtype(P)*/
(
 PRIMARY_ID,
 TAX_YEAR,
 RANKED_FED_ACCEPTED_TIMESTAMP,
 RANKED_FED_ACCEPTED_TAX_DATE_ID,
 FED_TOTAL_REFUND_AMOUNT,
 RANKED_FED_EFILE_PAYMENT_METHOD_ID,
 RANKED_STATE_ACCEPTED_TIMESTAMP,
 RANKED_STATE_ACCEPTED_TAX_DATE_ID,
 STATE_TOTAL_REFUND_AMOUNT,
 RANKED_STATE_EFILE_PAYMENT_METHOD_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_CUSTOMER_ACCEPTED_REFUND.PRIMARY_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.TAX_YEAR,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_FED_ACCEPTED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_FED_ACCEPTED_TAX_DATE_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.FED_TOTAL_REFUND_AMOUNT,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_FED_EFILE_PAYMENT_METHOD_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_STATE_ACCEPTED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_STATE_ACCEPTED_TAX_DATE_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.STATE_TOTAL_REFUND_AMOUNT,
        AGG_CUSTOMER_ACCEPTED_REFUND.RANKED_STATE_EFILE_PAYMENT_METHOD_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.BATCH_EVENT_ID,
        AGG_CUSTOMER_ACCEPTED_REFUND.CREATED_TIMESTAMP,
        AGG_CUSTOMER_ACCEPTED_REFUND.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_CUSTOMER_ACCEPTED_REFUND
 ORDER BY AGG_CUSTOMER_ACCEPTED_REFUND.PRIMARY_ID,
          AGG_CUSTOMER_ACCEPTED_REFUND.TAX_YEAR
SEGMENTED BY hash(AGG_CUSTOMER_ACCEPTED_REFUND.PRIMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_FED_EFILE_STATUS /*+createtype(P)*/
(
 PRIMARY_ID,
 TAX_YEAR,
 FED_FIRST_ATTEMPTED_TIMESTAMP,
 FED_LAST_EFILE_STATUS_TIMESTAMP,
 FED_LAST_EFILE_STATUS_CODE_ID,
 FED_FIRST_ACCEPTED_TIMESTAMP,
 FED_LAST_ACCEPTED_TIMESTAMP,
 REJECTED_COUNT,
 FED_FIRST_REJECTED_TIMESTAMP,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_FED_EFILE_STATUS.PRIMARY_ID,
        AGG_FED_EFILE_STATUS.TAX_YEAR,
        AGG_FED_EFILE_STATUS.FED_FIRST_ATTEMPTED_TIMESTAMP,
        AGG_FED_EFILE_STATUS.FED_LAST_EFILE_STATUS_TIMESTAMP,
        AGG_FED_EFILE_STATUS.FED_LAST_EFILE_STATUS_CODE_ID,
        AGG_FED_EFILE_STATUS.FED_FIRST_ACCEPTED_TIMESTAMP,
        AGG_FED_EFILE_STATUS.FED_LAST_ACCEPTED_TIMESTAMP,
        AGG_FED_EFILE_STATUS.REJECTED_COUNT,
        AGG_FED_EFILE_STATUS.FED_FIRST_REJECTED_TIMESTAMP,
        AGG_FED_EFILE_STATUS.BATCH_EVENT_ID,
        AGG_FED_EFILE_STATUS.CREATED_TIMESTAMP,
        AGG_FED_EFILE_STATUS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_FED_EFILE_STATUS
 ORDER BY AGG_FED_EFILE_STATUS.PRIMARY_ID,
          AGG_FED_EFILE_STATUS.TAX_YEAR
SEGMENTED BY hash(AGG_FED_EFILE_STATUS.PRIMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.FUTURE_TYS /*+createtype(P)*/
(
 FULL_DATE,
 TY_YEAR,
 TY_WEEK,
 TY_DAY
)
AS
 SELECT FUTURE_TYS.FULL_DATE,
        FUTURE_TYS.TY_YEAR,
        FUTURE_TYS.TY_WEEK,
        FUTURE_TYS.TY_DAY
 FROM CTG_ANALYTICS_SRC.FUTURE_TYS
 ORDER BY FUTURE_TYS.FULL_DATE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.PRODUCT_ROLLUP /*+createtype(P)*/
(
 PRODUCT_ID,
 PRODUCT_ENGINE_DSC,
 PRODUCT_ROLLUP,
 PAID_FLAG,
 PRODUCT_NAME,
 DISPLAY_PRODUCT_NAME_WITH_SORT,
 PRODUCT_SORT,
 DISPLAY_PRODUCT_NAME,
 PRODUCT_EDTN_DSC,
 PRODUCT_CODE_ROLLUP,
 EFFECTIVE_START_TAX_YEAR,
 EFFECTIVE_END_TAX_YEAR,
 EFFECTIVE_START_DATE,
 EFFECTIVE_END_DATE,
 PRODUCT_ROLLUP_VERSION
)
AS
 SELECT PRODUCT_ROLLUP.PRODUCT_ID,
        PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
        PRODUCT_ROLLUP.PRODUCT_ROLLUP,
        PRODUCT_ROLLUP.PAID_FLAG,
        PRODUCT_ROLLUP.PRODUCT_NAME,
        PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
        PRODUCT_ROLLUP.PRODUCT_SORT,
        PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
        PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
        PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
        PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
        PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
        PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
        PRODUCT_ROLLUP.EFFECTIVE_END_DATE,
        PRODUCT_ROLLUP.PRODUCT_ROLLUP_VERSION
 FROM CTG_ANALYTICS_SRC.PRODUCT_ROLLUP
 ORDER BY PRODUCT_ROLLUP.PRODUCT_ID,
          PRODUCT_ROLLUP.PRODUCT_ENGINE_DSC,
          PRODUCT_ROLLUP.PRODUCT_ROLLUP,
          PRODUCT_ROLLUP.PAID_FLAG,
          PRODUCT_ROLLUP.PRODUCT_NAME,
          PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME_WITH_SORT,
          PRODUCT_ROLLUP.PRODUCT_SORT,
          PRODUCT_ROLLUP.DISPLAY_PRODUCT_NAME,
          PRODUCT_ROLLUP.PRODUCT_EDTN_DSC,
          PRODUCT_ROLLUP.PRODUCT_CODE_ROLLUP,
          PRODUCT_ROLLUP.EFFECTIVE_START_TAX_YEAR,
          PRODUCT_ROLLUP.EFFECTIVE_END_TAX_YEAR,
          PRODUCT_ROLLUP.EFFECTIVE_START_DATE,
          PRODUCT_ROLLUP.EFFECTIVE_END_DATE,
          PRODUCT_ROLLUP.PRODUCT_ROLLUP_VERSION
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.PRODUCT /*+createtype(P)*/
(
 PRODUCT_KEY,
 INTUIT_ITEM_CODE,
 PRODUCT_DESCRIPTION,
 PRODUCT_FAMILY_DESCRIPTION,
 PRODUCT_EDITION_DESCRIPTION,
 PRODUCT_VERSION_CODE,
 PRODUCT_ROLLUP,
 AUDIT_INS_KEY,
 AUDIT_INS_TS,
 AUDIT_UPD_KEY,
 AUDIT_UPD_TS
)
AS
 SELECT PRODUCT.PRODUCT_KEY,
        PRODUCT.INTUIT_ITEM_CODE,
        PRODUCT.PRODUCT_DESCRIPTION,
        PRODUCT.PRODUCT_FAMILY_DESCRIPTION,
        PRODUCT.PRODUCT_EDITION_DESCRIPTION,
        PRODUCT.PRODUCT_VERSION_CODE,
        PRODUCT.PRODUCT_ROLLUP,
        PRODUCT.AUDIT_INS_KEY,
        PRODUCT.AUDIT_INS_TS,
        PRODUCT.AUDIT_UPD_KEY,
        PRODUCT.AUDIT_UPD_TS
 FROM CTG_ANALYTICS_SRC.PRODUCT
 ORDER BY PRODUCT.PRODUCT_KEY,
          PRODUCT.INTUIT_ITEM_CODE,
          PRODUCT.PRODUCT_DESCRIPTION,
          PRODUCT.PRODUCT_FAMILY_DESCRIPTION,
          PRODUCT.PRODUCT_EDITION_DESCRIPTION,
          PRODUCT.PRODUCT_VERSION_CODE,
          PRODUCT.PRODUCT_ROLLUP,
          PRODUCT.AUDIT_INS_KEY,
          PRODUCT.AUDIT_INS_TS,
          PRODUCT.AUDIT_UPD_KEY,
          PRODUCT.AUDIT_UPD_TS
SEGMENTED BY hash(PRODUCT.PRODUCT_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_PRS_CATEGORIZED /*+createtype(L)*/
(
 TRANS_ID,
 SOURCE_NAME,
 PROJECT_NAME,
 MODEL_ID,
 MODEL_NAME,
 NODE1,
 NODE2,
 NODE3,
 NODE4,
 NODE5,
 NODE6,
 NODE7,
 NODE8,
 NODE9,
 NODE10,
 LEAF_ID,
 LEAF_NAME,
 TREE_PATH,
 INCIDENT_NUMBER,
 INCIDENT_DATE,
 UDF1,
 UDF2,
 UDF3,
 UDF4,
 UDF5,
 SENT_POS_COUNT,
 SENT_NEG_COUNT,
 SENT_SCORE,
 SENT_D_SCORE,
 PRODUCT,
 PLATFORM,
 LOAD_TYPE,
 REC_CREATE_DT,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_PRS_CATEGORIZED.TRANS_ID,
        TRN_PRS_CATEGORIZED.SOURCE_NAME,
        TRN_PRS_CATEGORIZED.PROJECT_NAME,
        TRN_PRS_CATEGORIZED.MODEL_ID,
        TRN_PRS_CATEGORIZED.MODEL_NAME,
        TRN_PRS_CATEGORIZED.NODE1,
        TRN_PRS_CATEGORIZED.NODE2,
        TRN_PRS_CATEGORIZED.NODE3,
        TRN_PRS_CATEGORIZED.NODE4,
        TRN_PRS_CATEGORIZED.NODE5,
        TRN_PRS_CATEGORIZED.NODE6,
        TRN_PRS_CATEGORIZED.NODE7,
        TRN_PRS_CATEGORIZED.NODE8,
        TRN_PRS_CATEGORIZED.NODE9,
        TRN_PRS_CATEGORIZED.NODE10,
        TRN_PRS_CATEGORIZED.LEAF_ID,
        TRN_PRS_CATEGORIZED.LEAF_NAME,
        TRN_PRS_CATEGORIZED.TREE_PATH,
        TRN_PRS_CATEGORIZED.INCIDENT_NUMBER,
        TRN_PRS_CATEGORIZED.INCIDENT_DATE,
        TRN_PRS_CATEGORIZED.UDF1,
        TRN_PRS_CATEGORIZED.UDF2,
        TRN_PRS_CATEGORIZED.UDF3,
        TRN_PRS_CATEGORIZED.UDF4,
        TRN_PRS_CATEGORIZED.UDF5,
        TRN_PRS_CATEGORIZED.SENT_POS_COUNT,
        TRN_PRS_CATEGORIZED.SENT_NEG_COUNT,
        TRN_PRS_CATEGORIZED.SENT_SCORE,
        TRN_PRS_CATEGORIZED.SENT_D_SCORE,
        TRN_PRS_CATEGORIZED.PRODUCT,
        TRN_PRS_CATEGORIZED.PLATFORM,
        TRN_PRS_CATEGORIZED.LOAD_TYPE,
        TRN_PRS_CATEGORIZED.REC_CREATE_DT,
        TRN_PRS_CATEGORIZED.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_PRS_CATEGORIZED
 ORDER BY TRN_PRS_CATEGORIZED.TRANS_ID,
          TRN_PRS_CATEGORIZED.SOURCE_NAME,
          TRN_PRS_CATEGORIZED.PROJECT_NAME,
          TRN_PRS_CATEGORIZED.MODEL_ID,
          TRN_PRS_CATEGORIZED.MODEL_NAME,
          TRN_PRS_CATEGORIZED.NODE1,
          TRN_PRS_CATEGORIZED.NODE2,
          TRN_PRS_CATEGORIZED.NODE3,
          TRN_PRS_CATEGORIZED.NODE4,
          TRN_PRS_CATEGORIZED.NODE5,
          TRN_PRS_CATEGORIZED.NODE6,
          TRN_PRS_CATEGORIZED.NODE7,
          TRN_PRS_CATEGORIZED.NODE8,
          TRN_PRS_CATEGORIZED.NODE9,
          TRN_PRS_CATEGORIZED.NODE10,
          TRN_PRS_CATEGORIZED.LEAF_ID,
          TRN_PRS_CATEGORIZED.LEAF_NAME,
          TRN_PRS_CATEGORIZED.TREE_PATH,
          TRN_PRS_CATEGORIZED.INCIDENT_NUMBER,
          TRN_PRS_CATEGORIZED.INCIDENT_DATE,
          TRN_PRS_CATEGORIZED.UDF1,
          TRN_PRS_CATEGORIZED.UDF2,
          TRN_PRS_CATEGORIZED.UDF3,
          TRN_PRS_CATEGORIZED.UDF4,
          TRN_PRS_CATEGORIZED.UDF5,
          TRN_PRS_CATEGORIZED.SENT_POS_COUNT,
          TRN_PRS_CATEGORIZED.SENT_NEG_COUNT,
          TRN_PRS_CATEGORIZED.SENT_SCORE,
          TRN_PRS_CATEGORIZED.SENT_D_SCORE,
          TRN_PRS_CATEGORIZED.PRODUCT,
          TRN_PRS_CATEGORIZED.PLATFORM,
          TRN_PRS_CATEGORIZED.LOAD_TYPE,
          TRN_PRS_CATEGORIZED.REC_CREATE_DT,
          TRN_PRS_CATEGORIZED.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_PRS_CATEGORIZED.BATCH_EVENT_ID, TRN_PRS_CATEGORIZED.INCIDENT_DATE, TRN_PRS_CATEGORIZED.SENT_POS_COUNT, TRN_PRS_CATEGORIZED.SENT_NEG_COUNT, TRN_PRS_CATEGORIZED.SENT_SCORE, TRN_PRS_CATEGORIZED.SENT_D_SCORE, TRN_PRS_CATEGORIZED.TRANS_ID, TRN_PRS_CATEGORIZED.SOURCE_NAME, TRN_PRS_CATEGORIZED.PROJECT_NAME, TRN_PRS_CATEGORIZED.MODEL_ID, TRN_PRS_CATEGORIZED.MODEL_NAME, TRN_PRS_CATEGORIZED.NODE1, TRN_PRS_CATEGORIZED.NODE2, TRN_PRS_CATEGORIZED.NODE3, TRN_PRS_CATEGORIZED.NODE4, TRN_PRS_CATEGORIZED.NODE5, TRN_PRS_CATEGORIZED.NODE6, TRN_PRS_CATEGORIZED.NODE7, TRN_PRS_CATEGORIZED.NODE8, TRN_PRS_CATEGORIZED.NODE9, TRN_PRS_CATEGORIZED.NODE10, TRN_PRS_CATEGORIZED.LEAF_ID, TRN_PRS_CATEGORIZED.LEAF_NAME, TRN_PRS_CATEGORIZED.INCIDENT_NUMBER, TRN_PRS_CATEGORIZED.UDF1, TRN_PRS_CATEGORIZED.UDF2, TRN_PRS_CATEGORIZED.UDF3, TRN_PRS_CATEGORIZED.UDF4, TRN_PRS_CATEGORIZED.UDF5, TRN_PRS_CATEGORIZED.PRODUCT, TRN_PRS_CATEGORIZED.PLATFORM, TRN_PRS_CATEGORIZED.LOAD_TYPE) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_CV_CUSTOMER_STATE_ZIP /*+createtype(L)*/
(
 CUSTOMER_KEY,
 MARK_CUST_IDEN,
 STATE_CD,
 US_ZIP_CD,
 PRODUCT_YEAR,
 AUDIT_INS_TS,
 AUDIT_UPD_KEY,
 AUDIT_UPD_TS,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_CV_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
        TRN_CV_CUSTOMER_STATE_ZIP.MARK_CUST_IDEN,
        TRN_CV_CUSTOMER_STATE_ZIP.STATE_CD,
        TRN_CV_CUSTOMER_STATE_ZIP.US_ZIP_CD,
        TRN_CV_CUSTOMER_STATE_ZIP.PRODUCT_YEAR,
        TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_INS_TS,
        TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_KEY,
        TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_TS,
        TRN_CV_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_CV_CUSTOMER_STATE_ZIP
 ORDER BY TRN_CV_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
          TRN_CV_CUSTOMER_STATE_ZIP.MARK_CUST_IDEN,
          TRN_CV_CUSTOMER_STATE_ZIP.STATE_CD,
          TRN_CV_CUSTOMER_STATE_ZIP.US_ZIP_CD,
          TRN_CV_CUSTOMER_STATE_ZIP.PRODUCT_YEAR,
          TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_INS_TS,
          TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_KEY,
          TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_TS,
          TRN_CV_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_CV_CUSTOMER_STATE_ZIP.CUSTOMER_KEY, TRN_CV_CUSTOMER_STATE_ZIP.MARK_CUST_IDEN, TRN_CV_CUSTOMER_STATE_ZIP.PRODUCT_YEAR, TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_INS_TS, TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_KEY, TRN_CV_CUSTOMER_STATE_ZIP.AUDIT_UPD_TS, TRN_CV_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID, TRN_CV_CUSTOMER_STATE_ZIP.US_ZIP_CD, TRN_CV_CUSTOMER_STATE_ZIP.STATE_CD) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_EFS_FILING /*+createtype(L)*/
(
 FILING_ID,
 SOURCE_SYSTEM,
 FILING_TYPE,
 PERIOD,
 SENDER_ID,
 PRIMARY_FILER_ID,
 SECONDARY_FILER_ID,
 APP,
 PRIMARY_HOME_STATE,
 PAYMENT_TOTAL,
 ENGINE_CODE,
 ENGINE_VERSION,
 FORMSET_CODE,
 FORMSET_VERSION,
 BATCH_ID,
 STATE_ONLY_FLAG,
 CREDIT_FOR_SALE_PRIORITY_CODE,
 PRICING_PRIORITY_CODE,
 BANK_PRODUCT,
 CONVERTED_TYPE,
 ZIP_CODE,
 MACHINE_ID,
 INSERTION_TIMESTAMP,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_EFS_FILING.FILING_ID,
        TRN_EFS_FILING.SOURCE_SYSTEM,
        TRN_EFS_FILING.FILING_TYPE,
        TRN_EFS_FILING.PERIOD,
        TRN_EFS_FILING.SENDER_ID,
        TRN_EFS_FILING.PRIMARY_FILER_ID,
        TRN_EFS_FILING.SECONDARY_FILER_ID,
        TRN_EFS_FILING.APP,
        TRN_EFS_FILING.PRIMARY_HOME_STATE,
        TRN_EFS_FILING.PAYMENT_TOTAL,
        TRN_EFS_FILING.ENGINE_CODE,
        TRN_EFS_FILING.ENGINE_VERSION,
        TRN_EFS_FILING.FORMSET_CODE,
        TRN_EFS_FILING.FORMSET_VERSION,
        TRN_EFS_FILING.BATCH_ID,
        TRN_EFS_FILING.STATE_ONLY_FLAG,
        TRN_EFS_FILING.CREDIT_FOR_SALE_PRIORITY_CODE,
        TRN_EFS_FILING.PRICING_PRIORITY_CODE,
        TRN_EFS_FILING.BANK_PRODUCT,
        TRN_EFS_FILING.CONVERTED_TYPE,
        TRN_EFS_FILING.ZIP_CODE,
        TRN_EFS_FILING.MACHINE_ID,
        TRN_EFS_FILING.INSERTION_TIMESTAMP,
        TRN_EFS_FILING.MATT_DATE,
        TRN_EFS_FILING.BATCH_EVENT_ID,
        TRN_EFS_FILING.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_EFS_FILING
 ORDER BY TRN_EFS_FILING.FILING_ID,
          TRN_EFS_FILING.SOURCE_SYSTEM,
          TRN_EFS_FILING.FILING_TYPE,
          TRN_EFS_FILING.PERIOD,
          TRN_EFS_FILING.SENDER_ID,
          TRN_EFS_FILING.PRIMARY_FILER_ID,
          TRN_EFS_FILING.SECONDARY_FILER_ID,
          TRN_EFS_FILING.APP,
          TRN_EFS_FILING.PRIMARY_HOME_STATE,
          TRN_EFS_FILING.PAYMENT_TOTAL,
          TRN_EFS_FILING.ENGINE_CODE,
          TRN_EFS_FILING.ENGINE_VERSION,
          TRN_EFS_FILING.FORMSET_CODE,
          TRN_EFS_FILING.FORMSET_VERSION,
          TRN_EFS_FILING.BATCH_ID,
          TRN_EFS_FILING.STATE_ONLY_FLAG,
          TRN_EFS_FILING.CREDIT_FOR_SALE_PRIORITY_CODE,
          TRN_EFS_FILING.PRICING_PRIORITY_CODE,
          TRN_EFS_FILING.BANK_PRODUCT,
          TRN_EFS_FILING.CONVERTED_TYPE,
          TRN_EFS_FILING.ZIP_CODE,
          TRN_EFS_FILING.MACHINE_ID,
          TRN_EFS_FILING.INSERTION_TIMESTAMP,
          TRN_EFS_FILING.MATT_DATE,
          TRN_EFS_FILING.BATCH_EVENT_ID,
          TRN_EFS_FILING.AUDIT_INS_BY
SEGMENTED BY hash(TRN_EFS_FILING.SOURCE_SYSTEM, TRN_EFS_FILING.PRIMARY_HOME_STATE, TRN_EFS_FILING.PAYMENT_TOTAL, TRN_EFS_FILING.STATE_ONLY_FLAG, TRN_EFS_FILING.BANK_PRODUCT, TRN_EFS_FILING.ZIP_CODE, TRN_EFS_FILING.INSERTION_TIMESTAMP, TRN_EFS_FILING.MATT_DATE, TRN_EFS_FILING.BATCH_EVENT_ID, TRN_EFS_FILING.FILING_ID, TRN_EFS_FILING.BATCH_ID, TRN_EFS_FILING.CONVERTED_TYPE, TRN_EFS_FILING.AUDIT_INS_BY, TRN_EFS_FILING.FILING_TYPE, TRN_EFS_FILING.PERIOD, TRN_EFS_FILING.SENDER_ID, TRN_EFS_FILING.PRIMARY_FILER_ID, TRN_EFS_FILING.SECONDARY_FILER_ID, TRN_EFS_FILING.APP, TRN_EFS_FILING.ENGINE_CODE, TRN_EFS_FILING.ENGINE_VERSION, TRN_EFS_FILING.FORMSET_CODE, TRN_EFS_FILING.FORMSET_VERSION, TRN_EFS_FILING.CREDIT_FOR_SALE_PRIORITY_CODE, TRN_EFS_FILING.PRICING_PRIORITY_CODE, TRN_EFS_FILING.MACHINE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_EFS_FILING_STATUS_CHANGE /*+createtype(L)*/
(
 CHANGE_ID,
 FILING_ID,
 STATUS_TYPE,
 TIMESTAMP_DTM,
 INSERTION_TIMESTAMP,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_EFS_FILING_STATUS_CHANGE.CHANGE_ID,
        TRN_EFS_FILING_STATUS_CHANGE.FILING_ID,
        TRN_EFS_FILING_STATUS_CHANGE.STATUS_TYPE,
        TRN_EFS_FILING_STATUS_CHANGE.TIMESTAMP_DTM,
        TRN_EFS_FILING_STATUS_CHANGE.INSERTION_TIMESTAMP,
        TRN_EFS_FILING_STATUS_CHANGE.MATT_DATE,
        TRN_EFS_FILING_STATUS_CHANGE.BATCH_EVENT_ID,
        TRN_EFS_FILING_STATUS_CHANGE.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_EFS_FILING_STATUS_CHANGE
 ORDER BY TRN_EFS_FILING_STATUS_CHANGE.CHANGE_ID,
          TRN_EFS_FILING_STATUS_CHANGE.FILING_ID,
          TRN_EFS_FILING_STATUS_CHANGE.STATUS_TYPE,
          TRN_EFS_FILING_STATUS_CHANGE.TIMESTAMP_DTM,
          TRN_EFS_FILING_STATUS_CHANGE.INSERTION_TIMESTAMP,
          TRN_EFS_FILING_STATUS_CHANGE.MATT_DATE,
          TRN_EFS_FILING_STATUS_CHANGE.BATCH_EVENT_ID,
          TRN_EFS_FILING_STATUS_CHANGE.AUDIT_INS_BY
SEGMENTED BY hash(TRN_EFS_FILING_STATUS_CHANGE.STATUS_TYPE, TRN_EFS_FILING_STATUS_CHANGE.TIMESTAMP_DTM, TRN_EFS_FILING_STATUS_CHANGE.INSERTION_TIMESTAMP, TRN_EFS_FILING_STATUS_CHANGE.MATT_DATE, TRN_EFS_FILING_STATUS_CHANGE.BATCH_EVENT_ID, TRN_EFS_FILING_STATUS_CHANGE.FILING_ID, TRN_EFS_FILING_STATUS_CHANGE.AUDIT_INS_BY, TRN_EFS_FILING_STATUS_CHANGE.CHANGE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_EFS_FILING_PAYMENT /*+createtype(L)*/
(
 FILING_ID,
 SEQ_NUM,
 AMOUNT,
 RTN,
 PAYMENT_METHOD,
 INSERTION_TIMESTAMP,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_EFS_FILING_PAYMENT.FILING_ID,
        TRN_EFS_FILING_PAYMENT.SEQ_NUM,
        TRN_EFS_FILING_PAYMENT.AMOUNT,
        TRN_EFS_FILING_PAYMENT.RTN,
        TRN_EFS_FILING_PAYMENT.PAYMENT_METHOD,
        TRN_EFS_FILING_PAYMENT.INSERTION_TIMESTAMP,
        TRN_EFS_FILING_PAYMENT.MATT_DATE,
        TRN_EFS_FILING_PAYMENT.BATCH_EVENT_ID,
        TRN_EFS_FILING_PAYMENT.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_EFS_FILING_PAYMENT
 ORDER BY TRN_EFS_FILING_PAYMENT.FILING_ID,
          TRN_EFS_FILING_PAYMENT.SEQ_NUM,
          TRN_EFS_FILING_PAYMENT.AMOUNT,
          TRN_EFS_FILING_PAYMENT.RTN,
          TRN_EFS_FILING_PAYMENT.PAYMENT_METHOD,
          TRN_EFS_FILING_PAYMENT.INSERTION_TIMESTAMP,
          TRN_EFS_FILING_PAYMENT.MATT_DATE,
          TRN_EFS_FILING_PAYMENT.BATCH_EVENT_ID,
          TRN_EFS_FILING_PAYMENT.AUDIT_INS_BY
SEGMENTED BY hash(TRN_EFS_FILING_PAYMENT.SEQ_NUM, TRN_EFS_FILING_PAYMENT.AMOUNT, TRN_EFS_FILING_PAYMENT.PAYMENT_METHOD, TRN_EFS_FILING_PAYMENT.INSERTION_TIMESTAMP, TRN_EFS_FILING_PAYMENT.MATT_DATE, TRN_EFS_FILING_PAYMENT.BATCH_EVENT_ID, TRN_EFS_FILING_PAYMENT.FILING_ID, TRN_EFS_FILING_PAYMENT.RTN, TRN_EFS_FILING_PAYMENT.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_EFS_RISK_SCORE /*+createtype(L)*/
(
 FILING_ID,
 RISK_SCORE,
 SCORE_DATE,
 REPORT_ID,
 INSERTION_TIMESTAMP,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_EFS_RISK_SCORE.FILING_ID,
        TRN_EFS_RISK_SCORE.RISK_SCORE,
        TRN_EFS_RISK_SCORE.SCORE_DATE,
        TRN_EFS_RISK_SCORE.REPORT_ID,
        TRN_EFS_RISK_SCORE.INSERTION_TIMESTAMP,
        TRN_EFS_RISK_SCORE.MATT_DATE,
        TRN_EFS_RISK_SCORE.BATCH_EVENT_ID,
        TRN_EFS_RISK_SCORE.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_EFS_RISK_SCORE
 ORDER BY TRN_EFS_RISK_SCORE.FILING_ID,
          TRN_EFS_RISK_SCORE.RISK_SCORE,
          TRN_EFS_RISK_SCORE.SCORE_DATE,
          TRN_EFS_RISK_SCORE.REPORT_ID,
          TRN_EFS_RISK_SCORE.INSERTION_TIMESTAMP,
          TRN_EFS_RISK_SCORE.MATT_DATE,
          TRN_EFS_RISK_SCORE.BATCH_EVENT_ID,
          TRN_EFS_RISK_SCORE.AUDIT_INS_BY
SEGMENTED BY hash(TRN_EFS_RISK_SCORE.RISK_SCORE, TRN_EFS_RISK_SCORE.SCORE_DATE, TRN_EFS_RISK_SCORE.REPORT_ID, TRN_EFS_RISK_SCORE.INSERTION_TIMESTAMP, TRN_EFS_RISK_SCORE.MATT_DATE, TRN_EFS_RISK_SCORE.BATCH_EVENT_ID, TRN_EFS_RISK_SCORE.FILING_ID, TRN_EFS_RISK_SCORE.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_EFS_REFUND_TRANSFER_ITEMS /*+createtype(L)*/
(
 ORDER_NUMBER,
 SEQ_NUM,
 ITEM_TYPE,
 PRODUCT_ALIAS,
 ITEM_AMOUNT,
 SALES_TAX_AMOUNT,
 VOUCHER_AMOUNT,
 VOUCHER_CAMPAIGN_CODE,
 CREDIT_FOR_SALE_PRIORITY_CODE,
 PRICING_PRIORITY_CODE,
 PAID_FOR_BY_FILING_ID,
 INSERTION_TIMESTAMP,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_EFS_REFUND_TRANSFER_ITEMS.ORDER_NUMBER,
        TRN_EFS_REFUND_TRANSFER_ITEMS.SEQ_NUM,
        TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_TYPE,
        TRN_EFS_REFUND_TRANSFER_ITEMS.PRODUCT_ALIAS,
        TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_AMOUNT,
        TRN_EFS_REFUND_TRANSFER_ITEMS.SALES_TAX_AMOUNT,
        TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_AMOUNT,
        TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_CAMPAIGN_CODE,
        TRN_EFS_REFUND_TRANSFER_ITEMS.CREDIT_FOR_SALE_PRIORITY_CODE,
        TRN_EFS_REFUND_TRANSFER_ITEMS.PRICING_PRIORITY_CODE,
        TRN_EFS_REFUND_TRANSFER_ITEMS.PAID_FOR_BY_FILING_ID,
        TRN_EFS_REFUND_TRANSFER_ITEMS.INSERTION_TIMESTAMP,
        TRN_EFS_REFUND_TRANSFER_ITEMS.MATT_DATE,
        TRN_EFS_REFUND_TRANSFER_ITEMS.BATCH_EVENT_ID,
        TRN_EFS_REFUND_TRANSFER_ITEMS.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_EFS_REFUND_TRANSFER_ITEMS
 ORDER BY TRN_EFS_REFUND_TRANSFER_ITEMS.ORDER_NUMBER,
          TRN_EFS_REFUND_TRANSFER_ITEMS.SEQ_NUM,
          TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_TYPE,
          TRN_EFS_REFUND_TRANSFER_ITEMS.PRODUCT_ALIAS,
          TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_AMOUNT,
          TRN_EFS_REFUND_TRANSFER_ITEMS.SALES_TAX_AMOUNT,
          TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_AMOUNT,
          TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_CAMPAIGN_CODE,
          TRN_EFS_REFUND_TRANSFER_ITEMS.CREDIT_FOR_SALE_PRIORITY_CODE,
          TRN_EFS_REFUND_TRANSFER_ITEMS.PRICING_PRIORITY_CODE,
          TRN_EFS_REFUND_TRANSFER_ITEMS.PAID_FOR_BY_FILING_ID,
          TRN_EFS_REFUND_TRANSFER_ITEMS.INSERTION_TIMESTAMP,
          TRN_EFS_REFUND_TRANSFER_ITEMS.MATT_DATE,
          TRN_EFS_REFUND_TRANSFER_ITEMS.BATCH_EVENT_ID,
          TRN_EFS_REFUND_TRANSFER_ITEMS.AUDIT_INS_BY
SEGMENTED BY hash(TRN_EFS_REFUND_TRANSFER_ITEMS.SEQ_NUM, TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_AMOUNT, TRN_EFS_REFUND_TRANSFER_ITEMS.SALES_TAX_AMOUNT, TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_AMOUNT, TRN_EFS_REFUND_TRANSFER_ITEMS.INSERTION_TIMESTAMP, TRN_EFS_REFUND_TRANSFER_ITEMS.MATT_DATE, TRN_EFS_REFUND_TRANSFER_ITEMS.BATCH_EVENT_ID, TRN_EFS_REFUND_TRANSFER_ITEMS.VOUCHER_CAMPAIGN_CODE, TRN_EFS_REFUND_TRANSFER_ITEMS.PRODUCT_ALIAS, TRN_EFS_REFUND_TRANSFER_ITEMS.ITEM_TYPE, TRN_EFS_REFUND_TRANSFER_ITEMS.PAID_FOR_BY_FILING_ID, TRN_EFS_REFUND_TRANSFER_ITEMS.ORDER_NUMBER, TRN_EFS_REFUND_TRANSFER_ITEMS.AUDIT_INS_BY, TRN_EFS_REFUND_TRANSFER_ITEMS.CREDIT_FOR_SALE_PRIORITY_CODE, TRN_EFS_REFUND_TRANSFER_ITEMS.PRICING_PRIORITY_CODE) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_IDW_CAMPAIGN /*+createtype(L)*/
(
 PRIORITY_CODE,
 SOURCE_CODE_ALIAS,
 ALLIANCE,
 SPONSOR_TYPE,
 MARKETING_DESC,
 SALES_DESC,
 BATCH_EVENT_ID,
 priority_key,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_IDW_CAMPAIGN.PRIORITY_CODE,
        TRN_IDW_CAMPAIGN.SOURCE_CODE_ALIAS,
        TRN_IDW_CAMPAIGN.ALLIANCE,
        TRN_IDW_CAMPAIGN.SPONSOR_TYPE,
        TRN_IDW_CAMPAIGN.MARKETING_DESC,
        TRN_IDW_CAMPAIGN.SALES_DESC,
        TRN_IDW_CAMPAIGN.BATCH_EVENT_ID,
        TRN_IDW_CAMPAIGN.priority_key,
        TRN_IDW_CAMPAIGN.CREATED_TIMESTAMP,
        TRN_IDW_CAMPAIGN.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_IDW_CAMPAIGN
 ORDER BY TRN_IDW_CAMPAIGN.PRIORITY_CODE,
          TRN_IDW_CAMPAIGN.SOURCE_CODE_ALIAS,
          TRN_IDW_CAMPAIGN.ALLIANCE,
          TRN_IDW_CAMPAIGN.SPONSOR_TYPE,
          TRN_IDW_CAMPAIGN.MARKETING_DESC,
          TRN_IDW_CAMPAIGN.SALES_DESC,
          TRN_IDW_CAMPAIGN.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_IDW_CAMPAIGN.SALES_DESC, TRN_IDW_CAMPAIGN.BATCH_EVENT_ID, TRN_IDW_CAMPAIGN.PRIORITY_CODE, TRN_IDW_CAMPAIGN.SOURCE_CODE_ALIAS, TRN_IDW_CAMPAIGN.ALLIANCE, TRN_IDW_CAMPAIGN.SPONSOR_TYPE, TRN_IDW_CAMPAIGN.MARKETING_DESC) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_IUS_AUTHENTICATION /*+createtype(L)*/
(
 AUTH_DATE,
 AUTH_ID,
 SOURCE,
 ROLE,
 AUTH_SOURCE,
 PRODUCT_ID,
 BATCH_EVENT_ID,
 AUTHENTICATION_LEVEL,
 IP_ADDRESS,
 TEST_FLAG,
 TRANSACTION_ID
)
AS
 SELECT TRN_IUS_AUTHENTICATION.AUTH_DATE,
        TRN_IUS_AUTHENTICATION.AUTH_ID,
        TRN_IUS_AUTHENTICATION.SOURCE,
        TRN_IUS_AUTHENTICATION.ROLE,
        TRN_IUS_AUTHENTICATION.AUTH_SOURCE,
        TRN_IUS_AUTHENTICATION.PRODUCT_ID,
        TRN_IUS_AUTHENTICATION.BATCH_EVENT_ID,
        TRN_IUS_AUTHENTICATION.AUTHENTICATION_LEVEL,
        TRN_IUS_AUTHENTICATION.IP_ADDRESS,
        TRN_IUS_AUTHENTICATION.TEST_FLAG,
        TRN_IUS_AUTHENTICATION.TRANSACTION_ID
 FROM CTG_ANALYTICS_SRC.TRN_IUS_AUTHENTICATION
 ORDER BY TRN_IUS_AUTHENTICATION.AUTH_DATE,
          TRN_IUS_AUTHENTICATION.AUTH_ID,
          TRN_IUS_AUTHENTICATION.SOURCE,
          TRN_IUS_AUTHENTICATION.ROLE,
          TRN_IUS_AUTHENTICATION.AUTH_SOURCE,
          TRN_IUS_AUTHENTICATION.PRODUCT_ID,
          TRN_IUS_AUTHENTICATION.BATCH_EVENT_ID,
          TRN_IUS_AUTHENTICATION.AUTHENTICATION_LEVEL,
          TRN_IUS_AUTHENTICATION.IP_ADDRESS,
          TRN_IUS_AUTHENTICATION.TEST_FLAG,
          TRN_IUS_AUTHENTICATION.TRANSACTION_ID
SEGMENTED BY hash(TRN_IUS_AUTHENTICATION.BATCH_EVENT_ID, TRN_IUS_AUTHENTICATION.ROLE, TRN_IUS_AUTHENTICATION.AUTH_SOURCE, TRN_IUS_AUTHENTICATION.TEST_FLAG, TRN_IUS_AUTHENTICATION.AUTH_DATE, TRN_IUS_AUTHENTICATION.AUTH_ID, TRN_IUS_AUTHENTICATION.SOURCE, TRN_IUS_AUTHENTICATION.PRODUCT_ID, TRN_IUS_AUTHENTICATION.AUTHENTICATION_LEVEL, TRN_IUS_AUTHENTICATION.IP_ADDRESS, TRN_IUS_AUTHENTICATION.TRANSACTION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SP_NUEET_SESSION_AUTH_LOG /*+createtype(L)*/
(
 AUTH_DATE,
 AUTH_ID,
 SOURCE,
 ROLE,
 AUTH_SOURCE,
 PRODUCT_ID,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_DATE,
        TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_ID,
        TRN_SP_NUEET_SESSION_AUTH_LOG.SOURCE,
        TRN_SP_NUEET_SESSION_AUTH_LOG.ROLE,
        TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_SOURCE,
        TRN_SP_NUEET_SESSION_AUTH_LOG.PRODUCT_ID,
        TRN_SP_NUEET_SESSION_AUTH_LOG.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SP_NUEET_SESSION_AUTH_LOG
 ORDER BY TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_DATE,
          TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_ID,
          TRN_SP_NUEET_SESSION_AUTH_LOG.SOURCE,
          TRN_SP_NUEET_SESSION_AUTH_LOG.ROLE,
          TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_SOURCE,
          TRN_SP_NUEET_SESSION_AUTH_LOG.PRODUCT_ID,
          TRN_SP_NUEET_SESSION_AUTH_LOG.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SP_NUEET_SESSION_AUTH_LOG.BATCH_EVENT_ID, TRN_SP_NUEET_SESSION_AUTH_LOG.ROLE, TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_SOURCE, TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_DATE, TRN_SP_NUEET_SESSION_AUTH_LOG.AUTH_ID, TRN_SP_NUEET_SESSION_AUTH_LOG.SOURCE, TRN_SP_NUEET_SESSION_AUTH_LOG.PRODUCT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SP_SESSION_START /*+createtype(L)*/
(
 START_DATE,
 AUTH_ID,
 PRIORITY_CODE,
 PRODUCT_ID,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SP_SESSION_START.START_DATE,
        TRN_SP_SESSION_START.AUTH_ID,
        TRN_SP_SESSION_START.PRIORITY_CODE,
        TRN_SP_SESSION_START.PRODUCT_ID,
        TRN_SP_SESSION_START.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SP_SESSION_START
 ORDER BY TRN_SP_SESSION_START.START_DATE,
          TRN_SP_SESSION_START.AUTH_ID,
          TRN_SP_SESSION_START.PRIORITY_CODE,
          TRN_SP_SESSION_START.PRODUCT_ID,
          TRN_SP_SESSION_START.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SP_SESSION_START.AUTH_ID, TRN_SP_SESSION_START.BATCH_EVENT_ID, TRN_SP_SESSION_START.START_DATE, TRN_SP_SESSION_START.PRIORITY_CODE, TRN_SP_SESSION_START.PRODUCT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SP_SESSION_END /*+createtype(L)*/
(
 SESSION_DATE,
 AUTH_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 PRODUCT_ID,
 FIRST_TIME_FLAG,
 ORIGINAL_PRODUCTID,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SP_SESSION_END.SESSION_DATE,
        TRN_SP_SESSION_END.AUTH_ID,
        TRN_SP_SESSION_END.CURRENT_PRIORITY_CODE,
        TRN_SP_SESSION_END.PRICE_PRIORITY_CODE,
        TRN_SP_SESSION_END.CREDIT_PRIORITY_CODE,
        TRN_SP_SESSION_END.PRODUCT_ID,
        TRN_SP_SESSION_END.FIRST_TIME_FLAG,
        TRN_SP_SESSION_END.ORIGINAL_PRODUCTID,
        TRN_SP_SESSION_END.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SP_SESSION_END
 ORDER BY TRN_SP_SESSION_END.SESSION_DATE,
          TRN_SP_SESSION_END.AUTH_ID,
          TRN_SP_SESSION_END.CURRENT_PRIORITY_CODE,
          TRN_SP_SESSION_END.PRICE_PRIORITY_CODE,
          TRN_SP_SESSION_END.CREDIT_PRIORITY_CODE,
          TRN_SP_SESSION_END.PRODUCT_ID,
          TRN_SP_SESSION_END.FIRST_TIME_FLAG,
          TRN_SP_SESSION_END.ORIGINAL_PRODUCTID,
          TRN_SP_SESSION_END.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SP_SESSION_END.AUTH_ID, TRN_SP_SESSION_END.FIRST_TIME_FLAG, TRN_SP_SESSION_END.BATCH_EVENT_ID, TRN_SP_SESSION_END.SESSION_DATE, TRN_SP_SESSION_END.ORIGINAL_PRODUCTID, TRN_SP_SESSION_END.CURRENT_PRIORITY_CODE, TRN_SP_SESSION_END.PRICE_PRIORITY_CODE, TRN_SP_SESSION_END.CREDIT_PRIORITY_CODE, TRN_SP_SESSION_END.PRODUCT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SP_PRS /*+createtype(L)*/
(
 DATESTAMP,
 AUTH_ID,
 PRODUCTID,
 LOCATION,
 SCORE,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SP_PRS.DATESTAMP,
        TRN_SP_PRS.AUTH_ID,
        TRN_SP_PRS.PRODUCTID,
        TRN_SP_PRS.LOCATION,
        TRN_SP_PRS.SCORE,
        TRN_SP_PRS.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SP_PRS
 ORDER BY TRN_SP_PRS.DATESTAMP,
          TRN_SP_PRS.AUTH_ID,
          TRN_SP_PRS.PRODUCTID,
          TRN_SP_PRS.LOCATION,
          TRN_SP_PRS.SCORE,
          TRN_SP_PRS.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SP_PRS.BATCH_EVENT_ID, TRN_SP_PRS.DATESTAMP, TRN_SP_PRS.AUTH_ID, TRN_SP_PRS.PRODUCTID, TRN_SP_PRS.LOCATION, TRN_SP_PRS.SCORE) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SP_PRS_VERBATIM /*+createtype(L)*/
(
 PRS_KEY,
 PRS_DATE,
 AUTH_ID,
 TAX_YEAR,
 PRODUCT_ENGINE,
 VERBATIM,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SP_PRS_VERBATIM.PRS_KEY,
        TRN_SP_PRS_VERBATIM.PRS_DATE,
        TRN_SP_PRS_VERBATIM.AUTH_ID,
        TRN_SP_PRS_VERBATIM.TAX_YEAR,
        TRN_SP_PRS_VERBATIM.PRODUCT_ENGINE,
        TRN_SP_PRS_VERBATIM.VERBATIM,
        TRN_SP_PRS_VERBATIM.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SP_PRS_VERBATIM
 ORDER BY TRN_SP_PRS_VERBATIM.PRS_KEY,
          TRN_SP_PRS_VERBATIM.PRS_DATE,
          TRN_SP_PRS_VERBATIM.AUTH_ID,
          TRN_SP_PRS_VERBATIM.TAX_YEAR,
          TRN_SP_PRS_VERBATIM.PRODUCT_ENGINE,
          TRN_SP_PRS_VERBATIM.VERBATIM,
          TRN_SP_PRS_VERBATIM.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SP_PRS_VERBATIM.PRS_KEY, TRN_SP_PRS_VERBATIM.PRS_DATE, TRN_SP_PRS_VERBATIM.AUTH_ID, TRN_SP_PRS_VERBATIM.TAX_YEAR, TRN_SP_PRS_VERBATIM.PRODUCT_ENGINE, TRN_SP_PRS_VERBATIM.BATCH_EVENT_ID, TRN_SP_PRS_VERBATIM.VERBATIM) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SF_CC_ASSISTED_CONTACTS /*+createtype(L)*/
(
 CASE_NBR,
 CASE_CREATED_DT,
 VISITOR_ID,
 AUTH_ID,
 CHANNEL,
 PLATFORM,
 PRODUCT_CD,
 PRODUCT,
 CORP_ID,
 WORK_GRP,
 AGENT_NAME,
 AGENT_COMPANY,
 AGENT_LOCATION,
 CATEGORY__C,
 SEGMENT__C,
 SUB_CATEGORY__C,
 OTHERSYSTEMINFO__C,
 BATCH_EVENT_ID
)
AS
 SELECT TRN_SF_CC_ASSISTED_CONTACTS.CASE_NBR,
        TRN_SF_CC_ASSISTED_CONTACTS.CASE_CREATED_DT,
        TRN_SF_CC_ASSISTED_CONTACTS.VISITOR_ID,
        TRN_SF_CC_ASSISTED_CONTACTS.AUTH_ID,
        TRN_SF_CC_ASSISTED_CONTACTS.CHANNEL,
        TRN_SF_CC_ASSISTED_CONTACTS.PLATFORM,
        TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT_CD,
        TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT,
        TRN_SF_CC_ASSISTED_CONTACTS.CORP_ID,
        TRN_SF_CC_ASSISTED_CONTACTS.WORK_GRP,
        TRN_SF_CC_ASSISTED_CONTACTS.AGENT_NAME,
        TRN_SF_CC_ASSISTED_CONTACTS.AGENT_COMPANY,
        TRN_SF_CC_ASSISTED_CONTACTS.AGENT_LOCATION,
        TRN_SF_CC_ASSISTED_CONTACTS.CATEGORY__C,
        TRN_SF_CC_ASSISTED_CONTACTS.SEGMENT__C,
        TRN_SF_CC_ASSISTED_CONTACTS.SUB_CATEGORY__C,
        TRN_SF_CC_ASSISTED_CONTACTS.OTHERSYSTEMINFO__C,
        TRN_SF_CC_ASSISTED_CONTACTS.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_SRC.TRN_SF_CC_ASSISTED_CONTACTS
 ORDER BY TRN_SF_CC_ASSISTED_CONTACTS.CASE_NBR,
          TRN_SF_CC_ASSISTED_CONTACTS.CASE_CREATED_DT,
          TRN_SF_CC_ASSISTED_CONTACTS.VISITOR_ID,
          TRN_SF_CC_ASSISTED_CONTACTS.AUTH_ID,
          TRN_SF_CC_ASSISTED_CONTACTS.CHANNEL,
          TRN_SF_CC_ASSISTED_CONTACTS.PLATFORM,
          TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT_CD,
          TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT,
          TRN_SF_CC_ASSISTED_CONTACTS.CORP_ID,
          TRN_SF_CC_ASSISTED_CONTACTS.WORK_GRP,
          TRN_SF_CC_ASSISTED_CONTACTS.AGENT_NAME,
          TRN_SF_CC_ASSISTED_CONTACTS.AGENT_COMPANY,
          TRN_SF_CC_ASSISTED_CONTACTS.AGENT_LOCATION,
          TRN_SF_CC_ASSISTED_CONTACTS.CATEGORY__C,
          TRN_SF_CC_ASSISTED_CONTACTS.SEGMENT__C,
          TRN_SF_CC_ASSISTED_CONTACTS.SUB_CATEGORY__C,
          TRN_SF_CC_ASSISTED_CONTACTS.OTHERSYSTEMINFO__C,
          TRN_SF_CC_ASSISTED_CONTACTS.BATCH_EVENT_ID
SEGMENTED BY hash(TRN_SF_CC_ASSISTED_CONTACTS.CASE_CREATED_DT, TRN_SF_CC_ASSISTED_CONTACTS.AUTH_ID, TRN_SF_CC_ASSISTED_CONTACTS.BATCH_EVENT_ID, TRN_SF_CC_ASSISTED_CONTACTS.CASE_NBR, TRN_SF_CC_ASSISTED_CONTACTS.WORK_GRP, TRN_SF_CC_ASSISTED_CONTACTS.AGENT_LOCATION, TRN_SF_CC_ASSISTED_CONTACTS.VISITOR_ID, TRN_SF_CC_ASSISTED_CONTACTS.OTHERSYSTEMINFO__C, TRN_SF_CC_ASSISTED_CONTACTS.AGENT_COMPANY, TRN_SF_CC_ASSISTED_CONTACTS.AGENT_NAME, TRN_SF_CC_ASSISTED_CONTACTS.CHANNEL, TRN_SF_CC_ASSISTED_CONTACTS.PLATFORM, TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT_CD, TRN_SF_CC_ASSISTED_CONTACTS.PRODUCT, TRN_SF_CC_ASSISTED_CONTACTS.CATEGORY__C, TRN_SF_CC_ASSISTED_CONTACTS.SEGMENT__C, TRN_SF_CC_ASSISTED_CONTACTS.SUB_CATEGORY__C, TRN_SF_CC_ASSISTED_CONTACTS.CORP_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_ORDERS /*+createtype(L)*/
(
 ORDER_DATE,
 AUTH_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORDER_NUMBER,
 PRODUCT_CODE,
 PAYMENT_METHOD,
 PAYMENT_AMOUNT,
 ORIGINAL_PRODUCTID,
 VOUCHER_CODE,
 ORDER_ORIGIN,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_ORDERS.ORDER_DATE,
        TRN_TTO_ORDERS.AUTH_ID,
        TRN_TTO_ORDERS.PRIMARY_ID,
        TRN_TTO_ORDERS.SECONDARY_ID,
        TRN_TTO_ORDERS.CURRENT_PRIORITY_CODE,
        TRN_TTO_ORDERS.PRICE_PRIORITY_CODE,
        TRN_TTO_ORDERS.CREDIT_PRIORITY_CODE,
        TRN_TTO_ORDERS.ORDER_NUMBER,
        TRN_TTO_ORDERS.PRODUCT_CODE,
        TRN_TTO_ORDERS.PAYMENT_METHOD,
        TRN_TTO_ORDERS.PAYMENT_AMOUNT,
        TRN_TTO_ORDERS.ORIGINAL_PRODUCTID,
        TRN_TTO_ORDERS.VOUCHER_CODE,
        TRN_TTO_ORDERS.ORDER_ORIGIN,
        TRN_TTO_ORDERS.MATT_DATE,
        TRN_TTO_ORDERS.BATCH_EVENT_ID,
        TRN_TTO_ORDERS.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_ORDERS
 ORDER BY TRN_TTO_ORDERS.ORDER_DATE,
          TRN_TTO_ORDERS.AUTH_ID,
          TRN_TTO_ORDERS.PRIMARY_ID,
          TRN_TTO_ORDERS.SECONDARY_ID,
          TRN_TTO_ORDERS.CURRENT_PRIORITY_CODE,
          TRN_TTO_ORDERS.PRICE_PRIORITY_CODE,
          TRN_TTO_ORDERS.CREDIT_PRIORITY_CODE,
          TRN_TTO_ORDERS.ORDER_NUMBER,
          TRN_TTO_ORDERS.PRODUCT_CODE,
          TRN_TTO_ORDERS.PAYMENT_METHOD,
          TRN_TTO_ORDERS.PAYMENT_AMOUNT,
          TRN_TTO_ORDERS.ORIGINAL_PRODUCTID,
          TRN_TTO_ORDERS.VOUCHER_CODE,
          TRN_TTO_ORDERS.ORDER_ORIGIN,
          TRN_TTO_ORDERS.MATT_DATE,
          TRN_TTO_ORDERS.BATCH_EVENT_ID,
          TRN_TTO_ORDERS.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_ORDERS.ORDER_DATE, TRN_TTO_ORDERS.AUTH_ID, TRN_TTO_ORDERS.PAYMENT_AMOUNT, TRN_TTO_ORDERS.ORIGINAL_PRODUCTID, TRN_TTO_ORDERS.MATT_DATE, TRN_TTO_ORDERS.BATCH_EVENT_ID, TRN_TTO_ORDERS.VOUCHER_CODE, TRN_TTO_ORDERS.PRODUCT_CODE, TRN_TTO_ORDERS.ORDER_ORIGIN, TRN_TTO_ORDERS.AUDIT_INS_BY, TRN_TTO_ORDERS.CURRENT_PRIORITY_CODE, TRN_TTO_ORDERS.PRICE_PRIORITY_CODE, TRN_TTO_ORDERS.CREDIT_PRIORITY_CODE, TRN_TTO_ORDERS.ORDER_NUMBER, TRN_TTO_ORDERS.PRIMARY_ID, TRN_TTO_ORDERS.SECONDARY_ID, TRN_TTO_ORDERS.PAYMENT_METHOD) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_AUTHENTICATION /*+createtype(L)*/
(
 AUTH_DATE,
 AUTH_ID,
 SOURCE,
 ROLE,
 AUTH_SOURCE,
 PRODUCT_ID,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_AUTHENTICATION.AUTH_DATE,
        TRN_TTO_AUTHENTICATION.AUTH_ID,
        TRN_TTO_AUTHENTICATION.SOURCE,
        TRN_TTO_AUTHENTICATION.ROLE,
        TRN_TTO_AUTHENTICATION.AUTH_SOURCE,
        TRN_TTO_AUTHENTICATION.PRODUCT_ID,
        TRN_TTO_AUTHENTICATION.MATT_DATE,
        TRN_TTO_AUTHENTICATION.BATCH_EVENT_ID,
        TRN_TTO_AUTHENTICATION.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_AUTHENTICATION
 ORDER BY TRN_TTO_AUTHENTICATION.AUTH_DATE,
          TRN_TTO_AUTHENTICATION.AUTH_ID,
          TRN_TTO_AUTHENTICATION.SOURCE,
          TRN_TTO_AUTHENTICATION.ROLE,
          TRN_TTO_AUTHENTICATION.AUTH_SOURCE,
          TRN_TTO_AUTHENTICATION.PRODUCT_ID,
          TRN_TTO_AUTHENTICATION.MATT_DATE,
          TRN_TTO_AUTHENTICATION.BATCH_EVENT_ID,
          TRN_TTO_AUTHENTICATION.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_AUTHENTICATION.AUTH_DATE, TRN_TTO_AUTHENTICATION.AUTH_ID, TRN_TTO_AUTHENTICATION.ROLE, TRN_TTO_AUTHENTICATION.AUTH_SOURCE, TRN_TTO_AUTHENTICATION.PRODUCT_ID, TRN_TTO_AUTHENTICATION.MATT_DATE, TRN_TTO_AUTHENTICATION.BATCH_EVENT_ID, TRN_TTO_AUTHENTICATION.SOURCE, TRN_TTO_AUTHENTICATION.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_PRS /*+createtype(L)*/
(
 DATESTAMP,
 AUTH_ID,
 PRODUCTID,
 LOCATION,
 SCORE,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_PRS.DATESTAMP,
        TRN_TTO_PRS.AUTH_ID,
        TRN_TTO_PRS.PRODUCTID,
        TRN_TTO_PRS.LOCATION,
        TRN_TTO_PRS.SCORE,
        TRN_TTO_PRS.MATT_DATE,
        TRN_TTO_PRS.BATCH_EVENT_ID,
        TRN_TTO_PRS.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_PRS
 ORDER BY TRN_TTO_PRS.DATESTAMP,
          TRN_TTO_PRS.AUTH_ID,
          TRN_TTO_PRS.PRODUCTID,
          TRN_TTO_PRS.LOCATION,
          TRN_TTO_PRS.SCORE,
          TRN_TTO_PRS.MATT_DATE,
          TRN_TTO_PRS.BATCH_EVENT_ID,
          TRN_TTO_PRS.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_PRS.DATESTAMP, TRN_TTO_PRS.AUTH_ID, TRN_TTO_PRS.PRODUCTID, TRN_TTO_PRS.SCORE, TRN_TTO_PRS.MATT_DATE, TRN_TTO_PRS.BATCH_EVENT_ID, TRN_TTO_PRS.LOCATION, TRN_TTO_PRS.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_SESSION_END /*+createtype(L)*/
(
 SESSION_DATE,
 AUTH_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 PRODUCT_ID,
 FIRST_TIME_FLAG,
 ORIGINAL_PRODUCTID,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_SESSION_END.SESSION_DATE,
        TRN_TTO_SESSION_END.AUTH_ID,
        TRN_TTO_SESSION_END.CURRENT_PRIORITY_CODE,
        TRN_TTO_SESSION_END.PRICE_PRIORITY_CODE,
        TRN_TTO_SESSION_END.CREDIT_PRIORITY_CODE,
        TRN_TTO_SESSION_END.PRODUCT_ID,
        TRN_TTO_SESSION_END.FIRST_TIME_FLAG,
        TRN_TTO_SESSION_END.ORIGINAL_PRODUCTID,
        TRN_TTO_SESSION_END.MATT_DATE,
        TRN_TTO_SESSION_END.BATCH_EVENT_ID,
        TRN_TTO_SESSION_END.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_SESSION_END
 ORDER BY TRN_TTO_SESSION_END.SESSION_DATE,
          TRN_TTO_SESSION_END.AUTH_ID,
          TRN_TTO_SESSION_END.CURRENT_PRIORITY_CODE,
          TRN_TTO_SESSION_END.PRICE_PRIORITY_CODE,
          TRN_TTO_SESSION_END.CREDIT_PRIORITY_CODE,
          TRN_TTO_SESSION_END.PRODUCT_ID,
          TRN_TTO_SESSION_END.FIRST_TIME_FLAG,
          TRN_TTO_SESSION_END.ORIGINAL_PRODUCTID,
          TRN_TTO_SESSION_END.MATT_DATE,
          TRN_TTO_SESSION_END.BATCH_EVENT_ID,
          TRN_TTO_SESSION_END.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_SESSION_END.SESSION_DATE, TRN_TTO_SESSION_END.AUTH_ID, TRN_TTO_SESSION_END.FIRST_TIME_FLAG, TRN_TTO_SESSION_END.ORIGINAL_PRODUCTID, TRN_TTO_SESSION_END.MATT_DATE, TRN_TTO_SESSION_END.BATCH_EVENT_ID, TRN_TTO_SESSION_END.PRODUCT_ID, TRN_TTO_SESSION_END.CURRENT_PRIORITY_CODE, TRN_TTO_SESSION_END.PRICE_PRIORITY_CODE, TRN_TTO_SESSION_END.CREDIT_PRIORITY_CODE, TRN_TTO_SESSION_END.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_SESSION_START /*+createtype(L)*/
(
 START_DATE,
 AUTH_ID,
 PRIORITY_CODE,
 PRODUCT_ID,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_SESSION_START.START_DATE,
        TRN_TTO_SESSION_START.AUTH_ID,
        TRN_TTO_SESSION_START.PRIORITY_CODE,
        TRN_TTO_SESSION_START.PRODUCT_ID,
        TRN_TTO_SESSION_START.MATT_DATE,
        TRN_TTO_SESSION_START.BATCH_EVENT_ID,
        TRN_TTO_SESSION_START.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_SESSION_START
 ORDER BY TRN_TTO_SESSION_START.START_DATE,
          TRN_TTO_SESSION_START.AUTH_ID,
          TRN_TTO_SESSION_START.PRIORITY_CODE,
          TRN_TTO_SESSION_START.PRODUCT_ID,
          TRN_TTO_SESSION_START.MATT_DATE,
          TRN_TTO_SESSION_START.BATCH_EVENT_ID,
          TRN_TTO_SESSION_START.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_SESSION_START.START_DATE, TRN_TTO_SESSION_START.AUTH_ID, TRN_TTO_SESSION_START.MATT_DATE, TRN_TTO_SESSION_START.BATCH_EVENT_ID, TRN_TTO_SESSION_START.PRIORITY_CODE, TRN_TTO_SESSION_START.PRODUCT_ID, TRN_TTO_SESSION_START.AUDIT_INS_BY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TTO_AUTH_LOG_OVERRIDE /*+createtype(P)*/
(
 AUTH_LOG_KEY,
 AUTHENTICATION_LEVEL,
 CREATED_TIMESTAMP
)
AS
 SELECT TTO_AUTH_LOG_OVERRIDE.AUTH_LOG_KEY,
        TTO_AUTH_LOG_OVERRIDE.AUTHENTICATION_LEVEL,
        TTO_AUTH_LOG_OVERRIDE.CREATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TTO_AUTH_LOG_OVERRIDE
 ORDER BY TTO_AUTH_LOG_OVERRIDE.AUTH_LOG_KEY,
          TTO_AUTH_LOG_OVERRIDE.AUTHENTICATION_LEVEL,
          TTO_AUTH_LOG_OVERRIDE.CREATED_TIMESTAMP
SEGMENTED BY hash(TTO_AUTH_LOG_OVERRIDE.AUTH_LOG_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TTO_PRS_VERBATIM /*+createtype(L)*/
(
 PRS_KEY,
 PRS_DATE,
 AUTH_ID,
 TAX_YEAR,
 PRODUCT_ENGINE,
 VERBATIM,
 MATT_DATE,
 BATCH_EVENT_ID,
 AUDIT_INS_BY
)
AS
 SELECT TRN_TTO_PRS_VERBATIM.PRS_KEY,
        TRN_TTO_PRS_VERBATIM.PRS_DATE,
        TRN_TTO_PRS_VERBATIM.AUTH_ID,
        TRN_TTO_PRS_VERBATIM.TAX_YEAR,
        TRN_TTO_PRS_VERBATIM.PRODUCT_ENGINE,
        TRN_TTO_PRS_VERBATIM.VERBATIM,
        TRN_TTO_PRS_VERBATIM.MATT_DATE,
        TRN_TTO_PRS_VERBATIM.BATCH_EVENT_ID,
        TRN_TTO_PRS_VERBATIM.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_TTO_PRS_VERBATIM
 ORDER BY TRN_TTO_PRS_VERBATIM.PRS_KEY,
          TRN_TTO_PRS_VERBATIM.PRS_DATE,
          TRN_TTO_PRS_VERBATIM.AUTH_ID,
          TRN_TTO_PRS_VERBATIM.TAX_YEAR,
          TRN_TTO_PRS_VERBATIM.PRODUCT_ENGINE,
          TRN_TTO_PRS_VERBATIM.VERBATIM,
          TRN_TTO_PRS_VERBATIM.MATT_DATE,
          TRN_TTO_PRS_VERBATIM.BATCH_EVENT_ID,
          TRN_TTO_PRS_VERBATIM.AUDIT_INS_BY
SEGMENTED BY hash(TRN_TTO_PRS_VERBATIM.PRS_KEY, TRN_TTO_PRS_VERBATIM.PRS_DATE, TRN_TTO_PRS_VERBATIM.AUTH_ID, TRN_TTO_PRS_VERBATIM.TAX_YEAR, TRN_TTO_PRS_VERBATIM.PRODUCT_ENGINE, TRN_TTO_PRS_VERBATIM.MATT_DATE, TRN_TTO_PRS_VERBATIM.BATCH_EVENT_ID, TRN_TTO_PRS_VERBATIM.AUDIT_INS_BY, TRN_TTO_PRS_VERBATIM.VERBATIM) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.SCREEN_QB /*+createtype(P)*/
(
 SCREEN_ID,
 APPLICATION_ASSIGNED_ID,
 CHANNEL,
 SOURCE_APPLICATION_CODE,
 SOURCE_APPLICATION_SECTION,
 SOURCE_APPLICATION_SECTION_CONTEXT,
 SOURCE_APPLICATION_GROUP,
 SOURCE_APPLICATION_GROUP_DETAIL,
 FUNNEL_SORT_RANK,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT SCREEN_QB.SCREEN_ID,
        SCREEN_QB.APPLICATION_ASSIGNED_ID,
        SCREEN_QB.CHANNEL,
        SCREEN_QB.SOURCE_APPLICATION_CODE,
        SCREEN_QB.SOURCE_APPLICATION_SECTION,
        SCREEN_QB.SOURCE_APPLICATION_SECTION_CONTEXT,
        SCREEN_QB.SOURCE_APPLICATION_GROUP,
        SCREEN_QB.SOURCE_APPLICATION_GROUP_DETAIL,
        SCREEN_QB.FUNNEL_SORT_RANK,
        SCREEN_QB.CREATED_TIMESTAMP,
        SCREEN_QB.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.SCREEN_QB
 ORDER BY SCREEN_QB.SCREEN_ID,
          SCREEN_QB.APPLICATION_ASSIGNED_ID,
          SCREEN_QB.CHANNEL,
          SCREEN_QB.SOURCE_APPLICATION_CODE,
          SCREEN_QB.SOURCE_APPLICATION_SECTION,
          SCREEN_QB.SOURCE_APPLICATION_SECTION_CONTEXT,
          SCREEN_QB.SOURCE_APPLICATION_GROUP,
          SCREEN_QB.SOURCE_APPLICATION_GROUP_DETAIL,
          SCREEN_QB.FUNNEL_SORT_RANK,
          SCREEN_QB.CREATED_TIMESTAMP,
          SCREEN_QB.UPDATED_TIMESTAMP
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_ESTORE_ORDER /*+createtype(P)*/
(
 ESTORE_ORDER_KEY,
 ORDER_NUMBER,
 SHOPPER_ID,
 AUTH_ID,
 TRANSACTED_ITEM,
 PRODUCT_ALIAS,
 CHANNEL,
 REGISTERED,
 PRIMARY_PRIORITY_CODE,
 HISTORICAL_PRIORITY_CODE,
 ITEM_AMOUNT,
 ORDER_DATE,
 PRIMARY_ID,
 SECONDARY_ID,
 TAX_YEAR,
 PRODUCT_STATE,
 ORDER_TYPE,
 PLATFORM,
 MACHINE_ID,
 PRODUCT,
 PRODUCT_ENGINE,
 PREP_TYPE,
 TAX_RETURN_INDEX,
 MATT_DATE,
 NP,
 TAX_RETURN_ID,
 UPGRADE_PATH,
 ITERATION,
 CAMPAIGN,
 BATCH_EVENT_ID,
 AUDIT_INS_TS,
 AUDIT_UPD_TS
)
AS
 SELECT TRN_ESTORE_ORDER.ESTORE_ORDER_KEY,
        TRN_ESTORE_ORDER.ORDER_NUMBER,
        TRN_ESTORE_ORDER.SHOPPER_ID,
        TRN_ESTORE_ORDER.AUTH_ID,
        TRN_ESTORE_ORDER.TRANSACTED_ITEM,
        TRN_ESTORE_ORDER.PRODUCT_ALIAS,
        TRN_ESTORE_ORDER.CHANNEL,
        TRN_ESTORE_ORDER.REGISTERED,
        TRN_ESTORE_ORDER.PRIMARY_PRIORITY_CODE,
        TRN_ESTORE_ORDER.HISTORICAL_PRIORITY_CODE,
        TRN_ESTORE_ORDER.ITEM_AMOUNT,
        TRN_ESTORE_ORDER.ORDER_DATE,
        TRN_ESTORE_ORDER.PRIMARY_ID,
        TRN_ESTORE_ORDER.SECONDARY_ID,
        TRN_ESTORE_ORDER.TAX_YEAR,
        TRN_ESTORE_ORDER.PRODUCT_STATE,
        TRN_ESTORE_ORDER.ORDER_TYPE,
        TRN_ESTORE_ORDER.PLATFORM,
        TRN_ESTORE_ORDER.MACHINE_ID,
        TRN_ESTORE_ORDER.PRODUCT,
        TRN_ESTORE_ORDER.PRODUCT_ENGINE,
        TRN_ESTORE_ORDER.PREP_TYPE,
        TRN_ESTORE_ORDER.TAX_RETURN_INDEX,
        TRN_ESTORE_ORDER.MATT_DATE,
        TRN_ESTORE_ORDER.NP,
        TRN_ESTORE_ORDER.TAX_RETURN_ID,
        TRN_ESTORE_ORDER.UPGRADE_PATH,
        TRN_ESTORE_ORDER.ITERATION,
        TRN_ESTORE_ORDER.CAMPAIGN,
        TRN_ESTORE_ORDER.BATCH_EVENT_ID,
        TRN_ESTORE_ORDER.AUDIT_INS_TS,
        TRN_ESTORE_ORDER.AUDIT_UPD_TS
 FROM CTG_ANALYTICS_SRC.TRN_ESTORE_ORDER
 ORDER BY TRN_ESTORE_ORDER.ORDER_NUMBER
SEGMENTED BY hash(TRN_ESTORE_ORDER.ESTORE_ORDER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_CUSTOMER /*+createtype(P)*/
(
 CUSTOMER_KEY,
 PRIMARY_ID,
 SECONDARY_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_CUSTOMER.CUSTOMER_KEY,
        DIM_CUSTOMER.PRIMARY_ID,
        DIM_CUSTOMER.SECONDARY_ID,
        DIM_CUSTOMER.BATCH_EVENT_ID,
        DIM_CUSTOMER.CREATED_TIMESTAMP,
        DIM_CUSTOMER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER
 ORDER BY DIM_CUSTOMER.CUSTOMER_KEY
SEGMENTED BY hash(DIM_CUSTOMER.CUSTOMER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS /*+createtype(P)*/
(
 TTO_ORDERS_KEY,
 CUSTOMER_KEY,
 AUTH_ID,
 ORDER_NUMBER,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY,
        LKP_CUSTOMER_TTO_ORDERS.CUSTOMER_KEY,
        LKP_CUSTOMER_TTO_ORDERS.AUTH_ID,
        LKP_CUSTOMER_TTO_ORDERS.ORDER_NUMBER,
        LKP_CUSTOMER_TTO_ORDERS.TAX_YEAR,
        LKP_CUSTOMER_TTO_ORDERS.BATCH_EVENT_ID,
        LKP_CUSTOMER_TTO_ORDERS.CREATED_TIMESTAMP,
        LKP_CUSTOMER_TTO_ORDERS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS
 ORDER BY LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY
SEGMENTED BY hash(LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER /*+createtype(P)*/
(
 CUSTOMER_EFS_RT_ORDER_ID,
 ORDER_NUMBER,
 ITEM_ALIAS_CODE,
 TAX_YEAR,
 CUSTOMER_KEY,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT LKP_CUSTOMER_EFS_RT_ORDER.CUSTOMER_EFS_RT_ORDER_ID,
        LKP_CUSTOMER_EFS_RT_ORDER.ORDER_NUMBER,
        LKP_CUSTOMER_EFS_RT_ORDER.ITEM_ALIAS_CODE,
        LKP_CUSTOMER_EFS_RT_ORDER.TAX_YEAR,
        LKP_CUSTOMER_EFS_RT_ORDER.CUSTOMER_KEY,
        LKP_CUSTOMER_EFS_RT_ORDER.BATCH_EVENT_ID,
        LKP_CUSTOMER_EFS_RT_ORDER.CREATED_TIMESTAMP,
        LKP_CUSTOMER_EFS_RT_ORDER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER
 ORDER BY LKP_CUSTOMER_EFS_RT_ORDER.ORDER_NUMBER,
          LKP_CUSTOMER_EFS_RT_ORDER.ITEM_ALIAS_CODE,
          LKP_CUSTOMER_EFS_RT_ORDER.TAX_YEAR
SEGMENTED BY hash(LKP_CUSTOMER_EFS_RT_ORDER.ORDER_NUMBER, LKP_CUSTOMER_EFS_RT_ORDER.ITEM_ALIAS_CODE, LKP_CUSTOMER_EFS_RT_ORDER.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_NON_RT_ORDER /*+createtype(P)*/
(
 CHANGE_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 TAX_YEAR,
 CUSTOMER_KEY,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT LKP_CUSTOMER_EFS_NON_RT_ORDER.CHANGE_ID,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.PRIMARY_ID,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.SECONDARY_ID,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.TAX_YEAR,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.CUSTOMER_KEY,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.BATCH_EVENT_ID,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.CREATED_TIMESTAMP,
        LKP_CUSTOMER_EFS_NON_RT_ORDER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_NON_RT_ORDER
 ORDER BY LKP_CUSTOMER_EFS_NON_RT_ORDER.CHANGE_ID
SEGMENTED BY hash(LKP_CUSTOMER_EFS_NON_RT_ORDER.CHANGE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_CUSTOMER_KEY /*+createtype(P)*/
(
 PRIMARY_ID,
 TAX_YEAR,
 SECONDARY_ID,
 CUSTOMER_KEY
)
AS
 SELECT LKP_CUSTOMER_KEY.PRIMARY_ID,
        LKP_CUSTOMER_KEY.TAX_YEAR,
        LKP_CUSTOMER_KEY.SECONDARY_ID,
        LKP_CUSTOMER_KEY.CUSTOMER_KEY
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_KEY
 ORDER BY LKP_CUSTOMER_KEY.PRIMARY_ID,
          LKP_CUSTOMER_KEY.TAX_YEAR
SEGMENTED BY hash(LKP_CUSTOMER_KEY.PRIMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT /*+createtype(P)*/
(
 UNLOCK_ORDER_EXTRACT_ID,
 CUSTOMER_KEY,
 AUTH_ID,
 ORDER_NUMBER,
 ORDER_TIMESTAMP,
 PRODUCT_VERSION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_UNLOCK_ORDER_EXTRACT.UNLOCK_ORDER_EXTRACT_ID,
        TRN_UNLOCK_ORDER_EXTRACT.CUSTOMER_KEY,
        TRN_UNLOCK_ORDER_EXTRACT.AUTH_ID,
        TRN_UNLOCK_ORDER_EXTRACT.ORDER_NUMBER,
        TRN_UNLOCK_ORDER_EXTRACT.ORDER_TIMESTAMP,
        TRN_UNLOCK_ORDER_EXTRACT.PRODUCT_VERSION,
        TRN_UNLOCK_ORDER_EXTRACT.BATCH_EVENT_ID,
        TRN_UNLOCK_ORDER_EXTRACT.CREATED_TIMESTAMP,
        TRN_UNLOCK_ORDER_EXTRACT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_UNLOCK_ORDER_EXTRACT
 ORDER BY TRN_UNLOCK_ORDER_EXTRACT.UNLOCK_ORDER_EXTRACT_ID
SEGMENTED BY hash(TRN_UNLOCK_ORDER_EXTRACT.CUSTOMER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL /*+createtype(P)*/
(
 TUNE_ACTUAL_INSTALLS_ID,
 SITE_ID,
 SITE_NAME,
 PUBLISHER_ID,
 PUBLISHER_NAME,
 SITE_EVENT_ID,
 SITE_EVENT_NAME,
 ADVERTISER_SUB_PUBLISHER_ID,
 ADVERTISER_SUB_PUBLISHER_NAME,
 ADVERTISER_SUB_SITE_ID,
 ADVERTISER_SUB_SITE_NAME,
 ADVERTISER_SUB_CAMPAIGN_ID,
 ADVERTISER_SUB_CAMPAIGN_NAME,
 ADVERTISER_SUB_ADGROUP_ID,
 ADVERTISER_SUB_ADGROUP_NAME,
 ADVERTISER_SUB_AD_ID,
 ADVERTISER_SUB_AD_NAME,
 ADVERTISER_SUB_KEYWORD_ID,
 ADVERTISER_SUB_KEYWORD_NAME,
 ADVERTISER_SUB_PLACEMENT_ID,
 ADVERTISER_SUB_PLACEMENT_NAME,
 PUBLISHER_SUB_CAMPAIGN_ID,
 PUBLISHER_SUB_CAMPAIGN_NAME,
 PUBLISHER_SUB_ADGROUP_ID,
 PUBLISHER_SUB_ADGROUP_NAME,
 PUBLISHER_SUB_AD_ID,
 PUBLISHER_SUB_AD_NAME,
 PUBLISHER_SUB_KEYWORD_ID,
 PUBLISHER_SUB_KEYWORD_NAME,
 PUBLISHER_SUB_PLACEMENT_ID,
 PUBLISHER_SUB_PLACEMENT_NAME,
 AD_CLICKS,
 INSTALLS,
 EVENTS,
 UPDATES,
 PUBLISHER_SUB_CAMPAIGN_REF,
 PUBLISHER_SUB_ADGROUP_REF,
 DEVICE_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_TUNE_ACTUAL_INSTALL.TUNE_ACTUAL_INSTALLS_ID,
        TRN_TUNE_ACTUAL_INSTALL.SITE_ID,
        TRN_TUNE_ACTUAL_INSTALL.SITE_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_NAME,
        TRN_TUNE_ACTUAL_INSTALL.SITE_EVENT_ID,
        TRN_TUNE_ACTUAL_INSTALL.SITE_EVENT_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_NAME,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_ID,
        TRN_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_NAME,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_ID,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_NAME,
        TRN_TUNE_ACTUAL_INSTALL.AD_CLICKS,
        TRN_TUNE_ACTUAL_INSTALL.INSTALLS,
        TRN_TUNE_ACTUAL_INSTALL.EVENTS,
        TRN_TUNE_ACTUAL_INSTALL.UPDATES,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_REF,
        TRN_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_REF,
        TRN_TUNE_ACTUAL_INSTALL.DEVICE_TYPE,
        TRN_TUNE_ACTUAL_INSTALL.BATCH_EVENT_ID,
        TRN_TUNE_ACTUAL_INSTALL.CREATED_TIMESTAMP,
        TRN_TUNE_ACTUAL_INSTALL.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_TUNE_ACTUAL_INSTALL
 ORDER BY TRN_TUNE_ACTUAL_INSTALL.TUNE_ACTUAL_INSTALLS_ID
SEGMENTED BY hash(TRN_TUNE_ACTUAL_INSTALL.TUNE_ACTUAL_INSTALLS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_PRS /*+createtype(P)*/
(
 PRS_ID,
 TAX_YEAR,
 PRS_TIMESTAMP,
 AUTH_ID,
 PRODUCT_ID,
 LOCATION,
 SCORE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_PRS.PRS_ID,
        TRN_PRS.TAX_YEAR,
        TRN_PRS.PRS_TIMESTAMP,
        TRN_PRS.AUTH_ID,
        TRN_PRS.PRODUCT_ID,
        TRN_PRS.LOCATION,
        TRN_PRS.SCORE,
        TRN_PRS.BATCH_EVENT_ID,
        TRN_PRS.CREATED_TIMESTAMP,
        TRN_PRS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_PRS
 ORDER BY TRN_PRS.AUTH_ID,
          TRN_PRS.PRS_TIMESTAMP
SEGMENTED BY hash(TRN_PRS.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM /*+createtype(P)*/
(
 PRS_VERBATIM_ID,
 PRS_VERBATIM_TIMESTAMP,
 AUTH_ID,
 TAX_YEAR,
 PRODUCT_ID,
 VERBATIM,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_PRS_VERBATIM.PRS_VERBATIM_ID,
        TRN_PRS_VERBATIM.PRS_VERBATIM_TIMESTAMP,
        TRN_PRS_VERBATIM.AUTH_ID,
        TRN_PRS_VERBATIM.TAX_YEAR,
        TRN_PRS_VERBATIM.PRODUCT_ID,
        TRN_PRS_VERBATIM.VERBATIM,
        TRN_PRS_VERBATIM.BATCH_EVENT_ID,
        TRN_PRS_VERBATIM.CREATED_TIMESTAMP,
        TRN_PRS_VERBATIM.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_PRS_VERBATIM
 ORDER BY TRN_PRS_VERBATIM.AUTH_ID,
          TRN_PRS_VERBATIM.PRS_VERBATIM_TIMESTAMP
SEGMENTED BY hash(TRN_PRS_VERBATIM.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TAXML /*+createtype(P)*/
(
 TAXML_ID,
 VERSION,
 FILING_ID,
 APPLICATION_ASSIGNED_TAXML_ENTITY_ID,
 REASON,
 PRIMARY_ID,
 SECONDARY_ID,
 AUTH_ID,
 RECEIVED_TIMESTAMP,
 ZIP,
 FILING_STATUS,
 TAXPAYER_AGE,
 SPOUSE_AGE,
 DEPENDENTS_MINIMUM_AGE,
 DEPENDENTS_AVERAGE_AGE,
 DEPENDENTS_MAXIMUM_AGE,
 TAXPAYER_OCCUPATION,
 SPOUSE_OCCUPATION,
 FED_FORM_TYPE,
 W2_COUNT,
 AGI,
 EXEMPTIONS_NUMBER,
 DEPENDENTS_COUNT,
 SALARIES_AND_WAGES,
 TAXABLE_INTEREST,
 TAX_EXEMPT_INTEREST,
 ORDINARY_DIVIDEND,
 QUALIFIED_DIVIDEND,
 TAXABLE_OFFSET,
 ALIMONY_INCOME,
 BUSINESS_INCOME,
 OTHER_GAIN,
 FARM_INCOME,
 CAPITAL_GAIN,
 IRA_DISTRIBUTION,
 TAXABLE_IRA,
 PENSION,
 TAXABLE_PENSION,
 SCHEDULE_E_INCOME,
 HOUSEHOLD_EMPLOYEE_TAX,
 UNEMPLOYMENT_INCOME,
 SOCIAL_SECURITY_INCOME,
 TAXABLE_SOCIAL_SECURITY_INCOME,
 OTHER_INCOME,
 TOTAL_INCOME,
 SELF_EMPLOYMENT_TAX,
 SELF_EMPLOYMENT_RETIREMENT,
 TOTAL_DEDUCTIONS,
 ITEMIZED_DEDUCTIONS_FLAG,
 IRA_DEDUCTION,
 STUDENT_LOAN_INTEREST,
 STATE_OR_LOCAL_TAX,
 STATE_OR_LOCAL_SALES_TAX,
 REAL_ESTATE_TAX,
 TAXES_PAID_AMOUNT,
 MEDICAL_OR_DENTAL_EXPENSES,
 MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION,
 PERSONAL_PROPERTY_TAX,
 OTHER_DEDUCTIBLE_TAX,
 MORTGAGE_INTEREST,
 MORTGAGE_INTEREST_NON_1098,
 MORTGAGE_POINTS_NON_1098,
 MORTGAGE_INSURANCE,
 INVESTMENT_INTEREST_PAID,
 TOTAL_INTEREST_PAID,
 CHARITABLE_CONTRIBUTIONS_CASH,
 CHARITABLE_CONTRIBUTIONS_NONCASH,
 CHARITABLE_CONTRIBUTIONS_CARRYOVER,
 CHARITABLE_CONTRIBUTIONS,
 CASUALTY_LOSSES,
 EMPLOYEE_EXPENSES,
 TAX_PREP_FEES,
 OTHER_DEDUCTIBLE_EXPENSES,
 TOTAL_DEDUCTIBLE_EXPENSES,
 EXPENSES_DEDUCTION,
 MISCELLANEOUS_DEDUCTIONS,
 ITEMIZE_ANYWAY_FLAG,
 TAXABLE_INCOME,
 SCHEDULE_C_COUNT,
 BUSINESS_ACCOUNTING_METHOD_CASH_COUNT,
 BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT,
 BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT,
 BUSINESS_MATERIAL_PARTICIPATION_COUNT,
 BUSINESS_START_ACQUIRE_COUNT,
 BUSINESS_1099_REQUIRED_COUNT,
 BUSINESS_WILL_FILE_1099_COUNT,
 BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT,
 BUSINESS_GROSS_RECEIPTS_AMOUNT,
 BUSINESS_RETURNS_AMOUNT,
 BUSINESS_COST_OF_GOODS,
 BUSINESS_GROSS_PROFIT,
 BUSINESS_OTHER_INCOME,
 BUSINESS_GROSS_INCOME,
 BUSINESS_ADVERTISING_EXPENSE,
 BUSINESS_CAR_EXPENSE,
 BUSINESS_COMMISSIONS_PAID,
 BUSINESS_CONTRACT_LABOR_EXPENSE,
 BUSINESS_DEPLETION_EXPENSE,
 BUSINESS_DEPRECIATION,
 BUSINESS_EMPLOYEE_BENEFITS_PAID,
 BUSINESS_INSURANCE_PAID,
 BUSINESS_MORTGAGE_INTEREST_PAID,
 BUSINESS_OTHER_INTEREST_PAID,
 BUSINESS_LEGAL_EXPENSE,
 BUSINESS_OFFICE_EXPENSE,
 BUSINESS_PENSION_EXPENSE,
 BUSINESS_RENTAL_VEHICLES_EXPENSE,
 BUSINESS_RENTAL_OTHER_EXPENSE,
 BUSINESS_REPAIRS_EXPENSE,
 BUSINESS_SUPPLIES_EXPENSE,
 BUSINESS_TAXES_PAID,
 BUSINESS_TRAVEL_EXPENSE,
 BUSINESS_MEALS_EXPENSE,
 BUSINESS_UTILITIES_EXPENSE,
 BUSINESS_WAGES_PAID,
 BUSINESS_OTHER_EXPENSE,
 BUSINESS_TOTAL_EXPENSE,
 BUSINESS_TENTATIVE_PROFIT,
 BUSINESS_USE_OF_HOME_EXPENSES,
 BUSINESS_NET_PROFIT,
 BUSINESS_INVESTMENT_AT_RISK_TOTAL,
 BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT,
 BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT,
 BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT,
 BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT,
 BUSINESS_COST_OF_GOODS_PURCHASES,
 BUSINESS_COST_OF_GOODS_LABOR,
 BUSINESS_COST_OF_GOODS_SUPPLIES,
 BUSINESS_COST_OF_GOODS_OTHER_COST,
 BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT,
 BUSINESS_COST_OF_GOODS_TOTAL_SOLD,
 BUSINESS_VEHICLE_MILES_BUSINESS,
 BUSINESS_VEHICLE_MILES_COMMUTE,
 BUSINESS_VEHICLE_MILES_OTHER,
 BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT,
 BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT,
 BUSINESS_VEHICLES_EVIDENCE_COUNT,
 BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT,
 SCHEDULE_E_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS,
 SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS,
 SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID,
 SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID,
 SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE,
 SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME,
 SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION,
 SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME,
 SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME,
 SUPPLEMENTAL_ESTATE_PASSIVE_LOSS,
 SUPPLEMENTAL_ESTATE_PASSIVE_INCOME,
 SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS,
 SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME,
 SUPPLEMENTAL_ESTATE_TOTAL_INCOME,
 SUPPLEMENTAL_REMIC_EXCESS_INCLUSION,
 SUPPLEMENTAL_REMIC_TAXABLE_INCOME,
 SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME,
 SUPPLEMENTAL_FARM_RENTAL_INCOME,
 SUPPLEMENTAL_FARM_GROSS_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME,
 DISABLED_CREDIT,
 TAX_CREDITS,
 RESIDENTIAL_ENERGY_CREDIT,
 CHILD_CREDIT,
 EDUCATION_CREDIT,
 TUITION,
 EDUCATOR_EXPENSES,
 CERTAIN_BUSINESS_EXPENSE,
 HSA,
 MOVING_EXPENSE,
 DEDUCTIBLE_SELF_EMPLOYMENT_TAX,
 SELF_EMPLOYMENT_HEALTH_INSURANCE,
 EARLY_WITHDRAWAL_PENALTY,
 ALIMONY_PAID,
 DOMESTIC_PRODUCTION_DEDUCTION,
 ADJUSTMENTS,
 OLD_OR_BLIND_COUNT,
 ITEMIZE_SEPARATELY_FLAG,
 EXEMPTION_AMOUNT,
 TAX_LIABILITY,
 CHILD_CARE_CREDIT,
 ADDITIONAL_CHILD_CARE_CREDIT,
 RETIREMENT_SAVINGS_CREDIT,
 HOPE_CREDIT,
 EARNED_INCOME_TAX_CREDIT,
 ALTERNATIVE_MINIMUM_TAX,
 FOREIGN_TAX_CREDIT,
 OTHER_CREDITS,
 TOTAL_CREDITS,
 UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX,
 RETIRMENT_ADDITIONAL_TAX,
 HOMEBUYER_CREDIT_REPAYMENT,
 OTHER_TAXES,
 INCOME_TAX_WITHHELD,
 ESTIMATED_TAX,
 NON_TAXABLE_COMBAT_PAY,
 PAYMENT_WITH_EXTENSION,
 EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD,
 FUEL_TAX_CREDIT,
 OTHER_PAYMENTS,
 TOTAL_PAYMENTS,
 ESTIMATED_TAX_PENALTY,
 INCOME_TAX,
 TOTAL_TAX,
 TAX_DUE,
 REFUND,
 ACA_TAX_CREDIT_REPAYMENT,
 ACA_FULL_YEAR_COVERAGE,
 ACA_PENALTY,
 TAXPAYER_PHONE_AREA_CODE,
 TAXPAYER_PHONE_ID,
 SPOUSE_PHONE_AREA_CODE,
 SPOUSE_PHONE_ID,
 W2_OWNER_LIST,
 W2_EIN_LIST,
 W2_EMPLOYER_LIST,
 W2_EMPLOYER_ZIP_LIST,
 W2_WAGES_TOTAL,
 W2_FED_WITHHELD_TOTAL,
 W2_SOCIAL_SECURITY_WAGES_TOTAL,
 W2_SOCIAL_SECURITY_WITHHELD_TOTAL,
 W2_MEDICARE_WAGES_TOTAL,
 W2_MEDICARE_WITHHELD_TOTAL,
 W2_SOCIAL_SECURITY_TIPS_TOTAL,
 W2_ALLOCATED_TIPS_TOTAL,
 W2_STATES_COUNT_LIST,
 W2_LOCALITY_COUNT_LIST,
 W2_STATE_WAGES_TOTAL,
 W2_STATE_TAX_TOTAL,
 W2_LOCAL_WAGES_TOTAL,
 W2_LOCAL_TAX_TOTAL,
 RAW_W2_WAGES,
 RAW_W2_FED_WITHHELD,
 RAW_W2_SOCIAL_SECURITY_WAGES,
 RAW_W2_SOCIAL_SECURITY_WITHHELD,
 RAW_W2_MEDICARE_WAGES,
 RAW_W2_MEDICARE_WITHHELD,
 RAW_W2_SOCIAL_SECURITY_TIPS,
 RAW_W2_ALLOCATED_TIPS,
 RAW_W2_STATE_WAGES,
 RAW_W2_STATE_TAX,
 RAW_W2_LOCAL_WAGES,
 RAW_W2_LOCAL_TAX,
 STATES_COUNT,
 RAW_STATES,
 TAXPAYER_MILITARY_FLAG,
 SPOUSE_MILITARY_FLAG,
 IDENTITY_THEFT_PIN_FLAG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 RESIDENT_STATE_RETURNS_COUNT
)
AS
 SELECT TRN_TAXML.TAXML_ID,
        TRN_TAXML.VERSION,
        TRN_TAXML.FILING_ID,
        TRN_TAXML.APPLICATION_ASSIGNED_TAXML_ENTITY_ID,
        TRN_TAXML.REASON,
        TRN_TAXML.PRIMARY_ID,
        TRN_TAXML.SECONDARY_ID,
        TRN_TAXML.AUTH_ID,
        TRN_TAXML.RECEIVED_TIMESTAMP,
        TRN_TAXML.ZIP,
        TRN_TAXML.FILING_STATUS,
        TRN_TAXML.TAXPAYER_AGE,
        TRN_TAXML.SPOUSE_AGE,
        TRN_TAXML.DEPENDENTS_MINIMUM_AGE,
        TRN_TAXML.DEPENDENTS_AVERAGE_AGE,
        TRN_TAXML.DEPENDENTS_MAXIMUM_AGE,
        TRN_TAXML.TAXPAYER_OCCUPATION,
        TRN_TAXML.SPOUSE_OCCUPATION,
        TRN_TAXML.FED_FORM_TYPE,
        TRN_TAXML.W2_COUNT,
        TRN_TAXML.AGI,
        TRN_TAXML.EXEMPTIONS_NUMBER,
        TRN_TAXML.DEPENDENTS_COUNT,
        TRN_TAXML.SALARIES_AND_WAGES,
        TRN_TAXML.TAXABLE_INTEREST,
        TRN_TAXML.TAX_EXEMPT_INTEREST,
        TRN_TAXML.ORDINARY_DIVIDEND,
        TRN_TAXML.QUALIFIED_DIVIDEND,
        TRN_TAXML.TAXABLE_OFFSET,
        TRN_TAXML.ALIMONY_INCOME,
        TRN_TAXML.BUSINESS_INCOME,
        TRN_TAXML.OTHER_GAIN,
        TRN_TAXML.FARM_INCOME,
        TRN_TAXML.CAPITAL_GAIN,
        TRN_TAXML.IRA_DISTRIBUTION,
        TRN_TAXML.TAXABLE_IRA,
        TRN_TAXML.PENSION,
        TRN_TAXML.TAXABLE_PENSION,
        TRN_TAXML.SCHEDULE_E_INCOME,
        TRN_TAXML.HOUSEHOLD_EMPLOYEE_TAX,
        TRN_TAXML.UNEMPLOYMENT_INCOME,
        TRN_TAXML.SOCIAL_SECURITY_INCOME,
        TRN_TAXML.TAXABLE_SOCIAL_SECURITY_INCOME,
        TRN_TAXML.OTHER_INCOME,
        TRN_TAXML.TOTAL_INCOME,
        TRN_TAXML.SELF_EMPLOYMENT_TAX,
        TRN_TAXML.SELF_EMPLOYMENT_RETIREMENT,
        TRN_TAXML.TOTAL_DEDUCTIONS,
        TRN_TAXML.ITEMIZED_DEDUCTIONS_FLAG,
        TRN_TAXML.IRA_DEDUCTION,
        TRN_TAXML.STUDENT_LOAN_INTEREST,
        TRN_TAXML.STATE_OR_LOCAL_TAX,
        TRN_TAXML.STATE_OR_LOCAL_SALES_TAX,
        TRN_TAXML.REAL_ESTATE_TAX,
        TRN_TAXML.TAXES_PAID_AMOUNT,
        TRN_TAXML.MEDICAL_OR_DENTAL_EXPENSES,
        TRN_TAXML.MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION,
        TRN_TAXML.PERSONAL_PROPERTY_TAX,
        TRN_TAXML.OTHER_DEDUCTIBLE_TAX,
        TRN_TAXML.MORTGAGE_INTEREST,
        TRN_TAXML.MORTGAGE_INTEREST_NON_1098,
        TRN_TAXML.MORTGAGE_POINTS_NON_1098,
        TRN_TAXML.MORTGAGE_INSURANCE,
        TRN_TAXML.INVESTMENT_INTEREST_PAID,
        TRN_TAXML.TOTAL_INTEREST_PAID,
        TRN_TAXML.CHARITABLE_CONTRIBUTIONS_CASH,
        TRN_TAXML.CHARITABLE_CONTRIBUTIONS_NONCASH,
        TRN_TAXML.CHARITABLE_CONTRIBUTIONS_CARRYOVER,
        TRN_TAXML.CHARITABLE_CONTRIBUTIONS,
        TRN_TAXML.CASUALTY_LOSSES,
        TRN_TAXML.EMPLOYEE_EXPENSES,
        TRN_TAXML.TAX_PREP_FEES,
        TRN_TAXML.OTHER_DEDUCTIBLE_EXPENSES,
        TRN_TAXML.TOTAL_DEDUCTIBLE_EXPENSES,
        TRN_TAXML.EXPENSES_DEDUCTION,
        TRN_TAXML.MISCELLANEOUS_DEDUCTIONS,
        TRN_TAXML.ITEMIZE_ANYWAY_FLAG,
        TRN_TAXML.TAXABLE_INCOME,
        TRN_TAXML.SCHEDULE_C_COUNT,
        TRN_TAXML.BUSINESS_ACCOUNTING_METHOD_CASH_COUNT,
        TRN_TAXML.BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT,
        TRN_TAXML.BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT,
        TRN_TAXML.BUSINESS_MATERIAL_PARTICIPATION_COUNT,
        TRN_TAXML.BUSINESS_START_ACQUIRE_COUNT,
        TRN_TAXML.BUSINESS_1099_REQUIRED_COUNT,
        TRN_TAXML.BUSINESS_WILL_FILE_1099_COUNT,
        TRN_TAXML.BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT,
        TRN_TAXML.BUSINESS_GROSS_RECEIPTS_AMOUNT,
        TRN_TAXML.BUSINESS_RETURNS_AMOUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS,
        TRN_TAXML.BUSINESS_GROSS_PROFIT,
        TRN_TAXML.BUSINESS_OTHER_INCOME,
        TRN_TAXML.BUSINESS_GROSS_INCOME,
        TRN_TAXML.BUSINESS_ADVERTISING_EXPENSE,
        TRN_TAXML.BUSINESS_CAR_EXPENSE,
        TRN_TAXML.BUSINESS_COMMISSIONS_PAID,
        TRN_TAXML.BUSINESS_CONTRACT_LABOR_EXPENSE,
        TRN_TAXML.BUSINESS_DEPLETION_EXPENSE,
        TRN_TAXML.BUSINESS_DEPRECIATION,
        TRN_TAXML.BUSINESS_EMPLOYEE_BENEFITS_PAID,
        TRN_TAXML.BUSINESS_INSURANCE_PAID,
        TRN_TAXML.BUSINESS_MORTGAGE_INTEREST_PAID,
        TRN_TAXML.BUSINESS_OTHER_INTEREST_PAID,
        TRN_TAXML.BUSINESS_LEGAL_EXPENSE,
        TRN_TAXML.BUSINESS_OFFICE_EXPENSE,
        TRN_TAXML.BUSINESS_PENSION_EXPENSE,
        TRN_TAXML.BUSINESS_RENTAL_VEHICLES_EXPENSE,
        TRN_TAXML.BUSINESS_RENTAL_OTHER_EXPENSE,
        TRN_TAXML.BUSINESS_REPAIRS_EXPENSE,
        TRN_TAXML.BUSINESS_SUPPLIES_EXPENSE,
        TRN_TAXML.BUSINESS_TAXES_PAID,
        TRN_TAXML.BUSINESS_TRAVEL_EXPENSE,
        TRN_TAXML.BUSINESS_MEALS_EXPENSE,
        TRN_TAXML.BUSINESS_UTILITIES_EXPENSE,
        TRN_TAXML.BUSINESS_WAGES_PAID,
        TRN_TAXML.BUSINESS_OTHER_EXPENSE,
        TRN_TAXML.BUSINESS_TOTAL_EXPENSE,
        TRN_TAXML.BUSINESS_TENTATIVE_PROFIT,
        TRN_TAXML.BUSINESS_USE_OF_HOME_EXPENSES,
        TRN_TAXML.BUSINESS_NET_PROFIT,
        TRN_TAXML.BUSINESS_INVESTMENT_AT_RISK_TOTAL,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_PURCHASES,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_LABOR,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_SUPPLIES,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_OTHER_COST,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT,
        TRN_TAXML.BUSINESS_COST_OF_GOODS_TOTAL_SOLD,
        TRN_TAXML.BUSINESS_VEHICLE_MILES_BUSINESS,
        TRN_TAXML.BUSINESS_VEHICLE_MILES_COMMUTE,
        TRN_TAXML.BUSINESS_VEHICLE_MILES_OTHER,
        TRN_TAXML.BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT,
        TRN_TAXML.BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT,
        TRN_TAXML.BUSINESS_VEHICLES_EVIDENCE_COUNT,
        TRN_TAXML.BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT,
        TRN_TAXML.SCHEDULE_E_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME,
        TRN_TAXML.SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME,
        TRN_TAXML.SUPPLEMENTAL_ESTATE_PASSIVE_LOSS,
        TRN_TAXML.SUPPLEMENTAL_ESTATE_PASSIVE_INCOME,
        TRN_TAXML.SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS,
        TRN_TAXML.SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME,
        TRN_TAXML.SUPPLEMENTAL_ESTATE_TOTAL_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REMIC_EXCESS_INCLUSION,
        TRN_TAXML.SUPPLEMENTAL_REMIC_TAXABLE_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME,
        TRN_TAXML.SUPPLEMENTAL_FARM_RENTAL_INCOME,
        TRN_TAXML.SUPPLEMENTAL_FARM_GROSS_INCOME,
        TRN_TAXML.SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME,
        TRN_TAXML.DISABLED_CREDIT,
        TRN_TAXML.TAX_CREDITS,
        TRN_TAXML.RESIDENTIAL_ENERGY_CREDIT,
        TRN_TAXML.CHILD_CREDIT,
        TRN_TAXML.EDUCATION_CREDIT,
        TRN_TAXML.TUITION,
        TRN_TAXML.EDUCATOR_EXPENSES,
        TRN_TAXML.CERTAIN_BUSINESS_EXPENSE,
        TRN_TAXML.HSA,
        TRN_TAXML.MOVING_EXPENSE,
        TRN_TAXML.DEDUCTIBLE_SELF_EMPLOYMENT_TAX,
        TRN_TAXML.SELF_EMPLOYMENT_HEALTH_INSURANCE,
        TRN_TAXML.EARLY_WITHDRAWAL_PENALTY,
        TRN_TAXML.ALIMONY_PAID,
        TRN_TAXML.DOMESTIC_PRODUCTION_DEDUCTION,
        TRN_TAXML.ADJUSTMENTS,
        TRN_TAXML.OLD_OR_BLIND_COUNT,
        TRN_TAXML.ITEMIZE_SEPARATELY_FLAG,
        TRN_TAXML.EXEMPTION_AMOUNT,
        TRN_TAXML.TAX_LIABILITY,
        TRN_TAXML.CHILD_CARE_CREDIT,
        TRN_TAXML.ADDITIONAL_CHILD_CARE_CREDIT,
        TRN_TAXML.RETIREMENT_SAVINGS_CREDIT,
        TRN_TAXML.HOPE_CREDIT,
        TRN_TAXML.EARNED_INCOME_TAX_CREDIT,
        TRN_TAXML.ALTERNATIVE_MINIMUM_TAX,
        TRN_TAXML.FOREIGN_TAX_CREDIT,
        TRN_TAXML.OTHER_CREDITS,
        TRN_TAXML.TOTAL_CREDITS,
        TRN_TAXML.UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX,
        TRN_TAXML.RETIRMENT_ADDITIONAL_TAX,
        TRN_TAXML.HOMEBUYER_CREDIT_REPAYMENT,
        TRN_TAXML.OTHER_TAXES,
        TRN_TAXML.INCOME_TAX_WITHHELD,
        TRN_TAXML.ESTIMATED_TAX,
        TRN_TAXML.NON_TAXABLE_COMBAT_PAY,
        TRN_TAXML.PAYMENT_WITH_EXTENSION,
        TRN_TAXML.EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD,
        TRN_TAXML.FUEL_TAX_CREDIT,
        TRN_TAXML.OTHER_PAYMENTS,
        TRN_TAXML.TOTAL_PAYMENTS,
        TRN_TAXML.ESTIMATED_TAX_PENALTY,
        TRN_TAXML.INCOME_TAX,
        TRN_TAXML.TOTAL_TAX,
        TRN_TAXML.TAX_DUE,
        TRN_TAXML.REFUND,
        TRN_TAXML.ACA_TAX_CREDIT_REPAYMENT,
        TRN_TAXML.ACA_FULL_YEAR_COVERAGE,
        TRN_TAXML.ACA_PENALTY,
        TRN_TAXML.TAXPAYER_PHONE_AREA_CODE,
        TRN_TAXML.TAXPAYER_PHONE_ID,
        TRN_TAXML.SPOUSE_PHONE_AREA_CODE,
        TRN_TAXML.SPOUSE_PHONE_ID,
        TRN_TAXML.W2_OWNER_LIST,
        TRN_TAXML.W2_EIN_LIST,
        TRN_TAXML.W2_EMPLOYER_LIST,
        TRN_TAXML.W2_EMPLOYER_ZIP_LIST,
        TRN_TAXML.W2_WAGES_TOTAL,
        TRN_TAXML.W2_FED_WITHHELD_TOTAL,
        TRN_TAXML.W2_SOCIAL_SECURITY_WAGES_TOTAL,
        TRN_TAXML.W2_SOCIAL_SECURITY_WITHHELD_TOTAL,
        TRN_TAXML.W2_MEDICARE_WAGES_TOTAL,
        TRN_TAXML.W2_MEDICARE_WITHHELD_TOTAL,
        TRN_TAXML.W2_SOCIAL_SECURITY_TIPS_TOTAL,
        TRN_TAXML.W2_ALLOCATED_TIPS_TOTAL,
        TRN_TAXML.W2_STATES_COUNT_LIST,
        TRN_TAXML.W2_LOCALITY_COUNT_LIST,
        TRN_TAXML.W2_STATE_WAGES_TOTAL,
        TRN_TAXML.W2_STATE_TAX_TOTAL,
        TRN_TAXML.W2_LOCAL_WAGES_TOTAL,
        TRN_TAXML.W2_LOCAL_TAX_TOTAL,
        TRN_TAXML.RAW_W2_WAGES,
        TRN_TAXML.RAW_W2_FED_WITHHELD,
        TRN_TAXML.RAW_W2_SOCIAL_SECURITY_WAGES,
        TRN_TAXML.RAW_W2_SOCIAL_SECURITY_WITHHELD,
        TRN_TAXML.RAW_W2_MEDICARE_WAGES,
        TRN_TAXML.RAW_W2_MEDICARE_WITHHELD,
        TRN_TAXML.RAW_W2_SOCIAL_SECURITY_TIPS,
        TRN_TAXML.RAW_W2_ALLOCATED_TIPS,
        TRN_TAXML.RAW_W2_STATE_WAGES,
        TRN_TAXML.RAW_W2_STATE_TAX,
        TRN_TAXML.RAW_W2_LOCAL_WAGES,
        TRN_TAXML.RAW_W2_LOCAL_TAX,
        TRN_TAXML.STATES_COUNT,
        TRN_TAXML.RAW_STATES,
        TRN_TAXML.TAXPAYER_MILITARY_FLAG,
        TRN_TAXML.SPOUSE_MILITARY_FLAG,
        TRN_TAXML.IDENTITY_THEFT_PIN_FLAG,
        TRN_TAXML.BATCH_EVENT_ID,
        TRN_TAXML.CREATED_TIMESTAMP,
        TRN_TAXML.UPDATED_TIMESTAMP,
        TRN_TAXML.RESIDENT_STATE_RETURNS_COUNT
 FROM CTG_ANALYTICS_SRC.TRN_TAXML
 ORDER BY TRN_TAXML.TAXML_ID
SEGMENTED BY hash(TRN_TAXML.TAXML_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE /*+createtype(P)*/
(
 OCR_PERFORMANCE_ID,
 REQUEST_UUID,
 OCR_PERFORMANCE_TIMESTAMP,
 TRANSACTION_ID,
 AUTH_ID,
 CLIENT_APPLICATION_ID,
 FORM_TYPE,
 IMPORT_METHOD,
 MASHUP_RESULT,
 TEST_FLAG,
 OCR_SUCCEEDED,
 OCR_RESPONSE_CODE,
 OCR_PROCESSING_TIME_MILLISECONDS,
 MEF_STORAGE_SUCCEEDED,
 MEF_STORAGE_RESPONSE_CODE,
 MEF_STORAGE_PROCESSING_TIME_MILLISECONDS,
 META_DATA_STORAGE_SUCCEEDED,
 META_DATA_STORAGE_RESPONSE_CODE,
 META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS,
 EMPLOYER_PROVINCE_OR_STATE_MATCH,
 EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
 EMPLOYER_POSTAL_CODE_MATCH,
 EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE,
 EMPLOYER_NAME_LINE1_MATCH,
 EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE,
 EMPLOYER_EIN_MATCH,
 EMPLOYER_EIN_MATCH_CONFIDENCE,
 EMPLOYER_CITY_MATCH,
 EMPLOYER_CITY_MATCH_CONFIDENCE,
 EMPLOYER_ADDRESS_LINE1_MATCH,
 EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE,
 EMPLOYEE_SSN_MATCH,
 EMPLOYEE_SSN_MATCH_CONFIDENCE,
 EMPLOYEE_NAME_MATCH,
 EMPLOYEE_NAME_MATCH_CONFIDENCE,
 EMPLOYEE_PROVINCE_OR_STATE_MATCH,
 EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
 EMPLOYEE_POSTAL_CODE_MATCH,
 EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE,
 EMPLOYEE_CITY_MATCH,
 EMPLOYEE_CITY_MATCH_CONFIDENCE,
 EMPLOYEE_ADDRESS_MATCH,
 EMPLOYEE_ADDRESS_MATCH_CONFIDENCE,
 ALLOCATED_TIPS_MATCH,
 ALLOCATED_TIPS_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_TIPS_MATCH,
 SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE,
 MEDICARE_TAX_WITHHELD_MATCH,
 MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE,
 MEDICARE_WAGES_AND_TIPS_MATCH,
 MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_TAX_MATCH,
 SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_WAGES_MATCH,
 SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE,
 WITHHOLDING_MATCH,
 WITHHOLDING_MATCH_CONFIDENCE,
 LOCALITY_NAMES_MATCH,
 LOCALITY_NAMES_MATCH_CONFIDENCE,
 WAGES_MATCH,
 WAGES_MATCH_CONFIDENCE,
 LOCAL_WITHHOLDING_MATCH,
 LOCAL_WITHHOLDING_MATCH_CONFIDENCE,
 LOCAL_WAGE_MATCH,
 LOCAL_WAGE_MATCH_CONFIDENCE,
 STATE_WITHHOLDING_MATCH,
 STATE_WITHHOLDING_MATCH_CONFIDENCE,
 STATE_WAGE_MATCH,
 STATE_WAGE_MATCH_CONFIDENCE,
 STATES_MATCH,
 STATES_MATCH_CONFIDENCE,
 STATE_IDS_MATCH,
 STATE_IDS_MATCH_CONFIDENCE,
 BOX_FOURTEEN_CODES_MATCH,
 BOX_FOURTEEN_CODES_MATCH_CONFIDENCE,
 BOX_FOURTEEN_DESCRIPTIONS_MATCH,
 BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE,
 BOX_FOURTEEN_AMOUNTS_MATCH,
 BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE,
 RETIREMENT_MATCH,
 RETIREMENT_MATCH_CONFIDENCE,
 SICK_PAY_MATCH,
 SICK_PAY_MATCH_CONFIDENCE,
 STATUTORY_EMPLOYEE_MATCH,
 STATUTORY_EMPLOYEE_MATCH_CONFIDENCE,
 BOX_TWELVE_D_CODES_MATCH,
 BOX_TWELVE_D_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_D_AMOUNTS_MATCH,
 BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_C_CODES_MATCH,
 BOX_TWELVE_C_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_C_AMOUNTS_MATCH,
 BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_B_CODES_MATCH,
 BOX_TWELVE_B_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_B_AMOUNTS_MATCH,
 BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_A_CODES_MATCH,
 BOX_TWELVE_A_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_A_AMOUNTS_MATCH,
 BOX_TWELVE_A_AMOUNTS_CONFIDENCE,
 NONQUALIFIED_PLANS_MATCH,
 NONQUALIFIED_PLANS_MATCH_CONFIDENCE,
 DEPENDENT_CARE_BENEFITS_MATCH,
 DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_OCR_PERFORMANCE.OCR_PERFORMANCE_ID,
        TRN_OCR_PERFORMANCE.REQUEST_UUID,
        TRN_OCR_PERFORMANCE.OCR_PERFORMANCE_TIMESTAMP,
        TRN_OCR_PERFORMANCE.TRANSACTION_ID,
        TRN_OCR_PERFORMANCE.AUTH_ID,
        TRN_OCR_PERFORMANCE.CLIENT_APPLICATION_ID,
        TRN_OCR_PERFORMANCE.FORM_TYPE,
        TRN_OCR_PERFORMANCE.IMPORT_METHOD,
        TRN_OCR_PERFORMANCE.MASHUP_RESULT,
        TRN_OCR_PERFORMANCE.TEST_FLAG,
        TRN_OCR_PERFORMANCE.OCR_SUCCEEDED,
        TRN_OCR_PERFORMANCE.OCR_RESPONSE_CODE,
        TRN_OCR_PERFORMANCE.OCR_PROCESSING_TIME_MILLISECONDS,
        TRN_OCR_PERFORMANCE.MEF_STORAGE_SUCCEEDED,
        TRN_OCR_PERFORMANCE.MEF_STORAGE_RESPONSE_CODE,
        TRN_OCR_PERFORMANCE.MEF_STORAGE_PROCESSING_TIME_MILLISECONDS,
        TRN_OCR_PERFORMANCE.META_DATA_STORAGE_SUCCEEDED,
        TRN_OCR_PERFORMANCE.META_DATA_STORAGE_RESPONSE_CODE,
        TRN_OCR_PERFORMANCE.META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS,
        TRN_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH,
        TRN_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH,
        TRN_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH,
        TRN_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH,
        TRN_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH,
        TRN_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.WITHHOLDING_MATCH,
        TRN_OCR_PERFORMANCE.WITHHOLDING_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH,
        TRN_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.WAGES_MATCH,
        TRN_OCR_PERFORMANCE.WAGES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH,
        TRN_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.LOCAL_WAGE_MATCH,
        TRN_OCR_PERFORMANCE.LOCAL_WAGE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH,
        TRN_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.STATE_WAGE_MATCH,
        TRN_OCR_PERFORMANCE.STATE_WAGE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.STATES_MATCH,
        TRN_OCR_PERFORMANCE.STATES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.STATE_IDS_MATCH,
        TRN_OCR_PERFORMANCE.STATE_IDS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.RETIREMENT_MATCH,
        TRN_OCR_PERFORMANCE.RETIREMENT_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.SICK_PAY_MATCH,
        TRN_OCR_PERFORMANCE.SICK_PAY_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH,
        TRN_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_MATCH,
        TRN_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_CONFIDENCE,
        TRN_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH,
        TRN_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH,
        TRN_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE,
        TRN_OCR_PERFORMANCE.BATCH_EVENT_ID,
        TRN_OCR_PERFORMANCE.CREATED_TIMESTAMP,
        TRN_OCR_PERFORMANCE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_OCR_PERFORMANCE
 ORDER BY TRN_OCR_PERFORMANCE.OCR_PERFORMANCE_ID
SEGMENTED BY hash(TRN_OCR_PERFORMANCE.OCR_PERFORMANCE_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_ACCEPTED_REFUND /*+createtype(P)*/
(
 FILING_ID,
 TAX_YEAR,
 SEQUENCE_NUMBER,
 PRIMARY_ID,
 SECONDARY_ID,
 AMOUNT,
 BANK_RTN,
 FILING_TYPE,
 PAYMENT_METHOD,
 APPLICATION,
 ENGINE_CODE,
 ACCEPTED_TIMESTAMP,
 CREDIT_FOR_SALE_PRIORITY_CODE,
 BANK_PRODUCT,
 ACCEPTED_TAX_DATE_ID,
 AUTH_ID
)
AS
 SELECT STG_ACCEPTED_REFUND.FILING_ID,
        STG_ACCEPTED_REFUND.TAX_YEAR,
        STG_ACCEPTED_REFUND.SEQUENCE_NUMBER,
        STG_ACCEPTED_REFUND.PRIMARY_ID,
        STG_ACCEPTED_REFUND.SECONDARY_ID,
        STG_ACCEPTED_REFUND.AMOUNT,
        STG_ACCEPTED_REFUND.BANK_RTN,
        STG_ACCEPTED_REFUND.FILING_TYPE,
        STG_ACCEPTED_REFUND.PAYMENT_METHOD,
        STG_ACCEPTED_REFUND.APPLICATION,
        STG_ACCEPTED_REFUND.ENGINE_CODE,
        STG_ACCEPTED_REFUND.ACCEPTED_TIMESTAMP,
        STG_ACCEPTED_REFUND.CREDIT_FOR_SALE_PRIORITY_CODE,
        STG_ACCEPTED_REFUND.BANK_PRODUCT,
        STG_ACCEPTED_REFUND.ACCEPTED_TAX_DATE_ID,
        STG_ACCEPTED_REFUND.AUTH_ID
 FROM CTG_ANALYTICS_STG.STG_ACCEPTED_REFUND
 ORDER BY STG_ACCEPTED_REFUND.FILING_ID,
          STG_ACCEPTED_REFUND.TAX_YEAR,
          STG_ACCEPTED_REFUND.SEQUENCE_NUMBER
SEGMENTED BY hash(STG_ACCEPTED_REFUND.FILING_ID, STG_ACCEPTED_REFUND.TAX_YEAR) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_UNLOCK_LOGIN_EXTRACT /*+createtype(P)*/
(
 AUTH_ID,
 FIRST_LOGIN_TIMESTAMP,
 LAST_LOGIN_TIMESTAMP,
 YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_UNLOCK_LOGIN_EXTRACT.AUTH_ID,
        STG_UNLOCK_LOGIN_EXTRACT.FIRST_LOGIN_TIMESTAMP,
        STG_UNLOCK_LOGIN_EXTRACT.LAST_LOGIN_TIMESTAMP,
        STG_UNLOCK_LOGIN_EXTRACT.YEAR,
        STG_UNLOCK_LOGIN_EXTRACT.BATCH_EVENT_ID,
        STG_UNLOCK_LOGIN_EXTRACT.CREATED_TIMESTAMP,
        STG_UNLOCK_LOGIN_EXTRACT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_UNLOCK_LOGIN_EXTRACT
 ORDER BY STG_UNLOCK_LOGIN_EXTRACT.AUTH_ID,
          STG_UNLOCK_LOGIN_EXTRACT.FIRST_LOGIN_TIMESTAMP,
          STG_UNLOCK_LOGIN_EXTRACT.LAST_LOGIN_TIMESTAMP,
          STG_UNLOCK_LOGIN_EXTRACT.YEAR,
          STG_UNLOCK_LOGIN_EXTRACT.BATCH_EVENT_ID,
          STG_UNLOCK_LOGIN_EXTRACT.CREATED_TIMESTAMP,
          STG_UNLOCK_LOGIN_EXTRACT.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_UNLOCK_LOGIN_EXTRACT.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_UNLOCK_ORDER_EXTRACT /*+createtype(P)*/
(
 AUTH_ID,
 CUSTOMER_KEY,
 ORDER_NUMBER,
 ORDER_TIMESTAMP,
 PRODUCT_VERSION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_UNLOCK_ORDER_EXTRACT.AUTH_ID,
        STG_UNLOCK_ORDER_EXTRACT.CUSTOMER_KEY,
        STG_UNLOCK_ORDER_EXTRACT.ORDER_NUMBER,
        STG_UNLOCK_ORDER_EXTRACT.ORDER_TIMESTAMP,
        STG_UNLOCK_ORDER_EXTRACT.PRODUCT_VERSION,
        STG_UNLOCK_ORDER_EXTRACT.BATCH_EVENT_ID,
        STG_UNLOCK_ORDER_EXTRACT.CREATED_TIMESTAMP,
        STG_UNLOCK_ORDER_EXTRACT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_UNLOCK_ORDER_EXTRACT
 ORDER BY STG_UNLOCK_ORDER_EXTRACT.AUTH_ID,
          STG_UNLOCK_ORDER_EXTRACT.CUSTOMER_KEY,
          STG_UNLOCK_ORDER_EXTRACT.ORDER_NUMBER,
          STG_UNLOCK_ORDER_EXTRACT.ORDER_TIMESTAMP,
          STG_UNLOCK_ORDER_EXTRACT.PRODUCT_VERSION,
          STG_UNLOCK_ORDER_EXTRACT.BATCH_EVENT_ID,
          STG_UNLOCK_ORDER_EXTRACT.CREATED_TIMESTAMP,
          STG_UNLOCK_ORDER_EXTRACT.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_UNLOCK_ORDER_EXTRACT.CUSTOMER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP /*+createtype(P)*/
(
 CUSTOMER_STATE_ZIP_ID,
 CUSTOMER_KEY,
 MARKETING_CUSTOMER_ID,
 STATE_ABBREVIATION,
 ZIP_CODE,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_CUSTOMER_STATE_ZIP.CUSTOMER_STATE_ZIP_ID,
        TRN_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
        TRN_CUSTOMER_STATE_ZIP.MARKETING_CUSTOMER_ID,
        TRN_CUSTOMER_STATE_ZIP.STATE_ABBREVIATION,
        TRN_CUSTOMER_STATE_ZIP.ZIP_CODE,
        TRN_CUSTOMER_STATE_ZIP.TAX_YEAR,
        TRN_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID,
        TRN_CUSTOMER_STATE_ZIP.CREATED_TIMESTAMP,
        TRN_CUSTOMER_STATE_ZIP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP
 ORDER BY TRN_CUSTOMER_STATE_ZIP.CUSTOMER_STATE_ZIP_ID
SEGMENTED BY hash(TRN_CUSTOMER_STATE_ZIP.CUSTOMER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_CUSTOMER_STATE_ZIP /*+createtype(P)*/
(
 CUSTOMER_KEY,
 MARKETING_CUSTOMER_ID,
 STATE_ABBREVIATION,
 ZIP_CODE,
 TAX_YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
        STG_CUSTOMER_STATE_ZIP.MARKETING_CUSTOMER_ID,
        STG_CUSTOMER_STATE_ZIP.STATE_ABBREVIATION,
        STG_CUSTOMER_STATE_ZIP.ZIP_CODE,
        STG_CUSTOMER_STATE_ZIP.TAX_YEAR,
        STG_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID,
        STG_CUSTOMER_STATE_ZIP.CREATED_TIMESTAMP,
        STG_CUSTOMER_STATE_ZIP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_CUSTOMER_STATE_ZIP
 ORDER BY STG_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
          STG_CUSTOMER_STATE_ZIP.MARKETING_CUSTOMER_ID,
          STG_CUSTOMER_STATE_ZIP.STATE_ABBREVIATION,
          STG_CUSTOMER_STATE_ZIP.ZIP_CODE,
          STG_CUSTOMER_STATE_ZIP.TAX_YEAR,
          STG_CUSTOMER_STATE_ZIP.BATCH_EVENT_ID,
          STG_CUSTOMER_STATE_ZIP.CREATED_TIMESTAMP,
          STG_CUSTOMER_STATE_ZIP.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_CUSTOMER_STATE_ZIP.CUSTOMER_KEY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TUNE_ACTUAL_INSTALL /*+createtype(P)*/
(
 SITE_ID,
 SITE_NAME,
 PUBLISHER_ID,
 PUBLISHER_NAME,
 SITE_EVENT_ID,
 SITE_EVENT_NAME,
 ADVERTISER_SUB_PUBLISHER_ID,
 ADVERTISER_SUB_PUBLISHER_NAME,
 ADVERTISER_SUB_SITE_ID,
 ADVERTISER_SUB_SITE_NAME,
 ADVERTISER_SUB_CAMPAIGN_ID,
 ADVERTISER_SUB_CAMPAIGN_NAME,
 ADVERTISER_SUB_ADGROUP_ID,
 ADVERTISER_SUB_ADGROUP_NAME,
 ADVERTISER_SUB_AD_ID,
 ADVERTISER_SUB_AD_NAME,
 ADVERTISER_SUB_KEYWORD_ID,
 ADVERTISER_SUB_KEYWORD_NAME,
 ADVERTISER_SUB_PLACEMENT_ID,
 ADVERTISER_SUB_PLACEMENT_NAME,
 PUBLISHER_SUB_CAMPAIGN_ID,
 PUBLISHER_SUB_CAMPAIGN_NAME,
 PUBLISHER_SUB_ADGROUP_ID,
 PUBLISHER_SUB_ADGROUP_NAME,
 PUBLISHER_SUB_AD_ID,
 PUBLISHER_SUB_AD_NAME,
 PUBLISHER_SUB_KEYWORD_ID,
 PUBLISHER_SUB_KEYWORD_NAME,
 PUBLISHER_SUB_PLACEMENT_ID,
 PUBLISHER_SUB_PLACEMENT_NAME,
 AD_CLICKS,
 INSTALLS,
 EVENTS,
 UPDATES,
 PUBLISHER_SUB_CAMPAIGN_REF,
 PUBLISHER_SUB_ADGROUP_REF,
 DEVICE_TYPE
)
AS
 SELECT STG_TUNE_ACTUAL_INSTALL.SITE_ID,
        STG_TUNE_ACTUAL_INSTALL.SITE_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_NAME,
        STG_TUNE_ACTUAL_INSTALL.SITE_EVENT_ID,
        STG_TUNE_ACTUAL_INSTALL.SITE_EVENT_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_NAME,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_ID,
        STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_NAME,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_ID,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_NAME,
        STG_TUNE_ACTUAL_INSTALL.AD_CLICKS,
        STG_TUNE_ACTUAL_INSTALL.INSTALLS,
        STG_TUNE_ACTUAL_INSTALL.EVENTS,
        STG_TUNE_ACTUAL_INSTALL.UPDATES,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_REF,
        STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_REF,
        STG_TUNE_ACTUAL_INSTALL.DEVICE_TYPE
 FROM CTG_ANALYTICS_STG.STG_TUNE_ACTUAL_INSTALL
 ORDER BY STG_TUNE_ACTUAL_INSTALL.SITE_ID,
          STG_TUNE_ACTUAL_INSTALL.SITE_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_NAME,
          STG_TUNE_ACTUAL_INSTALL.SITE_EVENT_ID,
          STG_TUNE_ACTUAL_INSTALL.SITE_EVENT_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PUBLISHER_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_SITE_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_CAMPAIGN_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_ADGROUP_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_AD_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_KEYWORD_NAME,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_ID,
          STG_TUNE_ACTUAL_INSTALL.ADVERTISER_SUB_PLACEMENT_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_AD_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_KEYWORD_NAME,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_ID,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_PLACEMENT_NAME,
          STG_TUNE_ACTUAL_INSTALL.AD_CLICKS,
          STG_TUNE_ACTUAL_INSTALL.INSTALLS,
          STG_TUNE_ACTUAL_INSTALL.EVENTS,
          STG_TUNE_ACTUAL_INSTALL.UPDATES,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_CAMPAIGN_REF,
          STG_TUNE_ACTUAL_INSTALL.PUBLISHER_SUB_ADGROUP_REF,
          STG_TUNE_ACTUAL_INSTALL.DEVICE_TYPE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_AUTH_DATA /*+createtype(P)*/
(
 AUTH_DATA_ID,
 TAX_YEAR,
 AUTH_TIMESTAMP,
 AUTH_ID,
 SOURCE,
 ROLE,
 SOURCE_APPLICATION_ID,
 PRODUCT_ID,
 AUTHENTICATION_LEVEL,
 IP_ADDRESS,
 TEST_FLAG,
 TRANSACTION_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_AUTH_DATA.AUTH_DATA_ID,
        TRN_AUTH_DATA.TAX_YEAR,
        TRN_AUTH_DATA.AUTH_TIMESTAMP,
        TRN_AUTH_DATA.AUTH_ID,
        TRN_AUTH_DATA.SOURCE,
        TRN_AUTH_DATA.ROLE,
        TRN_AUTH_DATA.SOURCE_APPLICATION_ID,
        TRN_AUTH_DATA.PRODUCT_ID,
        TRN_AUTH_DATA.AUTHENTICATION_LEVEL,
        TRN_AUTH_DATA.IP_ADDRESS,
        TRN_AUTH_DATA.TEST_FLAG,
        TRN_AUTH_DATA.TRANSACTION_ID,
        TRN_AUTH_DATA.BATCH_EVENT_ID,
        TRN_AUTH_DATA.CREATED_TIMESTAMP,
        TRN_AUTH_DATA.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_AUTH_DATA
 ORDER BY TRN_AUTH_DATA.AUTH_ID,
          TRN_AUTH_DATA.AUTH_TIMESTAMP
SEGMENTED BY hash(TRN_AUTH_DATA.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SESSION_END /*+createtype(P)*/
(
 SESSION_END_ID,
 TAX_YEAR,
 END_TIMESTAMP,
 AUTH_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORIGINAL_PRODUCT_ID,
 FIRST_TIME_FLAG,
 ORIGINAL_PRODUCTID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_SESSION_END.SESSION_END_ID,
        TRN_SESSION_END.TAX_YEAR,
        TRN_SESSION_END.END_TIMESTAMP,
        TRN_SESSION_END.AUTH_ID,
        TRN_SESSION_END.CURRENT_PRIORITY_CODE,
        TRN_SESSION_END.PRICE_PRIORITY_CODE,
        TRN_SESSION_END.CREDIT_PRIORITY_CODE,
        TRN_SESSION_END.ORIGINAL_PRODUCT_ID,
        TRN_SESSION_END.FIRST_TIME_FLAG,
        TRN_SESSION_END.ORIGINAL_PRODUCTID,
        TRN_SESSION_END.BATCH_EVENT_ID,
        TRN_SESSION_END.CREATED_TIMESTAMP,
        TRN_SESSION_END.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_SESSION_END
 ORDER BY TRN_SESSION_END.AUTH_ID,
          TRN_SESSION_END.END_TIMESTAMP
SEGMENTED BY hash(TRN_SESSION_END.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_SESSION_START /*+createtype(P)*/
(
 SESSION_START_ID,
 TAX_YEAR,
 START_TIMESTAMP,
 AUTH_ID,
 PRIORITY_CODE,
 PRODUCT_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_SESSION_START.SESSION_START_ID,
        TRN_SESSION_START.TAX_YEAR,
        TRN_SESSION_START.START_TIMESTAMP,
        TRN_SESSION_START.AUTH_ID,
        TRN_SESSION_START.PRIORITY_CODE,
        TRN_SESSION_START.PRODUCT_ID,
        TRN_SESSION_START.BATCH_EVENT_ID,
        TRN_SESSION_START.CREATED_TIMESTAMP,
        TRN_SESSION_START.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_SESSION_START
 ORDER BY TRN_SESSION_START.AUTH_ID,
          TRN_SESSION_START.START_TIMESTAMP
SEGMENTED BY hash(TRN_SESSION_START.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_TAX_ORDER /*+createtype(P)*/
(
 TAX_ORDER_ID,
 TAX_YEAR,
 ORDER_TIMESTAMP,
 AUTH_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORDER_NUMBER,
 ITEM_ALIAS_CODE,
 PAYMENT_METHOD,
 PAYMENT_AMOUNT,
 ORIGINAL_PRODUCT_ID,
 VOUCHER_CODE,
 HOLD_REASON,
 ORDER_ORIGIN,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_TAX_ORDER.TAX_ORDER_ID,
        TRN_TAX_ORDER.TAX_YEAR,
        TRN_TAX_ORDER.ORDER_TIMESTAMP,
        TRN_TAX_ORDER.AUTH_ID,
        TRN_TAX_ORDER.PRIMARY_ID,
        TRN_TAX_ORDER.SECONDARY_ID,
        TRN_TAX_ORDER.CURRENT_PRIORITY_CODE,
        TRN_TAX_ORDER.PRICE_PRIORITY_CODE,
        TRN_TAX_ORDER.CREDIT_PRIORITY_CODE,
        TRN_TAX_ORDER.ORDER_NUMBER,
        TRN_TAX_ORDER.ITEM_ALIAS_CODE,
        TRN_TAX_ORDER.PAYMENT_METHOD,
        TRN_TAX_ORDER.PAYMENT_AMOUNT,
        TRN_TAX_ORDER.ORIGINAL_PRODUCT_ID,
        TRN_TAX_ORDER.VOUCHER_CODE,
        TRN_TAX_ORDER.HOLD_REASON,
        TRN_TAX_ORDER.ORDER_ORIGIN,
        TRN_TAX_ORDER.BATCH_EVENT_ID,
        TRN_TAX_ORDER.CREATED_TIMESTAMP,
        TRN_TAX_ORDER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_TAX_ORDER
 ORDER BY TRN_TAX_ORDER.AUTH_ID,
          TRN_TAX_ORDER.ORDER_TIMESTAMP
SEGMENTED BY hash(TRN_TAX_ORDER.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_AUTH_DATA /*+createtype(P)*/
(
 AUTH_TIMESTAMP,
 AUTH_ID,
 SOURCE,
 ROLE,
 SOURCE_APPLICATION_ID,
 PRODUCT_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_AUTH_DATA.AUTH_TIMESTAMP,
        STG_TTO_AUTH_DATA.AUTH_ID,
        STG_TTO_AUTH_DATA.SOURCE,
        STG_TTO_AUTH_DATA.ROLE,
        STG_TTO_AUTH_DATA.SOURCE_APPLICATION_ID,
        STG_TTO_AUTH_DATA.PRODUCT_ID,
        STG_TTO_AUTH_DATA.BATCH_EVENT_ID,
        STG_TTO_AUTH_DATA.CREATED_TIMESTAMP,
        STG_TTO_AUTH_DATA.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_AUTH_DATA
 ORDER BY STG_TTO_AUTH_DATA.AUTH_TIMESTAMP,
          STG_TTO_AUTH_DATA.AUTH_ID,
          STG_TTO_AUTH_DATA.SOURCE,
          STG_TTO_AUTH_DATA.ROLE,
          STG_TTO_AUTH_DATA.SOURCE_APPLICATION_ID,
          STG_TTO_AUTH_DATA.PRODUCT_ID,
          STG_TTO_AUTH_DATA.BATCH_EVENT_ID,
          STG_TTO_AUTH_DATA.CREATED_TIMESTAMP,
          STG_TTO_AUTH_DATA.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_AUTH_DATA.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_PRS /*+createtype(P)*/
(
 PRS_TIMESTAMP,
 AUTH_ID,
 PRODUCTID,
 LOCATION,
 SCORE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_PRS.PRS_TIMESTAMP,
        STG_TTO_PRS.AUTH_ID,
        STG_TTO_PRS.PRODUCTID,
        STG_TTO_PRS.LOCATION,
        STG_TTO_PRS.SCORE,
        STG_TTO_PRS.BATCH_EVENT_ID,
        STG_TTO_PRS.CREATED_TIMESTAMP,
        STG_TTO_PRS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_PRS
 ORDER BY STG_TTO_PRS.PRS_TIMESTAMP,
          STG_TTO_PRS.AUTH_ID,
          STG_TTO_PRS.PRODUCTID,
          STG_TTO_PRS.LOCATION,
          STG_TTO_PRS.SCORE,
          STG_TTO_PRS.BATCH_EVENT_ID,
          STG_TTO_PRS.CREATED_TIMESTAMP,
          STG_TTO_PRS.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_PRS.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_PRS_VERBATIM /*+createtype(P)*/
(
 PRS_VERBATIM_TIMESTAMP,
 AUTH_ID,
 PRODUCT_ID,
 VERBATIM,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_PRS_VERBATIM.PRS_VERBATIM_TIMESTAMP,
        STG_TTO_PRS_VERBATIM.AUTH_ID,
        STG_TTO_PRS_VERBATIM.PRODUCT_ID,
        STG_TTO_PRS_VERBATIM.VERBATIM,
        STG_TTO_PRS_VERBATIM.BATCH_EVENT_ID,
        STG_TTO_PRS_VERBATIM.CREATED_TIMESTAMP,
        STG_TTO_PRS_VERBATIM.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_PRS_VERBATIM
 ORDER BY STG_TTO_PRS_VERBATIM.PRS_VERBATIM_TIMESTAMP,
          STG_TTO_PRS_VERBATIM.AUTH_ID,
          STG_TTO_PRS_VERBATIM.PRODUCT_ID,
          STG_TTO_PRS_VERBATIM.VERBATIM,
          STG_TTO_PRS_VERBATIM.BATCH_EVENT_ID,
          STG_TTO_PRS_VERBATIM.CREATED_TIMESTAMP,
          STG_TTO_PRS_VERBATIM.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_PRS_VERBATIM.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_SESSION_END /*+createtype(P)*/
(
 END_TIMESTAMP,
 AUTH_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORIGINAL_PRODUCT_ID,
 FIRST_TIME_FLAG,
 ORIGINAL_PRODUCTID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_SESSION_END.END_TIMESTAMP,
        STG_TTO_SESSION_END.AUTH_ID,
        STG_TTO_SESSION_END.CURRENT_PRIORITY_CODE,
        STG_TTO_SESSION_END.PRICE_PRIORITY_CODE,
        STG_TTO_SESSION_END.CREDIT_PRIORITY_CODE,
        STG_TTO_SESSION_END.ORIGINAL_PRODUCT_ID,
        STG_TTO_SESSION_END.FIRST_TIME_FLAG,
        STG_TTO_SESSION_END.ORIGINAL_PRODUCTID,
        STG_TTO_SESSION_END.BATCH_EVENT_ID,
        STG_TTO_SESSION_END.CREATED_TIMESTAMP,
        STG_TTO_SESSION_END.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_SESSION_END
 ORDER BY STG_TTO_SESSION_END.END_TIMESTAMP,
          STG_TTO_SESSION_END.AUTH_ID,
          STG_TTO_SESSION_END.CURRENT_PRIORITY_CODE,
          STG_TTO_SESSION_END.PRICE_PRIORITY_CODE,
          STG_TTO_SESSION_END.CREDIT_PRIORITY_CODE,
          STG_TTO_SESSION_END.ORIGINAL_PRODUCT_ID,
          STG_TTO_SESSION_END.FIRST_TIME_FLAG,
          STG_TTO_SESSION_END.ORIGINAL_PRODUCTID,
          STG_TTO_SESSION_END.BATCH_EVENT_ID,
          STG_TTO_SESSION_END.CREATED_TIMESTAMP,
          STG_TTO_SESSION_END.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_SESSION_END.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_SESSION_START /*+createtype(P)*/
(
 START_TIMESTAMP,
 AUTH_ID,
 PRIORITY_CODE,
 PRODUCT_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_SESSION_START.START_TIMESTAMP,
        STG_TTO_SESSION_START.AUTH_ID,
        STG_TTO_SESSION_START.PRIORITY_CODE,
        STG_TTO_SESSION_START.PRODUCT_ID,
        STG_TTO_SESSION_START.BATCH_EVENT_ID,
        STG_TTO_SESSION_START.CREATED_TIMESTAMP,
        STG_TTO_SESSION_START.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_SESSION_START
 ORDER BY STG_TTO_SESSION_START.START_TIMESTAMP,
          STG_TTO_SESSION_START.AUTH_ID,
          STG_TTO_SESSION_START.PRIORITY_CODE,
          STG_TTO_SESSION_START.PRODUCT_ID,
          STG_TTO_SESSION_START.BATCH_EVENT_ID,
          STG_TTO_SESSION_START.CREATED_TIMESTAMP,
          STG_TTO_SESSION_START.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_SESSION_START.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TTO_TAX_ORDER /*+createtype(P)*/
(
 ORDER_TIMESTAMP,
 AUTH_ID,
 PRIMARY_ID,
 SECONDARY_ID,
 CURRENT_PRIORITY_CODE,
 PRICE_PRIORITY_CODE,
 CREDIT_PRIORITY_CODE,
 ORDER_NUMBER,
 ITEM_ALIAS_CODE,
 PAYMENT_METHOD,
 PAYMENT_AMOUNT,
 ORIGINAL_PRODUCT_ID,
 VOUCHER_CODE,
 HOLD_REASON,
 ORDER_ORIGIN,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT STG_TTO_TAX_ORDER.ORDER_TIMESTAMP,
        STG_TTO_TAX_ORDER.AUTH_ID,
        STG_TTO_TAX_ORDER.PRIMARY_ID,
        STG_TTO_TAX_ORDER.SECONDARY_ID,
        STG_TTO_TAX_ORDER.CURRENT_PRIORITY_CODE,
        STG_TTO_TAX_ORDER.PRICE_PRIORITY_CODE,
        STG_TTO_TAX_ORDER.CREDIT_PRIORITY_CODE,
        STG_TTO_TAX_ORDER.ORDER_NUMBER,
        STG_TTO_TAX_ORDER.ITEM_ALIAS_CODE,
        STG_TTO_TAX_ORDER.PAYMENT_METHOD,
        STG_TTO_TAX_ORDER.PAYMENT_AMOUNT,
        STG_TTO_TAX_ORDER.ORIGINAL_PRODUCT_ID,
        STG_TTO_TAX_ORDER.VOUCHER_CODE,
        STG_TTO_TAX_ORDER.HOLD_REASON,
        STG_TTO_TAX_ORDER.ORDER_ORIGIN,
        STG_TTO_TAX_ORDER.BATCH_EVENT_ID,
        STG_TTO_TAX_ORDER.CREATED_TIMESTAMP,
        STG_TTO_TAX_ORDER.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_TTO_TAX_ORDER
 ORDER BY STG_TTO_TAX_ORDER.ORDER_TIMESTAMP,
          STG_TTO_TAX_ORDER.AUTH_ID,
          STG_TTO_TAX_ORDER.PRIMARY_ID,
          STG_TTO_TAX_ORDER.SECONDARY_ID,
          STG_TTO_TAX_ORDER.CURRENT_PRIORITY_CODE,
          STG_TTO_TAX_ORDER.PRICE_PRIORITY_CODE,
          STG_TTO_TAX_ORDER.CREDIT_PRIORITY_CODE,
          STG_TTO_TAX_ORDER.ORDER_NUMBER,
          STG_TTO_TAX_ORDER.ITEM_ALIAS_CODE,
          STG_TTO_TAX_ORDER.PAYMENT_METHOD,
          STG_TTO_TAX_ORDER.PAYMENT_AMOUNT,
          STG_TTO_TAX_ORDER.ORIGINAL_PRODUCT_ID,
          STG_TTO_TAX_ORDER.VOUCHER_CODE,
          STG_TTO_TAX_ORDER.HOLD_REASON,
          STG_TTO_TAX_ORDER.ORDER_ORIGIN,
          STG_TTO_TAX_ORDER.BATCH_EVENT_ID,
          STG_TTO_TAX_ORDER.CREATED_TIMESTAMP,
          STG_TTO_TAX_ORDER.UPDATED_TIMESTAMP
SEGMENTED BY hash(STG_TTO_TAX_ORDER.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_OCR_PERFORMANCE /*+createtype(L)*/
(
 REQUEST_UUID,
 "TIMESTAMP",
 TID,
 AUTH_ID,
 CLIENT_APP_ID,
 FORM_TYPE,
 IMPORT_METHOD,
 MASHUP_RESULT,
 TEST_FLAG,
 OCR_SUCCEEDED,
 OCR_RESPONSE_CODE,
 OCR_PROCESSING_TIME_MILLISECONDS,
 MEF_STORAGE_SUCCEEDED,
 MEF_STORAGE_RESPONSE_CODE,
 MEF_STORAGE_PROCESSING_TIME_MILLISECONDS,
 META_DATA_STORAGE_SUCCEEDED,
 META_DATA_STORAGE_RESPONSE_CODE,
 META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS,
 EMPLOYER_PROVINCE_OR_STATE_MATCH,
 EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
 EMPLOYER_POSTAL_CODE_MATCH,
 EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE,
 EMPLOYER_NAME_LINE1_MATCH,
 EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE,
 EMPLOYER_EIN_MATCH,
 EMPLOYER_EIN_MATCH_CONFIDENCE,
 EMPLOYER_CITY_MATCH,
 EMPLOYER_CITY_MATCH_CONFIDENCE,
 EMPLOYER_ADDRESS_LINE1_MATCH,
 EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE,
 EMPLOYEE_SSN_MATCH,
 EMPLOYEE_SSN_MATCH_CONFIDENCE,
 EMPLOYEE_NAME_MATCH,
 EMPLOYEE_NAME_MATCH_CONFIDENCE,
 EMPLOYEE_PROVINCE_OR_STATE_MATCH,
 EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
 EMPLOYEE_POSTAL_CODE_MATCH,
 EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE,
 EMPLOYEE_CITY_MATCH,
 EMPLOYEE_CITY_MATCH_CONFIDENCE,
 EMPLOYEE_ADDRESS_MATCH,
 EMPLOYEE_ADDRESS_MATCH_CONFIDENCE,
 ALLOCATED_TIPS_MATCH,
 ALLOCATED_TIPS_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_TIPS_MATCH,
 SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE,
 MEDICARE_TAX_WITHHELD_MATCH,
 MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE,
 MEDICARE_WAGES_AND_TIPS_MATCH,
 MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_TAX_MATCH,
 SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE,
 SOCIAL_SECURITY_WAGES_MATCH,
 SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE,
 WITHHOLDING_MATCH,
 WITHHOLDING_MATCH_CONFIDENCE,
 LOCALITY_NAMES_MATCH,
 LOCALITY_NAMES_MATCH_CONFIDENCE,
 WAGES_MATCH,
 WAGES_MATCH_CONFIDENCE,
 LOCAL_WITHHOLDING_MATCH,
 LOCAL_WITHHOLDING_MATCH_CONFIDENCE,
 LOCAL_WAGE_MATCH,
 LOCAL_WAGE_MATCH_CONFIDENCE,
 STATE_WITHHOLDING_MATCH,
 STATE_WITHHOLDING_MATCH_CONFIDENCE,
 STATE_WAGE_MATCH,
 STATE_WAGE_MATCH_CONFIDENCE,
 STATES_MATCH,
 STATES_MATCH_CONFIDENCE,
 STATE_IDS_MATCH,
 STATE_IDS_MATCH_CONFIDENCE,
 BOX_FOURTEEN_CODES_MATCH,
 BOX_FOURTEEN_CODES_MATCH_CONFIDENCE,
 BOX_FOURTEEN_DESCRIPTIONS_MATCH,
 BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE,
 BOX_FOURTEEN_AMOUNTS_MATCH,
 BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE,
 RETIREMENT_MATCH,
 RETIREMENT_MATCH_CONFIDENCE,
 SICK_PAY_MATCH,
 SICK_PAY_MATCH_CONFIDENCE,
 STATUTORY_EMPLOYEE_MATCH,
 STATUTORY_EMPLOYEE_MATCH_CONFIDENCE,
 BOX_TWELVE_D_CODES_MATCH,
 BOX_TWELVE_D_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_D_AMOUNTS_MATCH,
 BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_C_CODES_MATCH,
 BOX_TWELVE_C_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_C_AMOUNTS_MATCH,
 BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_B_CODES_MATCH,
 BOX_TWELVE_B_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_B_AMOUNTS_MATCH,
 BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE,
 BOX_TWELVE_A_CODES_MATCH,
 BOX_TWELVE_A_CODES_MATCH_CONFIDENCE,
 BOX_TWELVE_A_AMOUNTS_MATCH,
 BOX_TWELVE_A_AMOUNTS_CONFIDENCE,
 NONQUALIFIED_PLANS_MATCH,
 NONQUALIFIED_PLANS_MATCH_CONFIDENCE,
 DEPENDENT_CARE_BENEFITS_MATCH,
 DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE
)
AS
 SELECT STG_OCR_PERFORMANCE.REQUEST_UUID,
        STG_OCR_PERFORMANCE."TIMESTAMP",
        STG_OCR_PERFORMANCE.TID,
        STG_OCR_PERFORMANCE.AUTH_ID,
        STG_OCR_PERFORMANCE.CLIENT_APP_ID,
        STG_OCR_PERFORMANCE.FORM_TYPE,
        STG_OCR_PERFORMANCE.IMPORT_METHOD,
        STG_OCR_PERFORMANCE.MASHUP_RESULT,
        STG_OCR_PERFORMANCE.TEST_FLAG,
        STG_OCR_PERFORMANCE.OCR_SUCCEEDED,
        STG_OCR_PERFORMANCE.OCR_RESPONSE_CODE,
        STG_OCR_PERFORMANCE.OCR_PROCESSING_TIME_MILLISECONDS,
        STG_OCR_PERFORMANCE.MEF_STORAGE_SUCCEEDED,
        STG_OCR_PERFORMANCE.MEF_STORAGE_RESPONSE_CODE,
        STG_OCR_PERFORMANCE.MEF_STORAGE_PROCESSING_TIME_MILLISECONDS,
        STG_OCR_PERFORMANCE.META_DATA_STORAGE_SUCCEEDED,
        STG_OCR_PERFORMANCE.META_DATA_STORAGE_RESPONSE_CODE,
        STG_OCR_PERFORMANCE.META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS,
        STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH,
        STG_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH,
        STG_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH,
        STG_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH,
        STG_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH,
        STG_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.WITHHOLDING_MATCH,
        STG_OCR_PERFORMANCE.WITHHOLDING_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH,
        STG_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.WAGES_MATCH,
        STG_OCR_PERFORMANCE.WAGES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH,
        STG_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.LOCAL_WAGE_MATCH,
        STG_OCR_PERFORMANCE.LOCAL_WAGE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH,
        STG_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.STATE_WAGE_MATCH,
        STG_OCR_PERFORMANCE.STATE_WAGE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.STATES_MATCH,
        STG_OCR_PERFORMANCE.STATES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.STATE_IDS_MATCH,
        STG_OCR_PERFORMANCE.STATE_IDS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH,
        STG_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.RETIREMENT_MATCH,
        STG_OCR_PERFORMANCE.RETIREMENT_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.SICK_PAY_MATCH,
        STG_OCR_PERFORMANCE.SICK_PAY_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH,
        STG_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_MATCH,
        STG_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_CONFIDENCE,
        STG_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH,
        STG_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH_CONFIDENCE,
        STG_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH,
        STG_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE
 FROM CTG_ANALYTICS_STG.STG_OCR_PERFORMANCE
 ORDER BY STG_OCR_PERFORMANCE.REQUEST_UUID,
          STG_OCR_PERFORMANCE."TIMESTAMP",
          STG_OCR_PERFORMANCE.TID,
          STG_OCR_PERFORMANCE.AUTH_ID,
          STG_OCR_PERFORMANCE.CLIENT_APP_ID,
          STG_OCR_PERFORMANCE.FORM_TYPE,
          STG_OCR_PERFORMANCE.IMPORT_METHOD,
          STG_OCR_PERFORMANCE.MASHUP_RESULT,
          STG_OCR_PERFORMANCE.TEST_FLAG,
          STG_OCR_PERFORMANCE.OCR_SUCCEEDED,
          STG_OCR_PERFORMANCE.OCR_RESPONSE_CODE,
          STG_OCR_PERFORMANCE.OCR_PROCESSING_TIME_MILLISECONDS,
          STG_OCR_PERFORMANCE.MEF_STORAGE_SUCCEEDED,
          STG_OCR_PERFORMANCE.MEF_STORAGE_RESPONSE_CODE,
          STG_OCR_PERFORMANCE.MEF_STORAGE_PROCESSING_TIME_MILLISECONDS,
          STG_OCR_PERFORMANCE.META_DATA_STORAGE_SUCCEEDED,
          STG_OCR_PERFORMANCE.META_DATA_STORAGE_RESPONSE_CODE,
          STG_OCR_PERFORMANCE.META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS,
          STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH,
          STG_OCR_PERFORMANCE.EMPLOYEE_ADDRESS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH,
          STG_OCR_PERFORMANCE.ALLOCATED_TIPS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TIPS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH,
          STG_OCR_PERFORMANCE.MEDICARE_TAX_WITHHELD_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH,
          STG_OCR_PERFORMANCE.MEDICARE_WAGES_AND_TIPS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_TAX_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH,
          STG_OCR_PERFORMANCE.SOCIAL_SECURITY_WAGES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.WITHHOLDING_MATCH,
          STG_OCR_PERFORMANCE.WITHHOLDING_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH,
          STG_OCR_PERFORMANCE.LOCALITY_NAMES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.WAGES_MATCH,
          STG_OCR_PERFORMANCE.WAGES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH,
          STG_OCR_PERFORMANCE.LOCAL_WITHHOLDING_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.LOCAL_WAGE_MATCH,
          STG_OCR_PERFORMANCE.LOCAL_WAGE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH,
          STG_OCR_PERFORMANCE.STATE_WITHHOLDING_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.STATE_WAGE_MATCH,
          STG_OCR_PERFORMANCE.STATE_WAGE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.STATES_MATCH,
          STG_OCR_PERFORMANCE.STATES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.STATE_IDS_MATCH,
          STG_OCR_PERFORMANCE.STATE_IDS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_CODES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_DESCRIPTIONS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH,
          STG_OCR_PERFORMANCE.BOX_FOURTEEN_AMOUNTS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.RETIREMENT_MATCH,
          STG_OCR_PERFORMANCE.RETIREMENT_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.SICK_PAY_MATCH,
          STG_OCR_PERFORMANCE.SICK_PAY_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH,
          STG_OCR_PERFORMANCE.STATUTORY_EMPLOYEE_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_D_CODES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_D_AMOUNTS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_C_CODES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_C_AMOUNTS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_B_CODES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_B_AMOUNTS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_A_CODES_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_MATCH,
          STG_OCR_PERFORMANCE.BOX_TWELVE_A_AMOUNTS_CONFIDENCE,
          STG_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH,
          STG_OCR_PERFORMANCE.NONQUALIFIED_PLANS_MATCH_CONFIDENCE,
          STG_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH,
          STG_OCR_PERFORMANCE.DEPENDENT_CARE_BENEFITS_MATCH_CONFIDENCE
SEGMENTED BY hash(STG_OCR_PERFORMANCE."TIMESTAMP", STG_OCR_PERFORMANCE.AUTH_ID, STG_OCR_PERFORMANCE.OCR_SUCCEEDED, STG_OCR_PERFORMANCE.OCR_RESPONSE_CODE, STG_OCR_PERFORMANCE.OCR_PROCESSING_TIME_MILLISECONDS, STG_OCR_PERFORMANCE.MEF_STORAGE_SUCCEEDED, STG_OCR_PERFORMANCE.MEF_STORAGE_RESPONSE_CODE, STG_OCR_PERFORMANCE.MEF_STORAGE_PROCESSING_TIME_MILLISECONDS, STG_OCR_PERFORMANCE.META_DATA_STORAGE_SUCCEEDED, STG_OCR_PERFORMANCE.META_DATA_STORAGE_RESPONSE_CODE, STG_OCR_PERFORMANCE.META_DATA_STORAGE_PROCESSING_TIME_MILLISECONDS, STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_PROVINCE_OR_STATE_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_POSTAL_CODE_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_NAME_LINE1_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_EIN_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_CITY_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH, STG_OCR_PERFORMANCE.EMPLOYER_ADDRESS_LINE1_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH, STG_OCR_PERFORMANCE.EMPLOYEE_SSN_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH, STG_OCR_PERFORMANCE.EMPLOYEE_NAME_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH, STG_OCR_PERFORMANCE.EMPLOYEE_PROVINCE_OR_STATE_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH, STG_OCR_PERFORMANCE.EMPLOYEE_POSTAL_CODE_MATCH_CONFIDENCE, STG_OCR_PERFORMANCE.EMPLOYEE_CITY_MATCH) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TAXML_NEW
(
 VERSION,
 FILING_ID,
 APPLICATION_ASSIGNED_TAXML_ENTITY_ID,
 REASON,
 PRIMARY_ID,
 SECONDARY_ID,
 AUTH_ID,
 RECEIVED_TIMESTAMP,
 ZIP,
 FILING_STATUS,
 TAXPAYER_AGE,
 SPOUSE_AGE,
 DEPENDENTS_MINIMUM_AGE,
 DEPENDENTS_AVERAGE_AGE,
 DEPENDENTS_MAXIMUM_AGE,
 TAXPAYER_OCCUPATION,
 SPOUSE_OCCUPATION,
 FED_FORM_TYPE,
 W2_COUNT,
 AGI,
 EXEMPTIONS_NUMBER,
 DEPENDENTS_COUNT,
 SALARIES_AND_WAGES,
 TAXABLE_INTEREST,
 TAX_EXEMPT_INTEREST,
 ORDINARY_DIVIDEND,
 QUALIFIED_DIVIDEND,
 TAXABLE_OFFSET,
 ALIMONY_INCOME,
 BUSINESS_INCOME,
 OTHER_GAIN,
 FARM_INCOME,
 CAPITAL_GAIN,
 IRA_DISTRIBUTION,
 TAXABLE_IRA,
 PENSION,
 TAXABLE_PENSION,
 SCHEDULE_E_INCOME,
 HOUSEHOLD_EMPLOYEE_TAX,
 UNEMPLOYMENT_INCOME,
 SOCIAL_SECURITY_INCOME,
 TAXABLE_SOCIAL_SECURITY_INCOME,
 OTHER_INCOME,
 TOTAL_INCOME,
 SELF_EMPLOYMENT_TAX,
 SELF_EMPLOYMENT_RETIREMENT,
 TOTAL_DEDUCTIONS,
 ITEMIZED_DEDUCTIONS_FLAG,
 IRA_DEDUCTION,
 STUDENT_LOAN_INTEREST,
 STATE_OR_LOCAL_TAX,
 STATE_OR_LOCAL_SALES_TAX,
 REAL_ESTATE_TAX,
 TAXES_PAID_AMOUNT,
 MEDICAL_OR_DENTAL_EXPENSES,
 MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION,
 PERSONAL_PROPERTY_TAX,
 OTHER_DEDUCTIBLE_TAX,
 MORTGAGE_INTEREST,
 MORTGAGE_INTEREST_NON_1098,
 MORTGAGE_POINTS_NON_1098,
 MORTGAGE_INSURANCE,
 INVESTMENT_INTEREST_PAID,
 TOTAL_INTEREST_PAID,
 CHARITABLE_CONTRIBUTIONS_CASH,
 CHARITABLE_CONTRIBUTIONS_NONCASH,
 CHARITABLE_CONTRIBUTIONS_CARRYOVER,
 CHARITABLE_CONTRIBUTIONS,
 CASUALTY_LOSSES,
 EMPLOYEE_EXPENSES,
 TAX_PREP_FEES,
 OTHER_DEDUCTIBLE_EXPENSES,
 TOTAL_DEDUCTIBLE_EXPENSES,
 EXPENSES_DEDUCTION,
 MISCELLANEOUS_DEDUCTIONS,
 ITEMIZE_ANYWAY_FLAG,
 TAXABLE_INCOME,
 SCHEDULE_C_COUNT,
 BUSINESS_ACCOUNTING_METHOD_CASH_COUNT,
 BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT,
 BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT,
 BUSINESS_MATERIAL_PARTICIPATION_COUNT,
 BUSINESS_START_ACQUIRE_COUNT,
 BUSINESS_1099_REQUIRED_COUNT,
 BUSINESS_WILL_FILE_1099_COUNT,
 BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT,
 BUSINESS_GROSS_RECEIPTS_AMOUNT,
 BUSINESS_RETURNS_AMOUNT,
 BUSINESS_COST_OF_GOODS,
 BUSINESS_GROSS_PROFIT,
 BUSINESS_OTHER_INCOME,
 BUSINESS_GROSS_INCOME,
 BUSINESS_ADVERTISING_EXPENSE,
 BUSINESS_CAR_EXPENSE,
 BUSINESS_COMMISSIONS_PAID,
 BUSINESS_CONTRACT_LABOR_EXPENSE,
 BUSINESS_DEPLETION_EXPENSE,
 BUSINESS_DEPRECIATION,
 BUSINESS_EMPLOYEE_BENEFITS_PAID,
 BUSINESS_INSURANCE_PAID,
 BUSINESS_MORTGAGE_INTEREST_PAID,
 BUSINESS_OTHER_INTEREST_PAID,
 BUSINESS_LEGAL_EXPENSE,
 BUSINESS_OFFICE_EXPENSE,
 BUSINESS_PENSION_EXPENSE,
 BUSINESS_RENTAL_VEHICLES_EXPENSE,
 BUSINESS_RENTAL_OTHER_EXPENSE,
 BUSINESS_REPAIRS_EXPENSE,
 BUSINESS_SUPPLIES_EXPENSE,
 BUSINESS_TAXES_PAID,
 BUSINESS_TRAVEL_EXPENSE,
 BUSINESS_MEALS_EXPENSE,
 BUSINESS_UTILITIES_EXPENSE,
 BUSINESS_WAGES_PAID,
 BUSINESS_OTHER_EXPENSE,
 BUSINESS_TOTAL_EXPENSE,
 BUSINESS_TENTATIVE_PROFIT,
 BUSINESS_USE_OF_HOME_EXPENSES,
 BUSINESS_NET_PROFIT,
 BUSINESS_INVESTMENT_AT_RISK_TOTAL,
 BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT,
 BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT,
 BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT,
 BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT,
 BUSINESS_COST_OF_GOODS_PURCHASES,
 BUSINESS_COST_OF_GOODS_LABOR,
 BUSINESS_COST_OF_GOODS_SUPPLIES,
 BUSINESS_COST_OF_GOODS_OTHER_COST,
 BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT,
 BUSINESS_COST_OF_GOODS_TOTAL_SOLD,
 BUSINESS_VEHICLE_MILES_BUSINESS,
 BUSINESS_VEHICLE_MILES_COMMUTE,
 BUSINESS_VEHICLE_MILES_OTHER,
 BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT,
 BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT,
 BUSINESS_VEHICLES_EVIDENCE_COUNT,
 BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT,
 SCHEDULE_E_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS,
 SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS,
 SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT,
 SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID,
 SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID,
 SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE,
 SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE,
 SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT,
 SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME,
 SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS,
 SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION,
 SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME,
 SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME,
 SUPPLEMENTAL_ESTATE_PASSIVE_LOSS,
 SUPPLEMENTAL_ESTATE_PASSIVE_INCOME,
 SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS,
 SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME,
 SUPPLEMENTAL_ESTATE_TOTAL_INCOME,
 SUPPLEMENTAL_REMIC_EXCESS_INCLUSION,
 SUPPLEMENTAL_REMIC_TAXABLE_INCOME,
 SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME,
 SUPPLEMENTAL_FARM_RENTAL_INCOME,
 SUPPLEMENTAL_FARM_GROSS_INCOME,
 SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME,
 DISABLED_CREDIT,
 TAX_CREDITS,
 RESIDENTIAL_ENERGY_CREDIT,
 CHILD_CREDIT,
 EDUCATION_CREDIT,
 TUITION,
 EDUCATOR_EXPENSES,
 CERTAIN_BUSINESS_EXPENSE,
 HSA,
 MOVING_EXPENSE,
 DEDUCTIBLE_SELF_EMPLOYMENT_TAX,
 SELF_EMPLOYMENT_HEALTH_INSURANCE,
 EARLY_WITHDRAWAL_PENALTY,
 ALIMONY_PAID,
 DOMESTIC_PRODUCTION_DEDUCTION,
 ADJUSTMENTS,
 OLD_OR_BLIND_COUNT,
 ITEMIZE_SEPARATELY_FLAG,
 EXEMPTION_AMOUNT,
 TAX_LIABILITY,
 CHILD_CARE_CREDIT,
 ADDITIONAL_CHILD_CARE_CREDIT,
 RETIREMENT_SAVINGS_CREDIT,
 HOPE_CREDIT,
 EARNED_INCOME_TAX_CREDIT,
 ALTERNATIVE_MINIMUM_TAX,
 FOREIGN_TAX_CREDIT,
 OTHER_CREDITS,
 TOTAL_CREDITS,
 UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX,
 RETIRMENT_ADDITIONAL_TAX,
 HOMEBUYER_CREDIT_REPAYMENT,
 OTHER_TAXES,
 INCOME_TAX_WITHHELD,
 ESTIMATED_TAX,
 NON_TAXABLE_COMBAT_PAY,
 PAYMENT_WITH_EXTENSION,
 EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD,
 FUEL_TAX_CREDIT,
 OTHER_PAYMENTS,
 TOTAL_PAYMENTS,
 ESTIMATED_TAX_PENALTY,
 INCOME_TAX,
 TOTAL_TAX,
 TAX_DUE,
 REFUND,
 ACA_TAX_CREDIT_REPAYMENT,
 ACA_FULL_YEAR_COVERAGE,
 ACA_PENALTY,
 TAXPAYER_PHONE_AREA_CODE,
 TAXPAYER_PHONE_ID,
 SPOUSE_PHONE_AREA_CODE,
 SPOUSE_PHONE_ID,
 W2_OWNER_LIST,
 W2_EIN_LIST,
 W2_EMPLOYER_LIST,
 W2_EMPLOYER_ZIP_LIST,
 W2_WAGES_TOTAL,
 W2_FED_WITHHELD_TOTAL,
 W2_SOCIAL_SECURITY_WAGES_TOTAL,
 W2_SOCIAL_SECURITY_WITHHELD_TOTAL,
 W2_MEDICARE_WAGES_TOTAL,
 W2_MEDICARE_WITHHELD_TOTAL,
 W2_SOCIAL_SECURITY_TIPS_TOTAL,
 W2_ALLOCATED_TIPS_TOTAL,
 W2_STATES_COUNT_LIST,
 W2_LOCALITY_COUNT_LIST,
 W2_STATE_WAGES_TOTAL,
 W2_STATE_TAX_TOTAL,
 W2_LOCAL_WAGES_TOTAL,
 W2_LOCAL_TAX_TOTAL,
 RAW_W2_WAGES,
 RAW_W2_FED_WITHHELD,
 RAW_W2_SOCIAL_SECURITY_WAGES,
 RAW_W2_SOCIAL_SECURITY_WITHHELD,
 RAW_W2_MEDICARE_WAGES,
 RAW_W2_MEDICARE_WITHHELD,
 RAW_W2_SOCIAL_SECURITY_TIPS,
 RAW_W2_ALLOCATED_TIPS,
 RAW_W2_STATE_WAGES,
 RAW_W2_STATE_TAX,
 RAW_W2_LOCAL_WAGES,
 RAW_W2_LOCAL_TAX,
 STATES_COUNT,
 RAW_STATES,
 TAXPAYER_MILITARY_FLAG,
 SPOUSE_MILITARY_FLAG,
 IDENTITY_THEFT_PIN_FLAG,
 RESIDENT_STATE_RETURNS_COUNT
)
AS
 SELECT STG_TAXML.VERSION,
        STG_TAXML.FILING_ID,
        STG_TAXML.APPLICATION_ASSIGNED_TAXML_ENTITY_ID,
        STG_TAXML.REASON,
        STG_TAXML.PRIMARY_ID,
        STG_TAXML.SECONDARY_ID,
        STG_TAXML.AUTH_ID,
        STG_TAXML.RECEIVED_TIMESTAMP,
        STG_TAXML.ZIP,
        STG_TAXML.FILING_STATUS,
        STG_TAXML.TAXPAYER_AGE,
        STG_TAXML.SPOUSE_AGE,
        STG_TAXML.DEPENDENTS_MINIMUM_AGE,
        STG_TAXML.DEPENDENTS_AVERAGE_AGE,
        STG_TAXML.DEPENDENTS_MAXIMUM_AGE,
        STG_TAXML.TAXPAYER_OCCUPATION,
        STG_TAXML.SPOUSE_OCCUPATION,
        STG_TAXML.FED_FORM_TYPE,
        STG_TAXML.W2_COUNT,
        STG_TAXML.AGI,
        STG_TAXML.EXEMPTIONS_NUMBER,
        STG_TAXML.DEPENDENTS_COUNT,
        STG_TAXML.SALARIES_AND_WAGES,
        STG_TAXML.TAXABLE_INTEREST,
        STG_TAXML.TAX_EXEMPT_INTEREST,
        STG_TAXML.ORDINARY_DIVIDEND,
        STG_TAXML.QUALIFIED_DIVIDEND,
        STG_TAXML.TAXABLE_OFFSET,
        STG_TAXML.ALIMONY_INCOME,
        STG_TAXML.BUSINESS_INCOME,
        STG_TAXML.OTHER_GAIN,
        STG_TAXML.FARM_INCOME,
        STG_TAXML.CAPITAL_GAIN,
        STG_TAXML.IRA_DISTRIBUTION,
        STG_TAXML.TAXABLE_IRA,
        STG_TAXML.PENSION,
        STG_TAXML.TAXABLE_PENSION,
        STG_TAXML.SCHEDULE_E_INCOME,
        STG_TAXML.HOUSEHOLD_EMPLOYEE_TAX,
        STG_TAXML.UNEMPLOYMENT_INCOME,
        STG_TAXML.SOCIAL_SECURITY_INCOME,
        STG_TAXML.TAXABLE_SOCIAL_SECURITY_INCOME,
        STG_TAXML.OTHER_INCOME,
        STG_TAXML.TOTAL_INCOME,
        STG_TAXML.SELF_EMPLOYMENT_TAX,
        STG_TAXML.SELF_EMPLOYMENT_RETIREMENT,
        STG_TAXML.TOTAL_DEDUCTIONS,
        STG_TAXML.ITEMIZED_DEDUCTIONS_FLAG,
        STG_TAXML.IRA_DEDUCTION,
        STG_TAXML.STUDENT_LOAN_INTEREST,
        STG_TAXML.STATE_OR_LOCAL_TAX,
        STG_TAXML.STATE_OR_LOCAL_SALES_TAX,
        STG_TAXML.REAL_ESTATE_TAX,
        STG_TAXML.TAXES_PAID_AMOUNT,
        STG_TAXML.MEDICAL_OR_DENTAL_EXPENSES,
        STG_TAXML.MEDICAL_OR_DENTAL_EXPENSES_DEDUCTION,
        STG_TAXML.PERSONAL_PROPERTY_TAX,
        STG_TAXML.OTHER_DEDUCTIBLE_TAX,
        STG_TAXML.MORTGAGE_INTEREST,
        STG_TAXML.MORTGAGE_INTEREST_NON_1098,
        STG_TAXML.MORTGAGE_POINTS_NON_1098,
        STG_TAXML.MORTGAGE_INSURANCE,
        STG_TAXML.INVESTMENT_INTEREST_PAID,
        STG_TAXML.TOTAL_INTEREST_PAID,
        STG_TAXML.CHARITABLE_CONTRIBUTIONS_CASH,
        STG_TAXML.CHARITABLE_CONTRIBUTIONS_NONCASH,
        STG_TAXML.CHARITABLE_CONTRIBUTIONS_CARRYOVER,
        STG_TAXML.CHARITABLE_CONTRIBUTIONS,
        STG_TAXML.CASUALTY_LOSSES,
        STG_TAXML.EMPLOYEE_EXPENSES,
        STG_TAXML.TAX_PREP_FEES,
        STG_TAXML.OTHER_DEDUCTIBLE_EXPENSES,
        STG_TAXML.TOTAL_DEDUCTIBLE_EXPENSES,
        STG_TAXML.EXPENSES_DEDUCTION,
        STG_TAXML.MISCELLANEOUS_DEDUCTIONS,
        STG_TAXML.ITEMIZE_ANYWAY_FLAG,
        STG_TAXML.TAXABLE_INCOME,
        STG_TAXML.SCHEDULE_C_COUNT,
        STG_TAXML.BUSINESS_ACCOUNTING_METHOD_CASH_COUNT,
        STG_TAXML.BUSINESS_ACCOUNTING_METHOD_ACCRUAL_COUNT,
        STG_TAXML.BUSINESS_ACCOUNTING_METHOD_OTHER_COUNT,
        STG_TAXML.BUSINESS_MATERIAL_PARTICIPATION_COUNT,
        STG_TAXML.BUSINESS_START_ACQUIRE_COUNT,
        STG_TAXML.BUSINESS_1099_REQUIRED_COUNT,
        STG_TAXML.BUSINESS_WILL_FILE_1099_COUNT,
        STG_TAXML.BUSINESS_STATUTORY_EMPLOYEE_SELECTED_COUNT,
        STG_TAXML.BUSINESS_GROSS_RECEIPTS_AMOUNT,
        STG_TAXML.BUSINESS_RETURNS_AMOUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS,
        STG_TAXML.BUSINESS_GROSS_PROFIT,
        STG_TAXML.BUSINESS_OTHER_INCOME,
        STG_TAXML.BUSINESS_GROSS_INCOME,
        STG_TAXML.BUSINESS_ADVERTISING_EXPENSE,
        STG_TAXML.BUSINESS_CAR_EXPENSE,
        STG_TAXML.BUSINESS_COMMISSIONS_PAID,
        STG_TAXML.BUSINESS_CONTRACT_LABOR_EXPENSE,
        STG_TAXML.BUSINESS_DEPLETION_EXPENSE,
        STG_TAXML.BUSINESS_DEPRECIATION,
        STG_TAXML.BUSINESS_EMPLOYEE_BENEFITS_PAID,
        STG_TAXML.BUSINESS_INSURANCE_PAID,
        STG_TAXML.BUSINESS_MORTGAGE_INTEREST_PAID,
        STG_TAXML.BUSINESS_OTHER_INTEREST_PAID,
        STG_TAXML.BUSINESS_LEGAL_EXPENSE,
        STG_TAXML.BUSINESS_OFFICE_EXPENSE,
        STG_TAXML.BUSINESS_PENSION_EXPENSE,
        STG_TAXML.BUSINESS_RENTAL_VEHICLES_EXPENSE,
        STG_TAXML.BUSINESS_RENTAL_OTHER_EXPENSE,
        STG_TAXML.BUSINESS_REPAIRS_EXPENSE,
        STG_TAXML.BUSINESS_SUPPLIES_EXPENSE,
        STG_TAXML.BUSINESS_TAXES_PAID,
        STG_TAXML.BUSINESS_TRAVEL_EXPENSE,
        STG_TAXML.BUSINESS_MEALS_EXPENSE,
        STG_TAXML.BUSINESS_UTILITIES_EXPENSE,
        STG_TAXML.BUSINESS_WAGES_PAID,
        STG_TAXML.BUSINESS_OTHER_EXPENSE,
        STG_TAXML.BUSINESS_TOTAL_EXPENSE,
        STG_TAXML.BUSINESS_TENTATIVE_PROFIT,
        STG_TAXML.BUSINESS_USE_OF_HOME_EXPENSES,
        STG_TAXML.BUSINESS_NET_PROFIT,
        STG_TAXML.BUSINESS_INVESTMENT_AT_RISK_TOTAL,
        STG_TAXML.BUSINESS_COST_OF_GOODS_METHOD_COST_COUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS_METHOD_COST_OR_MARKET_COUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS_METHOD_OTHER_COUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS_INVENTORY_START_AMOUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS_PURCHASES,
        STG_TAXML.BUSINESS_COST_OF_GOODS_LABOR,
        STG_TAXML.BUSINESS_COST_OF_GOODS_SUPPLIES,
        STG_TAXML.BUSINESS_COST_OF_GOODS_OTHER_COST,
        STG_TAXML.BUSINESS_COST_OF_GOODS_INVENTORY_END_AMOUNT,
        STG_TAXML.BUSINESS_COST_OF_GOODS_TOTAL_SOLD,
        STG_TAXML.BUSINESS_VEHICLE_MILES_BUSINESS,
        STG_TAXML.BUSINESS_VEHICLE_MILES_COMMUTE,
        STG_TAXML.BUSINESS_VEHICLE_MILES_OTHER,
        STG_TAXML.BUSINESS_VEHICLE_PERSONAL_OFF_DUTY_COUNT,
        STG_TAXML.BUSINESS_VEHICLE_PERSONAL_ANOTHER_COUNT,
        STG_TAXML.BUSINESS_VEHICLES_EVIDENCE_COUNT,
        STG_TAXML.BUSINESS_VEHICLES_WRITTEN_EVIDENCE_COUNT,
        STG_TAXML.SCHEDULE_E_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_REQUIRE_1099_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_WILL_FILE_1099_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SINGLE_FAMILY_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_MULTI_FAMILY_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SHORT_RENTAL_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_COMMERCIAL_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_LAND_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_ROYALTIES_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_SELF_RENTAL_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TYPE_OTHER_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_FAIR_RENTAL_DAYS,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_PERSONAL_DAYS,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_QUALIFIED_JOIN_VENTURE_COUNT,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_RENTAL_INCOME,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_ROYALTY_INCOME,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TOTAL_INCOME,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_ADVERTISING_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TRAVEL_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_CLEANING_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_COMMISSIONS_PAID,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_INSURANCE_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_LEGAL_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_MANAGEMENT_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_MORTGAGE_INTEREST_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_OTHER_INTEREST_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_REPAIRS_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_SUPPLIES_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TAXES_PAID,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_UTILITIES_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_DEPRECIATION_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_TOTAL_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_DEDUCTIBLE_LOSS_EXPENSE,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_PRIOR_YEAR_LOSS,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_PARTNERSHIP_COUNT,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_SCORP_COUNT,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_FOREIGN_PARTNERSHIP_COUNT,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_NOT_AT_RISK_COUNT,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_PASSIVE_LOSS,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_PASSIVE_INCOME,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_LOSS,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_SECTION179_EXPENSE_DEDUCTION,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_NONPASSIVE_INCOME,
        STG_TAXML.SUPPLEMENTAL_PARTNERSHIP_TOTAL_INCOME,
        STG_TAXML.SUPPLEMENTAL_ESTATE_PASSIVE_LOSS,
        STG_TAXML.SUPPLEMENTAL_ESTATE_PASSIVE_INCOME,
        STG_TAXML.SUPPLEMENTAL_ESTATE_NONPASSIVE_LOSS,
        STG_TAXML.SUPPLEMENTAL_ESTATE_NONPASSIVE_INCOME,
        STG_TAXML.SUPPLEMENTAL_ESTATE_TOTAL_INCOME,
        STG_TAXML.SUPPLEMENTAL_REMIC_EXCESS_INCLUSION,
        STG_TAXML.SUPPLEMENTAL_REMIC_TAXABLE_INCOME,
        STG_TAXML.SUPPLEMENTAL_REMIC_SCHEDULE_Q_INCOME,
        STG_TAXML.SUPPLEMENTAL_FARM_RENTAL_INCOME,
        STG_TAXML.SUPPLEMENTAL_FARM_GROSS_INCOME,
        STG_TAXML.SUPPLEMENTAL_REAL_ESTATE_PROFESSIONAL_INCOME,
        STG_TAXML.DISABLED_CREDIT,
        STG_TAXML.TAX_CREDITS,
        STG_TAXML.RESIDENTIAL_ENERGY_CREDIT,
        STG_TAXML.CHILD_CREDIT,
        STG_TAXML.EDUCATION_CREDIT,
        STG_TAXML.TUITION,
        STG_TAXML.EDUCATOR_EXPENSES,
        STG_TAXML.CERTAIN_BUSINESS_EXPENSE,
        STG_TAXML.HSA,
        STG_TAXML.MOVING_EXPENSE,
        STG_TAXML.DEDUCTIBLE_SELF_EMPLOYMENT_TAX,
        STG_TAXML.SELF_EMPLOYMENT_HEALTH_INSURANCE,
        STG_TAXML.EARLY_WITHDRAWAL_PENALTY,
        STG_TAXML.ALIMONY_PAID,
        STG_TAXML.DOMESTIC_PRODUCTION_DEDUCTION,
        STG_TAXML.ADJUSTMENTS,
        STG_TAXML.OLD_OR_BLIND_COUNT,
        STG_TAXML.ITEMIZE_SEPARATELY_FLAG,
        STG_TAXML.EXEMPTION_AMOUNT,
        STG_TAXML.TAX_LIABILITY,
        STG_TAXML.CHILD_CARE_CREDIT,
        STG_TAXML.ADDITIONAL_CHILD_CARE_CREDIT,
        STG_TAXML.RETIREMENT_SAVINGS_CREDIT,
        STG_TAXML.HOPE_CREDIT,
        STG_TAXML.EARNED_INCOME_TAX_CREDIT,
        STG_TAXML.ALTERNATIVE_MINIMUM_TAX,
        STG_TAXML.FOREIGN_TAX_CREDIT,
        STG_TAXML.OTHER_CREDITS,
        STG_TAXML.TOTAL_CREDITS,
        STG_TAXML.UNREPORTED_SOCIAL_SECURITY_OR_MEDICARE_TAX,
        STG_TAXML.RETIRMENT_ADDITIONAL_TAX,
        STG_TAXML.HOMEBUYER_CREDIT_REPAYMENT,
        STG_TAXML.OTHER_TAXES,
        STG_TAXML.INCOME_TAX_WITHHELD,
        STG_TAXML.ESTIMATED_TAX,
        STG_TAXML.NON_TAXABLE_COMBAT_PAY,
        STG_TAXML.PAYMENT_WITH_EXTENSION,
        STG_TAXML.EXCESS_SOCIAL_SECURITY_RRTA_WITHHELD,
        STG_TAXML.FUEL_TAX_CREDIT,
        STG_TAXML.OTHER_PAYMENTS,
        STG_TAXML.TOTAL_PAYMENTS,
        STG_TAXML.ESTIMATED_TAX_PENALTY,
        STG_TAXML.INCOME_TAX,
        STG_TAXML.TOTAL_TAX,
        STG_TAXML.TAX_DUE,
        STG_TAXML.REFUND,
        STG_TAXML.ACA_TAX_CREDIT_REPAYMENT,
        STG_TAXML.ACA_FULL_YEAR_COVERAGE,
        STG_TAXML.ACA_PENALTY,
        STG_TAXML.TAXPAYER_PHONE_AREA_CODE,
        STG_TAXML.TAXPAYER_PHONE_ID,
        STG_TAXML.SPOUSE_PHONE_AREA_CODE,
        STG_TAXML.SPOUSE_PHONE_ID,
        STG_TAXML.W2_OWNER_LIST,
        STG_TAXML.W2_EIN_LIST,
        STG_TAXML.W2_EMPLOYER_LIST,
        STG_TAXML.W2_EMPLOYER_ZIP_LIST,
        STG_TAXML.W2_WAGES_TOTAL,
        STG_TAXML.W2_FED_WITHHELD_TOTAL,
        STG_TAXML.W2_SOCIAL_SECURITY_WAGES_TOTAL,
        STG_TAXML.W2_SOCIAL_SECURITY_WITHHELD_TOTAL,
        STG_TAXML.W2_MEDICARE_WAGES_TOTAL,
        STG_TAXML.W2_MEDICARE_WITHHELD_TOTAL,
        STG_TAXML.W2_SOCIAL_SECURITY_TIPS_TOTAL,
        STG_TAXML.W2_ALLOCATED_TIPS_TOTAL,
        STG_TAXML.W2_STATES_COUNT_LIST,
        STG_TAXML.W2_LOCALITY_COUNT_LIST,
        STG_TAXML.W2_STATE_WAGES_TOTAL,
        STG_TAXML.W2_STATE_TAX_TOTAL,
        STG_TAXML.W2_LOCAL_WAGES_TOTAL,
        STG_TAXML.W2_LOCAL_TAX_TOTAL,
        STG_TAXML.RAW_W2_WAGES,
        STG_TAXML.RAW_W2_FED_WITHHELD,
        STG_TAXML.RAW_W2_SOCIAL_SECURITY_WAGES,
        STG_TAXML.RAW_W2_SOCIAL_SECURITY_WITHHELD,
        STG_TAXML.RAW_W2_MEDICARE_WAGES,
        STG_TAXML.RAW_W2_MEDICARE_WITHHELD,
        STG_TAXML.RAW_W2_SOCIAL_SECURITY_TIPS,
        STG_TAXML.RAW_W2_ALLOCATED_TIPS,
        STG_TAXML.RAW_W2_STATE_WAGES,
        STG_TAXML.RAW_W2_STATE_TAX,
        STG_TAXML.RAW_W2_LOCAL_WAGES,
        STG_TAXML.RAW_W2_LOCAL_TAX,
        STG_TAXML.STATES_COUNT,
        STG_TAXML.RAW_STATES,
        STG_TAXML.TAXPAYER_MILITARY_FLAG,
        STG_TAXML.SPOUSE_MILITARY_FLAG,
        STG_TAXML.IDENTITY_THEFT_PIN_FLAG,
        STG_TAXML.RESIDENT_STATE_RETURNS_COUNT
 FROM CTG_ANALYTICS_STG.STG_TAXML
 ORDER BY STG_TAXML.FILING_ID,
          STG_TAXML.APPLICATION_ASSIGNED_TAXML_ENTITY_ID
SEGMENTED BY hash(STG_TAXML.APPLICATION_ASSIGNED_TAXML_ENTITY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.FACT_MULTIFILER_AUTH_dup_20162206 /*+createtype(A)*/
(
 AUTH_ID,
 TAX_YEAR,
 MULTIFILER_TIMESTAMP,
 MULTIFILER_REASON_ID,
 PARENT_MULTIFILER_REASON_ID,
 GENERATION_NUMBER,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_MULTIFILER_AUTH_dup_20162206.AUTH_ID,
        FACT_MULTIFILER_AUTH_dup_20162206.TAX_YEAR,
        FACT_MULTIFILER_AUTH_dup_20162206.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_AUTH_dup_20162206.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH_dup_20162206.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_AUTH_dup_20162206.GENERATION_NUMBER,
        FACT_MULTIFILER_AUTH_dup_20162206.BATCH_EVENT_ID,
        FACT_MULTIFILER_AUTH_dup_20162206.CREATED_TIMESTAMP,
        FACT_MULTIFILER_AUTH_dup_20162206.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.FACT_MULTIFILER_AUTH_dup_20162206
 ORDER BY FACT_MULTIFILER_AUTH_dup_20162206.AUTH_ID,
          FACT_MULTIFILER_AUTH_dup_20162206.MULTIFILER_TIMESTAMP
SEGMENTED BY hash(FACT_MULTIFILER_AUTH_dup_20162206.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.FACT_MULTIFILER_VISITOR_dup_20162206 /*+createtype(A)*/
(
 VISITOR_OMT_ID,
 TAX_YEAR,
 MULTIFILER_TIMESTAMP,
 MULTIFILER_REASON_ID,
 PARENT_MULTIFILER_REASON_ID,
 GENERATION_NUMBER,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_MULTIFILER_VISITOR_dup_20162206.VISITOR_OMT_ID,
        FACT_MULTIFILER_VISITOR_dup_20162206.TAX_YEAR,
        FACT_MULTIFILER_VISITOR_dup_20162206.MULTIFILER_TIMESTAMP,
        FACT_MULTIFILER_VISITOR_dup_20162206.MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR_dup_20162206.PARENT_MULTIFILER_REASON_ID,
        FACT_MULTIFILER_VISITOR_dup_20162206.GENERATION_NUMBER,
        FACT_MULTIFILER_VISITOR_dup_20162206.BATCH_EVENT_ID,
        FACT_MULTIFILER_VISITOR_dup_20162206.CREATED_TIMESTAMP,
        FACT_MULTIFILER_VISITOR_dup_20162206.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.FACT_MULTIFILER_VISITOR_dup_20162206
 ORDER BY FACT_MULTIFILER_VISITOR_dup_20162206.VISITOR_OMT_ID
SEGMENTED BY hash(FACT_MULTIFILER_VISITOR_dup_20162206.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_COST_CAMELOT_20160705 /*+createtype(A)*/
(
 CAMPAIGN_DATE,
 CID,
 COST,
 CLICKS,
 IMPRESSIONS,
 CREATED_TIMESTAMP,
 BATCH_EVENT_ID,
 UPDATED_TIMESTAMP,
 AUDIT_INS_BY
)
AS
 SELECT TRN_COST_CAMELOT_20160705.CAMPAIGN_DATE,
        TRN_COST_CAMELOT_20160705.CID,
        TRN_COST_CAMELOT_20160705.COST,
        TRN_COST_CAMELOT_20160705.CLICKS,
        TRN_COST_CAMELOT_20160705.IMPRESSIONS,
        TRN_COST_CAMELOT_20160705.CREATED_TIMESTAMP,
        TRN_COST_CAMELOT_20160705.BATCH_EVENT_ID,
        TRN_COST_CAMELOT_20160705.UPDATED_TIMESTAMP,
        TRN_COST_CAMELOT_20160705.AUDIT_INS_BY
 FROM CTG_ANALYTICS_SRC.TRN_COST_CAMELOT_20160705
 ORDER BY TRN_COST_CAMELOT_20160705.CAMPAIGN_DATE,
          TRN_COST_CAMELOT_20160705.CID,
          TRN_COST_CAMELOT_20160705.COST,
          TRN_COST_CAMELOT_20160705.CLICKS,
          TRN_COST_CAMELOT_20160705.IMPRESSIONS,
          TRN_COST_CAMELOT_20160705.CREATED_TIMESTAMP,
          TRN_COST_CAMELOT_20160705.BATCH_EVENT_ID,
          TRN_COST_CAMELOT_20160705.UPDATED_TIMESTAMP,
          TRN_COST_CAMELOT_20160705.AUDIT_INS_BY
SEGMENTED BY hash(TRN_COST_CAMELOT_20160705.CAMPAIGN_DATE, TRN_COST_CAMELOT_20160705.CLICKS, TRN_COST_CAMELOT_20160705.IMPRESSIONS, TRN_COST_CAMELOT_20160705.CREATED_TIMESTAMP, TRN_COST_CAMELOT_20160705.BATCH_EVENT_ID, TRN_COST_CAMELOT_20160705.UPDATED_TIMESTAMP, TRN_COST_CAMELOT_20160705.COST, TRN_COST_CAMELOT_20160705.AUDIT_INS_BY, TRN_COST_CAMELOT_20160705.CID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.PRE_STG_TTO_PRS_VERBATIM /*+createtype(L)*/
(
 PRS_DATE,
 AUTH_ID,
 PRODUCT_ENGINE,
 VERBATIM,
 BATCH_EVENT_ID
)
AS
 SELECT PRE_STG_TTO_PRS_VERBATIM.PRS_DATE,
        PRE_STG_TTO_PRS_VERBATIM.AUTH_ID,
        PRE_STG_TTO_PRS_VERBATIM.PRODUCT_ENGINE,
        PRE_STG_TTO_PRS_VERBATIM.VERBATIM,
        PRE_STG_TTO_PRS_VERBATIM.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.PRE_STG_TTO_PRS_VERBATIM
 ORDER BY PRE_STG_TTO_PRS_VERBATIM.PRS_DATE,
          PRE_STG_TTO_PRS_VERBATIM.AUTH_ID,
          PRE_STG_TTO_PRS_VERBATIM.PRODUCT_ENGINE,
          PRE_STG_TTO_PRS_VERBATIM.VERBATIM,
          PRE_STG_TTO_PRS_VERBATIM.BATCH_EVENT_ID
SEGMENTED BY hash(PRE_STG_TTO_PRS_VERBATIM.BATCH_EVENT_ID, PRE_STG_TTO_PRS_VERBATIM.PRS_DATE, PRE_STG_TTO_PRS_VERBATIM.AUTH_ID, PRE_STG_TTO_PRS_VERBATIM.PRODUCT_ENGINE, PRE_STG_TTO_PRS_VERBATIM.VERBATIM) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK
(
 ITEM_ALIAS_RANK_ID,
 ITEM_ALIAS_CODE,
 ITEM_ALIAS_RANK,
 TAX_YEAR,
 BATCH_EVENT_ID ENCODING COMMONDELTA_COMP,
 CREATED_TIMESTAMP ENCODING COMMONDELTA_COMP,
 UPDATED_TIMESTAMP ENCODING COMMONDELTA_COMP
)
AS
 SELECT LKP_ITEM_ALIAS_RANK.ITEM_ALIAS_RANK_ID,
        LKP_ITEM_ALIAS_RANK.ITEM_ALIAS_CODE,
        LKP_ITEM_ALIAS_RANK.ITEM_ALIAS_RANK,
        LKP_ITEM_ALIAS_RANK.TAX_YEAR,
        LKP_ITEM_ALIAS_RANK.BATCH_EVENT_ID,
        LKP_ITEM_ALIAS_RANK.CREATED_TIMESTAMP,
        LKP_ITEM_ALIAS_RANK.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK
 ORDER BY LKP_ITEM_ALIAS_RANK.ITEM_ALIAS_RANK_ID
SEGMENTED BY hash(LKP_ITEM_ALIAS_RANK.ITEM_ALIAS_CODE) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_TAX_RETURN_SUMMARY /*+createtype(P)*/
(
 TRANS_ID,
 AUTH_ID,
 TY_YEAR,
 HIT_TIMESTAMP,
 PROP17,
 PROP18,
 PROP29,
 PROP30,
 BATCH_EVENT_ID
)
AS
 SELECT STG_TAX_RETURN_SUMMARY.TRANS_ID,
        STG_TAX_RETURN_SUMMARY.AUTH_ID,
        STG_TAX_RETURN_SUMMARY.TY_YEAR,
        STG_TAX_RETURN_SUMMARY.HIT_TIMESTAMP,
        STG_TAX_RETURN_SUMMARY.PROP17,
        STG_TAX_RETURN_SUMMARY.PROP18,
        STG_TAX_RETURN_SUMMARY.PROP29,
        STG_TAX_RETURN_SUMMARY.PROP30,
        STG_TAX_RETURN_SUMMARY.BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_TAX_RETURN_SUMMARY
 ORDER BY STG_TAX_RETURN_SUMMARY.TY_YEAR,
          STG_TAX_RETURN_SUMMARY.TRANS_ID
SEGMENTED BY hash(STG_TAX_RETURN_SUMMARY.TRANS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_CID_UPLOAD_DATA /*+createtype(P)*/
(
 CHANNEL,
 CID,
 CID1,
 CID2,
 CID3,
 CID4,
 CID5,
 CID6,
 CID7,
 CID8,
 VENUE,
 SEGMENT,
 SUBVENUE
)
AS
 SELECT STG_CID_UPLOAD_DATA.CHANNEL,
        STG_CID_UPLOAD_DATA.CID,
        STG_CID_UPLOAD_DATA.CID1,
        STG_CID_UPLOAD_DATA.CID2,
        STG_CID_UPLOAD_DATA.CID3,
        STG_CID_UPLOAD_DATA.CID4,
        STG_CID_UPLOAD_DATA.CID5,
        STG_CID_UPLOAD_DATA.CID6,
        STG_CID_UPLOAD_DATA.CID7,
        STG_CID_UPLOAD_DATA.CID8,
        STG_CID_UPLOAD_DATA.VENUE,
        STG_CID_UPLOAD_DATA.SEGMENT,
        STG_CID_UPLOAD_DATA.SUBVENUE
 FROM CTG_ANALYTICS_STG.STG_CID_UPLOAD_DATA
 ORDER BY STG_CID_UPLOAD_DATA.CHANNEL,
          STG_CID_UPLOAD_DATA.CID,
          STG_CID_UPLOAD_DATA.CID1,
          STG_CID_UPLOAD_DATA.CID2,
          STG_CID_UPLOAD_DATA.CID3,
          STG_CID_UPLOAD_DATA.CID4,
          STG_CID_UPLOAD_DATA.CID5,
          STG_CID_UPLOAD_DATA.CID6,
          STG_CID_UPLOAD_DATA.CID7,
          STG_CID_UPLOAD_DATA.CID8,
          STG_CID_UPLOAD_DATA.VENUE,
          STG_CID_UPLOAD_DATA.SEGMENT,
          STG_CID_UPLOAD_DATA.SUBVENUE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY /*+createtype(P)*/
(
 TAX_RETURN_STATE_SUMMARY_ID,
 CLICKSTREAM_ID,
 AUTH_ID,
 TAX_RETURN_FED_SUMMARY_ID,
 TAX_YEAR,
 SEQUENCE_NUMBER,
 STATE_CODE,
 STATE_ID,
 REFUND_AMOUNT,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_TAX_RETURN_STATE_SUMMARY.TAX_RETURN_STATE_SUMMARY_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.CLICKSTREAM_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.AUTH_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.TAX_RETURN_FED_SUMMARY_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.TAX_YEAR,
        FACT_TAX_RETURN_STATE_SUMMARY.SEQUENCE_NUMBER,
        FACT_TAX_RETURN_STATE_SUMMARY.STATE_CODE,
        FACT_TAX_RETURN_STATE_SUMMARY.STATE_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.REFUND_AMOUNT,
        FACT_TAX_RETURN_STATE_SUMMARY.BATCH_EVENT_ID,
        FACT_TAX_RETURN_STATE_SUMMARY.CREATED_TIMESTAMP,
        FACT_TAX_RETURN_STATE_SUMMARY.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_TAX_RETURN_STATE_SUMMARY
 ORDER BY FACT_TAX_RETURN_STATE_SUMMARY.CLICKSTREAM_ID,
          FACT_TAX_RETURN_STATE_SUMMARY.TAX_RETURN_FED_SUMMARY_ID
SEGMENTED BY hash(FACT_TAX_RETURN_STATE_SUMMARY.TAX_RETURN_FED_SUMMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST /*+createtype(P)*/
(
 AUTH_ID_TAX_RETURN_SUMMARY_LAST_ID,
 AUTH_ID,
 TAX_YEAR,
 TAX_RETURN_FED_SUMMARY_ID,
 LAST_TAX_RETURN_TIMESTAMP,
 LAST_TAX_RETURN_TAX_DATE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.AUTH_ID_TAX_RETURN_SUMMARY_LAST_ID,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.AUTH_ID,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.TAX_YEAR,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.TAX_RETURN_FED_SUMMARY_ID,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.LAST_TAX_RETURN_TIMESTAMP,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.LAST_TAX_RETURN_TAX_DATE_ID,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.BATCH_EVENT_ID,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.CREATED_TIMESTAMP,
        SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST
 ORDER BY SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.TAX_YEAR,
          SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.AUTH_ID
SEGMENTED BY hash(SUB_AUTH_ID_TAX_RETURN_SUMMARY_LAST.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 RANKED_FED_ACCEPTED_TIMESTAMP,
 AVG_FED_REFUND_AMOUNT,
 RANKED_FED_EFILE_PAYMENT_METHOD_ID,
 RANKED_FED_EFILE_PAYMENT_METHOD,
 RANKED_STATE_ACCEPTED_TIMESTAMP,
 AVG_STATE_REFUND_AMOUNT,
 RANKED_STATE_EFILE_PAYMENT_METHOD_ID,
 RANKED_STATE_EFILE_PAYMENT_METHOD,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_AUTH_ID_ACCEPTED_REFUND.AUTH_ID,
        AGG_AUTH_ID_ACCEPTED_REFUND.TAX_YEAR,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_FED_ACCEPTED_TIMESTAMP,
        AGG_AUTH_ID_ACCEPTED_REFUND.AVG_FED_REFUND_AMOUNT,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_FED_EFILE_PAYMENT_METHOD_ID,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_FED_EFILE_PAYMENT_METHOD,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_STATE_ACCEPTED_TIMESTAMP,
        AGG_AUTH_ID_ACCEPTED_REFUND.AVG_STATE_REFUND_AMOUNT,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_STATE_EFILE_PAYMENT_METHOD_ID,
        AGG_AUTH_ID_ACCEPTED_REFUND.RANKED_STATE_EFILE_PAYMENT_METHOD,
        AGG_AUTH_ID_ACCEPTED_REFUND.BATCH_EVENT_ID,
        AGG_AUTH_ID_ACCEPTED_REFUND.CREATED_TIMESTAMP,
        AGG_AUTH_ID_ACCEPTED_REFUND.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_AUTH_ID_ACCEPTED_REFUND
 ORDER BY AGG_AUTH_ID_ACCEPTED_REFUND.AUTH_ID,
          AGG_AUTH_ID_ACCEPTED_REFUND.TAX_YEAR
SEGMENTED BY hash(AGG_AUTH_ID_ACCEPTED_REFUND.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP /*+createtype(P)*/
(
 AGG_SESSION_PAGE_GROUP_ID,
 SESSION_ID,
 VISITOR_OMT_ID,
 VISITOR_ID,
 VISIT_NUM,
 SESSION_KEY,
 SESSION_OMT_KEY,
 TAX_YEAR,
 PAGE_GROUP,
 FIRST_PAGE_URL,
 FIRST_PAGE_URL_ID,
 FIRST_PAGE_SERVER_TIMESTAMP,
 FIRST_PAGE_TAX_DATE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT AGG_SESSION_PAGE_GROUP.AGG_SESSION_PAGE_GROUP_ID,
        AGG_SESSION_PAGE_GROUP.SESSION_ID,
        AGG_SESSION_PAGE_GROUP.VISITOR_OMT_ID,
        AGG_SESSION_PAGE_GROUP.VISITOR_ID,
        AGG_SESSION_PAGE_GROUP.VISIT_NUM,
        AGG_SESSION_PAGE_GROUP.SESSION_KEY,
        AGG_SESSION_PAGE_GROUP.SESSION_OMT_KEY,
        AGG_SESSION_PAGE_GROUP.TAX_YEAR,
        AGG_SESSION_PAGE_GROUP.PAGE_GROUP,
        AGG_SESSION_PAGE_GROUP.FIRST_PAGE_URL,
        AGG_SESSION_PAGE_GROUP.FIRST_PAGE_URL_ID,
        AGG_SESSION_PAGE_GROUP.FIRST_PAGE_SERVER_TIMESTAMP,
        AGG_SESSION_PAGE_GROUP.FIRST_PAGE_TAX_DATE_ID,
        AGG_SESSION_PAGE_GROUP.BATCH_EVENT_ID,
        AGG_SESSION_PAGE_GROUP.CREATED_TIMESTAMP,
        AGG_SESSION_PAGE_GROUP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_SESSION_PAGE_GROUP
 ORDER BY AGG_SESSION_PAGE_GROUP.VISITOR_OMT_ID,
          AGG_SESSION_PAGE_GROUP.VISIT_NUM,
          AGG_SESSION_PAGE_GROUP.TAX_YEAR
SEGMENTED BY hash(AGG_SESSION_PAGE_GROUP.VISITOR_OMT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE /*+createtype(P)*/
(
 SESSION_AUTH_TYPE_ID,
 SESSION_AUTH_TYPE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_SESSION_AUTH_TYPE.SESSION_AUTH_TYPE_ID,
        DIM_SESSION_AUTH_TYPE.SESSION_AUTH_TYPE,
        DIM_SESSION_AUTH_TYPE.BATCH_EVENT_ID,
        DIM_SESSION_AUTH_TYPE.CREATED_TIMESTAMP,
        DIM_SESSION_AUTH_TYPE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_SESSION_AUTH_TYPE
 ORDER BY DIM_SESSION_AUTH_TYPE.SESSION_AUTH_TYPE_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.DIM_EFILE_REJECT_CODE /*+createtype(P)*/
(
 EFILE_REJECT_CODE_ID,
 FILING_TYPE_ID,
 TAX_YEAR,
 ERROR_CODE,
 ERROR_MSG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EFILE_REJECT_CODE.EFILE_REJECT_CODE_ID,
        DIM_EFILE_REJECT_CODE.FILING_TYPE_ID,
        DIM_EFILE_REJECT_CODE.TAX_YEAR,
        DIM_EFILE_REJECT_CODE.ERROR_CODE,
        DIM_EFILE_REJECT_CODE.ERROR_MSG,
        DIM_EFILE_REJECT_CODE.BATCH_EVENT_ID,
        DIM_EFILE_REJECT_CODE.CREATED_TIMESTAMP,
        DIM_EFILE_REJECT_CODE.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EFILE_REJECT_CODE
 ORDER BY DIM_EFILE_REJECT_CODE.TAX_YEAR,
          DIM_EFILE_REJECT_CODE.FILING_TYPE_ID,
          DIM_EFILE_REJECT_CODE.ERROR_CODE
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR /*+createtype(P)*/
(
 EFILE_REJECT_ERROR_ID,
 FILING_ID,
 TAX_YEAR,
 CHANGE_ID,
 SEQUENCE_NUMBER,
 EFILE_STATUS_TAX_DATE_ID,
 EFILE_STATUS_TIMESTAMP,
 TAXFILER_ID,
 PRIMARY_ID,
 AUTH_ID,
 FILING_TYPE_ID,
 EFILE_REJECT_CODE_ID,
 FIELD,
 EFILE_REJECT_ERROR_FIELD_KEYWORD_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_EFILE_REJECT_ERROR.EFILE_REJECT_ERROR_ID,
        FACT_EFILE_REJECT_ERROR.FILING_ID,
        FACT_EFILE_REJECT_ERROR.TAX_YEAR,
        FACT_EFILE_REJECT_ERROR.CHANGE_ID,
        FACT_EFILE_REJECT_ERROR.SEQUENCE_NUMBER,
        FACT_EFILE_REJECT_ERROR.EFILE_STATUS_TAX_DATE_ID,
        FACT_EFILE_REJECT_ERROR.EFILE_STATUS_TIMESTAMP,
        FACT_EFILE_REJECT_ERROR.TAXFILER_ID,
        FACT_EFILE_REJECT_ERROR.PRIMARY_ID,
        FACT_EFILE_REJECT_ERROR.AUTH_ID,
        FACT_EFILE_REJECT_ERROR.FILING_TYPE_ID,
        FACT_EFILE_REJECT_ERROR.EFILE_REJECT_CODE_ID,
        FACT_EFILE_REJECT_ERROR.FIELD,
        FACT_EFILE_REJECT_ERROR.EFILE_REJECT_ERROR_FIELD_KEYWORD_ID,
        FACT_EFILE_REJECT_ERROR.BATCH_EVENT_ID,
        FACT_EFILE_REJECT_ERROR.CREATED_TIMESTAMP,
        FACT_EFILE_REJECT_ERROR.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_EFILE_REJECT_ERROR
 ORDER BY FACT_EFILE_REJECT_ERROR.FILING_ID,
          FACT_EFILE_REJECT_ERROR.TAX_YEAR,
          FACT_EFILE_REJECT_ERROR.AUTH_ID,
          FACT_EFILE_REJECT_ERROR.PRIMARY_ID
SEGMENTED BY hash(FACT_EFILE_REJECT_ERROR.PRIMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD /*+createtype(P)*/
(
 EFILE_REJECT_ERROR_FIELD_KEYWORD_ID,
 FIELD_KEYWORD,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.EFILE_REJECT_ERROR_FIELD_KEYWORD_ID,
        DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.FIELD_KEYWORD,
        DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.BATCH_EVENT_ID,
        DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.CREATED_TIMESTAMP,
        DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD
 ORDER BY DIM_EFILE_REJECT_ERROR_FIELD_KEYWORD.FIELD_KEYWORD
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.TRN_RAW_FLEX_GETDATA_UPLOAD /*+createtype(P)*/
(
 __identity__,
 __raw__
)
AS
 SELECT TRN_RAW_FLEX_GETDATA_UPLOAD.__identity__,
        TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__
 FROM CTG_ANALYTICS_STG.TRN_RAW_FLEX_GETDATA_UPLOAD
 ORDER BY TRN_RAW_FLEX_GETDATA_UPLOAD.__identity__
SEGMENTED BY hash(TRN_RAW_FLEX_GETDATA_UPLOAD.__identity__) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT /*+createtype(P)*/
(
 UNLOCK_LOGIN_EXTRACT_ID,
 AUTH_ID,
 FIRST_LOGIN_TIMESTAMP,
 LAST_LOGIN_TIMESTAMP,
 YEAR,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_UNLOCK_LOGIN_EXTRACT.UNLOCK_LOGIN_EXTRACT_ID,
        TRN_UNLOCK_LOGIN_EXTRACT.AUTH_ID,
        TRN_UNLOCK_LOGIN_EXTRACT.FIRST_LOGIN_TIMESTAMP,
        TRN_UNLOCK_LOGIN_EXTRACT.LAST_LOGIN_TIMESTAMP,
        TRN_UNLOCK_LOGIN_EXTRACT.YEAR,
        TRN_UNLOCK_LOGIN_EXTRACT.BATCH_EVENT_ID,
        TRN_UNLOCK_LOGIN_EXTRACT.CREATED_TIMESTAMP,
        TRN_UNLOCK_LOGIN_EXTRACT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_UNLOCK_LOGIN_EXTRACT
 ORDER BY TRN_UNLOCK_LOGIN_EXTRACT.UNLOCK_LOGIN_EXTRACT_ID
SEGMENTED BY hash(TRN_UNLOCK_LOGIN_EXTRACT.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.dups_clickid /*+createtype(P)*/
(
 CLICKSTREAM_ID,
 VISITOR_OMT_ID,
 VISITOR_IVID_ID,
 AUTH_ID,
 AUTH_ID_SOURCE_ID,
 SERVER_TIMESTAMP,
 TAX_DATE_ID,
 TAX_YEAR,
 PAGE_ID,
 PAGE_URL_ID,
 REFERRER_PAGE_URL_ID,
 FORM_ID,
 CAMPAIGN_ID,
 VISIT_NUM,
 USER_AGENT_ID,
 NONFFA_FLAG,
 VALID_FOR_FIRST_VISIT_FLAG,
 POST_KEYWORD_ID,
 START_EXPERIENCE,
 SOURCE_APPLICATION_ID,
 GEO_LOCATION_ID,
 IP_ADDRESS,
 PURCHASE_FLAG,
 SITE_AREA_ID,
 HELP_USAGE_ID,
 SCREEN_ID,
 PRIOR_YEAR_TAXPREP_METHOD_ID,
 PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
 EXPERIENCE_ID,
 EXPERIENCE_RENDERED_ID,
 AB_TEST_ID,
 RECIPE_ID,
 PRIORITY_CODE_ID,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT dups_clickid.CLICKSTREAM_ID,
        dups_clickid.VISITOR_OMT_ID,
        dups_clickid.VISITOR_IVID_ID,
        dups_clickid.AUTH_ID,
        dups_clickid.AUTH_ID_SOURCE_ID,
        dups_clickid.SERVER_TIMESTAMP,
        dups_clickid.TAX_DATE_ID,
        dups_clickid.TAX_YEAR,
        dups_clickid.PAGE_ID,
        dups_clickid.PAGE_URL_ID,
        dups_clickid.REFERRER_PAGE_URL_ID,
        dups_clickid.FORM_ID,
        dups_clickid.CAMPAIGN_ID,
        dups_clickid.VISIT_NUM,
        dups_clickid.USER_AGENT_ID,
        dups_clickid.NONFFA_FLAG,
        dups_clickid.VALID_FOR_FIRST_VISIT_FLAG,
        dups_clickid.POST_KEYWORD_ID,
        dups_clickid.START_EXPERIENCE,
        dups_clickid.SOURCE_APPLICATION_ID,
        dups_clickid.GEO_LOCATION_ID,
        dups_clickid.IP_ADDRESS,
        dups_clickid.PURCHASE_FLAG,
        dups_clickid.SITE_AREA_ID,
        dups_clickid.HELP_USAGE_ID,
        dups_clickid.SCREEN_ID,
        dups_clickid.PRIOR_YEAR_TAXPREP_METHOD_ID,
        dups_clickid.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
        dups_clickid.EXPERIENCE_ID,
        dups_clickid.EXPERIENCE_RENDERED_ID,
        dups_clickid.AB_TEST_ID,
        dups_clickid.RECIPE_ID,
        dups_clickid.PRIORITY_CODE_ID,
        dups_clickid.BATCH_EVENT_ID,
        dups_clickid.CREATED_TIMESTAMP,
        dups_clickid.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.dups_clickid
 ORDER BY dups_clickid.CLICKSTREAM_ID,
          dups_clickid.VISITOR_OMT_ID,
          dups_clickid.VISITOR_IVID_ID,
          dups_clickid.AUTH_ID,
          dups_clickid.AUTH_ID_SOURCE_ID,
          dups_clickid.SERVER_TIMESTAMP,
          dups_clickid.TAX_DATE_ID,
          dups_clickid.TAX_YEAR,
          dups_clickid.PAGE_ID,
          dups_clickid.PAGE_URL_ID,
          dups_clickid.REFERRER_PAGE_URL_ID,
          dups_clickid.FORM_ID,
          dups_clickid.CAMPAIGN_ID,
          dups_clickid.VISIT_NUM,
          dups_clickid.USER_AGENT_ID,
          dups_clickid.NONFFA_FLAG,
          dups_clickid.VALID_FOR_FIRST_VISIT_FLAG,
          dups_clickid.POST_KEYWORD_ID,
          dups_clickid.START_EXPERIENCE,
          dups_clickid.SOURCE_APPLICATION_ID,
          dups_clickid.GEO_LOCATION_ID,
          dups_clickid.IP_ADDRESS,
          dups_clickid.PURCHASE_FLAG,
          dups_clickid.SITE_AREA_ID,
          dups_clickid.HELP_USAGE_ID,
          dups_clickid.SCREEN_ID,
          dups_clickid.PRIOR_YEAR_TAXPREP_METHOD_ID,
          dups_clickid.PRIOR_YEAR_TAXPREP_METHOD_SOURCE_ID,
          dups_clickid.EXPERIENCE_ID,
          dups_clickid.EXPERIENCE_RENDERED_ID,
          dups_clickid.AB_TEST_ID,
          dups_clickid.RECIPE_ID,
          dups_clickid.PRIORITY_CODE_ID,
          dups_clickid.BATCH_EVENT_ID,
          dups_clickid.CREATED_TIMESTAMP,
          dups_clickid.UPDATED_TIMESTAMP
SEGMENTED BY hash(dups_clickid.CLICKSTREAM_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER_super /*+basename(ETL_GETDATA_UPLOAD_SOURCE_FOLDER),createtype(P)*/
(
 ID,
 SOURCE_FOLDER,
 PROCESSED
)
AS
 SELECT ETL_GETDATA_UPLOAD_SOURCE_FOLDER.ID,
        ETL_GETDATA_UPLOAD_SOURCE_FOLDER.SOURCE_FOLDER,
        ETL_GETDATA_UPLOAD_SOURCE_FOLDER.PROCESSED
 FROM CTG_ANALYTICS_ADMIN.ETL_GETDATA_UPLOAD_SOURCE_FOLDER
 ORDER BY ETL_GETDATA_UPLOAD_SOURCE_FOLDER.SOURCE_FOLDER
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_GETDATA_UPLOAD_FOLDER_LIST_super /*+basename(STG_GETDATA_UPLOAD_FOLDER_LIST),createtype(P)*/
(
 SOURCE_FOLDER
)
AS
 SELECT STG_GETDATA_UPLOAD_FOLDER_LIST.SOURCE_FOLDER
 FROM CTG_ANALYTICS_STG.STG_GETDATA_UPLOAD_FOLDER_LIST
 ORDER BY STG_GETDATA_UPLOAD_FOLDER_LIST.SOURCE_FOLDER
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION /*+createtype(P)*/
(
 GETDATA_FORM_GENERIC_INFORMATION_ID,
 TID,
 AUTH_ID,
 ALTERNATE_ID,
 RAW_TIMESTAMP,
 REQUEST_TIMESTAMP,
 RAW_TAX_YEAR,
 TAX_YEAR,
 EVENT_HEADER_EVENT_ID,
 EVENT_HEADER_EVENT_TIMESTAMP,
 EVENT_HEADER_RAW_EVENT_TIMESTAMP,
 EVENT_HEADER_SERVER_TIMESTAMP,
 EVENT_HEADER_RAW_SERVER_TIMESTAMP,
 EVENT_HEADER_VERSION,
 EVENT_HEADER_APP_ID,
 EVENT_HEADER_APP_NAME,
 EVENT_HEADER_OFFERING_ID,
 EVENT_HEADER_ACCEPT_LANGUAGE,
 EVENT_HEADER_SERVER_IP_ADDRESS,
 EVENT_HEADER_TOPIC_NAME,
 EVENT_HEADER_CLIENT_IP_ADDRESS,
 CLIENT,
 DOC_TYPE,
 DOC_CATEGORY,
 HTTP_STATUS,
 PROD_OR_TEST,
 USER_AGENT,
 DOCUMENT_ID,
 FED_ID,
 FIELDS_RECOGNIZED_COUNT,
 IMPORT_DRIVER,
 IVID_CLIENT,
 IVID_SERVER,
 OMT_VISITOR_ID,
 PROCESSING_TIME_IN_MS,
 SUCCEEDED,
 TOPIC,
 ERROR_MESSAGE,
 STATUS_SOURCE,
 STATUS_CODE,
 STATUS_SEVERITY,
 STATUS_MESSAGE,
 GETDATA_FORMAT_VERSION,
 SERVICE_TYPE,
 PARTNER,
 PARTNER_TYPE,
 TURNAROUND_TIME_IN_MS,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_GETDATA_FORM_GENERIC_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.TID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.AUTH_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.ALTERNATE_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.RAW_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.REQUEST_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.RAW_TAX_YEAR,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.TAX_YEAR,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_EVENT_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_EVENT_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_RAW_EVENT_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_SERVER_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_RAW_SERVER_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_VERSION,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_APP_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_APP_NAME,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_OFFERING_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_ACCEPT_LANGUAGE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_SERVER_IP_ADDRESS,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_TOPIC_NAME,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.EVENT_HEADER_CLIENT_IP_ADDRESS,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.CLIENT,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.DOC_TYPE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.DOC_CATEGORY,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.HTTP_STATUS,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.PROD_OR_TEST,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.USER_AGENT,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.DOCUMENT_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.FED_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.FIELDS_RECOGNIZED_COUNT,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.IMPORT_DRIVER,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.IVID_CLIENT,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.IVID_SERVER,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.OMT_VISITOR_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.PROCESSING_TIME_IN_MS,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.SUCCEEDED,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.TOPIC,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.ERROR_MESSAGE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.STATUS_SOURCE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.STATUS_CODE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.STATUS_SEVERITY,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.STATUS_MESSAGE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.GETDATA_FORMAT_VERSION,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.SERVICE_TYPE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.PARTNER,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.PARTNER_TYPE,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.TURNAROUND_TIME_IN_MS,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.BATCH_EVENT_ID,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.CREATED_TIMESTAMP,
        TRN_GETDATA_FORM_GENERIC_INFORMATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_GENERIC_INFORMATION
 ORDER BY TRN_GETDATA_FORM_GENERIC_INFORMATION.TAX_YEAR,
          TRN_GETDATA_FORM_GENERIC_INFORMATION.DOC_CATEGORY,
          TRN_GETDATA_FORM_GENERIC_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID
SEGMENTED BY hash(TRN_GETDATA_FORM_GENERIC_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.REJ_GETDATA_RAW_FLEX /*+createtype(P)*/
(
 FLEX_IDENTITY,
 SERVICE_TYPE,
 __RAW__,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP
)
AS
 SELECT REJ_GETDATA_RAW_FLEX.FLEX_IDENTITY,
        REJ_GETDATA_RAW_FLEX.SERVICE_TYPE,
        REJ_GETDATA_RAW_FLEX.__RAW__,
        REJ_GETDATA_RAW_FLEX.BATCH_EVENT_ID,
        REJ_GETDATA_RAW_FLEX.CREATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.REJ_GETDATA_RAW_FLEX
 ORDER BY REJ_GETDATA_RAW_FLEX.FLEX_IDENTITY
SEGMENTED BY hash(REJ_GETDATA_RAW_FLEX.FLEX_IDENTITY) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION /*+createtype(P)*/
(
 GETDATA_FORM_FIELD_INFORMATION,
 GETDATA_FORM_GENERIC_INFORMATION_ID,
 DOC_TYPE,
 DOC_CATEGORY,
 REQUEST_TIMESTAMP,
 FIELD_POSITION_INDEX,
 FIELD_NAME,
 FIELD_TYPE,
 FIELD_VALUE,
 CONFIDENCE_SCORE,
 HAS_VALUE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT TRN_GETDATA_FORM_FIELD_INFORMATION.GETDATA_FORM_FIELD_INFORMATION,
        TRN_GETDATA_FORM_FIELD_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID,
        TRN_GETDATA_FORM_FIELD_INFORMATION.DOC_TYPE,
        TRN_GETDATA_FORM_FIELD_INFORMATION.DOC_CATEGORY,
        TRN_GETDATA_FORM_FIELD_INFORMATION.REQUEST_TIMESTAMP,
        TRN_GETDATA_FORM_FIELD_INFORMATION.FIELD_POSITION_INDEX,
        TRN_GETDATA_FORM_FIELD_INFORMATION.FIELD_NAME,
        TRN_GETDATA_FORM_FIELD_INFORMATION.FIELD_TYPE,
        TRN_GETDATA_FORM_FIELD_INFORMATION.FIELD_VALUE,
        TRN_GETDATA_FORM_FIELD_INFORMATION.CONFIDENCE_SCORE,
        TRN_GETDATA_FORM_FIELD_INFORMATION.HAS_VALUE,
        TRN_GETDATA_FORM_FIELD_INFORMATION.BATCH_EVENT_ID,
        TRN_GETDATA_FORM_FIELD_INFORMATION.CREATED_TIMESTAMP,
        TRN_GETDATA_FORM_FIELD_INFORMATION.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TRN_GETDATA_FORM_FIELD_INFORMATION
 ORDER BY TRN_GETDATA_FORM_FIELD_INFORMATION.HAS_VALUE,
          TRN_GETDATA_FORM_FIELD_INFORMATION.DOC_CATEGORY,
          TRN_GETDATA_FORM_FIELD_INFORMATION.DOC_TYPE,
          TRN_GETDATA_FORM_FIELD_INFORMATION.FIELD_TYPE,
          TRN_GETDATA_FORM_FIELD_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID
SEGMENTED BY hash(TRN_GETDATA_FORM_FIELD_INFORMATION.GETDATA_FORM_GENERIC_INFORMATION_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_STG.STG_RAW_FLEX_GETDATA_UPLOAD_super /*+basename(STG_RAW_FLEX_GETDATA_UPLOAD),createtype(P)*/
(
 __identity__,
 __raw__
)
AS
 SELECT STG_RAW_FLEX_GETDATA_UPLOAD.__identity__,
        STG_RAW_FLEX_GETDATA_UPLOAD.__raw__
 FROM CTG_ANALYTICS_STG.STG_RAW_FLEX_GETDATA_UPLOAD
 ORDER BY STG_RAW_FLEX_GETDATA_UPLOAD.__identity__
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS.AGG_AUTH_ID_REVENUE /*+createtype(P)*/
(
 AUTH_ID,
 TAX_YEAR,
 TOTAL_REVENUE,
 TOTAL_FEDERAL_REVENUE,
 TOTAL_STATE_REVENUE,
 NUM_STATE_ATTACH,
 TOTAL_MINDBENDER_REVENUE,
 NUM_MINDBENDER_ATTACH,
 TOTAL_AUDIT_DEFENSE_REVENUE,
 NUM_AUDIT_DEFENSE_ATTACH,
 TOTAL_REFUND_TRANSFER_REVENUE,
 NUM_REFUND_TRANSFER_ATTACH,
 TOTAL_CA_AUDIT_DEFENSE_REVENUE,
 NUM_CA_AUDIT_DEFENSE_ATTACH,
 TOTAL_CA_REFUND_TRANSFER_REVENUE,
 NUM_CA_REFUND_TRANSFER_ATTACH,
 TOTAL_NONCA_REFUND_TRANSFER_REVENUE,
 NUM_NONCA_REFUND_TRANSFER_ATTACH,
 TOTAL_NONCA_AUDIT_DEFENSE_REVENUE,
 NUM_NONCA_AUDIT_DEFENSE_ATTACH,
 TOTAL_CA_MAX_REVENUE,
 NUM_CA_MAX_ATTACH,
 TOTAL_NON_CA_MAX_REVENUE,
 NUM_NON_CA_MAX_ATTACH,
 TOTAL_MAX_REVENUE,
 NUM_MAX_ATTACH,
 TOTAL_PS_REVENUE,
 NUM_PS_ATTACH,
 TOTAL_QB_SUBSCRIPTION_REVENUE,
 NUM_QB_SUBSCRIPTION_ATTACH,
 TOTAL_QBTT_SUBSCRIPTION_REVENUE,
 NUM_QBTT_SUBSCRIPTION_ATTACH,
 COMPLETED_SKU_RANKED,
 PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
 FIRST_FEDERAL_COMPLETED_DATE,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 MIN_FIRST_STATE_ATTACH_TIMESTAMP,
 MIN_MINDBENDER_ATTACH_TIMESTAMP,
 MIN_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
 MIN_NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
 MIN_REFUND_TRANSFER_ATTACH_TIMESTAMP,
 MIN_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 MIN_NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 MIN_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 MIN_CA_MAX_ATTACH_TIMESTAMP,
 MIN_NON_CA_MAX_ATTACH_TIMESTAMP,
 MIN_MAX_ATTACH_TIMESTAMP,
 MIN_PS_ATTACH_TIMESTAMP,
 MIN_QB_SUBSCRIPTION_ATTACH_TIMESTAMP,
 MIN_QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP
)
AS
 SELECT AGG_AUTH_ID_REVENUE.AUTH_ID,
        AGG_AUTH_ID_REVENUE.TAX_YEAR,
        AGG_AUTH_ID_REVENUE.TOTAL_REVENUE,
        AGG_AUTH_ID_REVENUE.TOTAL_FEDERAL_REVENUE,
        AGG_AUTH_ID_REVENUE.TOTAL_STATE_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_STATE_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_MINDBENDER_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_MINDBENDER_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_AUDIT_DEFENSE_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_AUDIT_DEFENSE_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_REFUND_TRANSFER_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_REFUND_TRANSFER_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_CA_AUDIT_DEFENSE_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_CA_AUDIT_DEFENSE_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_CA_REFUND_TRANSFER_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_CA_REFUND_TRANSFER_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_NONCA_REFUND_TRANSFER_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_NONCA_REFUND_TRANSFER_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_NONCA_AUDIT_DEFENSE_REVENUE AS TOTAL_NONCA_AUDIT_DEFENSE_RREVENUE,
        AGG_AUTH_ID_REVENUE.NUM_NONCA_AUDIT_DEFENSE_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_CA_MAX_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_CA_MAX_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_NON_CA_MAX_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_NON_CA_MAX_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_MAX_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_MAX_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_PS_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_PS_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_QB_SUBSCRIPTION_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_QB_SUBSCRIPTION_ATTACH,
        AGG_AUTH_ID_REVENUE.TOTAL_QBTT_SUBSCRIPTION_REVENUE,
        AGG_AUTH_ID_REVENUE.NUM_QBTT_SUBSCRIPTION_ATTACH,
        AGG_AUTH_ID_REVENUE.COMPLETED_SKU_RANKED,
        AGG_AUTH_ID_REVENUE.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        AGG_AUTH_ID_REVENUE.FIRST_FEDERAL_COMPLETED_DATE,
        AGG_AUTH_ID_REVENUE.BATCH_EVENT_ID,
        AGG_AUTH_ID_REVENUE.CREATED_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.UPDATED_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_FIRST_STATE_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_MINDBENDER_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_CA_MAX_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_NON_CA_MAX_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_MAX_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_PS_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_QB_SUBSCRIPTION_ATTACH_TIMESTAMP,
        AGG_AUTH_ID_REVENUE.MIN_QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_AUTH_ID_REVENUE
 ORDER BY AGG_AUTH_ID_REVENUE.NUM_STATE_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_MINDBENDER_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_AUDIT_DEFENSE_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_REFUND_TRANSFER_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_CA_AUDIT_DEFENSE_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_CA_REFUND_TRANSFER_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_NONCA_REFUND_TRANSFER_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_NONCA_AUDIT_DEFENSE_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_CA_MAX_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_NON_CA_MAX_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_MAX_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_PS_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_QB_SUBSCRIPTION_ATTACH,
          AGG_AUTH_ID_REVENUE.NUM_QBTT_SUBSCRIPTION_ATTACH,
          AGG_AUTH_ID_REVENUE.COMPLETED_SKU_RANKED,
          AGG_AUTH_ID_REVENUE.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
          AGG_AUTH_ID_REVENUE.TAX_YEAR,
          AGG_AUTH_ID_REVENUE.AUTH_ID,
          AGG_AUTH_ID_REVENUE.BATCH_EVENT_ID
SEGMENTED BY hash(AGG_AUTH_ID_REVENUE.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.AGG_CUSTOMER_REVENUE /*+createtype(P)*/
(
 CUSTOMER_KEY,
 TAX_YEAR,
 AUTH_ID,
 TOTAL_REVENUE,
 FEDERAL_REVENUE,
 STATE_REVENUE,
 STATE_ATTACH_COUNT,
 MINDBENDER_REVENUE,
 MINDBENDER_FLAG,
 CA_REFUND_TRANSFER_REVENUE,
 CA_REFUND_TRANSFER_FLAG,
 NON_CA_REFUND_TRANSFER_REVENUE,
 NON_CA_REFUND_TRANSFER_FLAG,
 REFUND_TRANSFER_REVENUE,
 REFUND_TRANSFER_FLAG,
 CA_AUDIT_DEFENSE_REVENUE,
 CA_AUDIT_DEFENSE_FLAG,
 NON_CA_AUDIT_DEFENSE_REVENUE,
 NON_CA_AUDIT_DEFENSE_FLAG,
 AUDIT_DEFENSE_REVENUE,
 AUDIT_DEFENSE_FLAG,
 CA_MAX_REVENUE,
 CA_MAX_FLAG,
 NON_CA_MAX_REVENUE,
 NON_CA_MAX_FLAG,
 MAX_REVENUE,
 MAX_FLAG,
 PS_REVENUE,
 PS_FLAG,
 QB_SUBSCRIPTION_REVENUE,
 QB_SUBSCRIPTION_FLAG,
 QBTT_SUBSCRIPTION_REVENUE,
 QBTT_SUBSCRIPTION_FLAG,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 FIRST_STATE_ATTACH_TIMESTAMP,
 MINDBENDER_ATTACH_TIMESTAMP,
 CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
 NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
 REFUND_TRANSFER_ATTACH_TIMESTAMP,
 CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 AUDIT_DEFENSE_ATTACH_TIMESTAMP,
 CA_MAX_ATTACH_TIMESTAMP,
 NON_CA_MAX_ATTACH_TIMESTAMP,
 MAX_REVENUE_ATTACH_TIMESTAMP,
 PS_ATTACH_TIMESTAMP,
 QB_SUBSCRIPTION_ATTACH_TIMESTAMP,
 QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP
)
AS
 SELECT AGG_CUSTOMER_REVENUE.CUSTOMER_KEY,
        AGG_CUSTOMER_REVENUE.TAX_YEAR,
        AGG_CUSTOMER_REVENUE.AUTH_ID,
        AGG_CUSTOMER_REVENUE.TOTAL_REVENUE,
        AGG_CUSTOMER_REVENUE.FEDERAL_REVENUE,
        AGG_CUSTOMER_REVENUE.STATE_REVENUE,
        AGG_CUSTOMER_REVENUE.STATE_ATTACH_COUNT,
        AGG_CUSTOMER_REVENUE.MINDBENDER_REVENUE,
        AGG_CUSTOMER_REVENUE.MINDBENDER_FLAG,
        AGG_CUSTOMER_REVENUE.CA_REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE.CA_REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE.NON_CA_REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE.NON_CA_REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE.REFUND_TRANSFER_REVENUE,
        AGG_CUSTOMER_REVENUE.REFUND_TRANSFER_FLAG,
        AGG_CUSTOMER_REVENUE.CA_AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE.CA_AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE.NON_CA_AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE.NON_CA_AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE.AUDIT_DEFENSE_REVENUE,
        AGG_CUSTOMER_REVENUE.AUDIT_DEFENSE_FLAG,
        AGG_CUSTOMER_REVENUE.CA_MAX_REVENUE,
        AGG_CUSTOMER_REVENUE.CA_MAX_FLAG,
        AGG_CUSTOMER_REVENUE.NON_CA_MAX_REVENUE,
        AGG_CUSTOMER_REVENUE.NON_CA_MAX_FLAG,
        AGG_CUSTOMER_REVENUE.MAX_REVENUE,
        AGG_CUSTOMER_REVENUE.MAX_FLAG,
        AGG_CUSTOMER_REVENUE.PS_REVENUE,
        AGG_CUSTOMER_REVENUE.PS_FLAG,
        AGG_CUSTOMER_REVENUE.QB_SUBSCRIPTION_REVENUE,
        AGG_CUSTOMER_REVENUE.QB_SUBSCRIPTION_FLAG,
        AGG_CUSTOMER_REVENUE.QBTT_SUBSCRIPTION_REVENUE,
        AGG_CUSTOMER_REVENUE.QBTT_SUBSCRIPTION_FLAG,
        AGG_CUSTOMER_REVENUE.BATCH_EVENT_ID,
        AGG_CUSTOMER_REVENUE.CREATED_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.UPDATED_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.FIRST_STATE_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.MINDBENDER_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.NON_CA_REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.REFUND_TRANSFER_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.NON_CA_AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.AUDIT_DEFENSE_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.CA_MAX_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.NON_CA_MAX_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.MAX_REVENUE_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.PS_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.QB_SUBSCRIPTION_ATTACH_TIMESTAMP,
        AGG_CUSTOMER_REVENUE.QBTT_SUBSCRIPTION_ATTACH_TIMESTAMP
 FROM CTG_ANALYTICS.AGG_CUSTOMER_REVENUE
 ORDER BY AGG_CUSTOMER_REVENUE.MINDBENDER_FLAG,
          AGG_CUSTOMER_REVENUE.CA_REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE.NON_CA_REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE.REFUND_TRANSFER_FLAG,
          AGG_CUSTOMER_REVENUE.CA_AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE.NON_CA_AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE.AUDIT_DEFENSE_FLAG,
          AGG_CUSTOMER_REVENUE.CA_MAX_FLAG,
          AGG_CUSTOMER_REVENUE.NON_CA_MAX_FLAG,
          AGG_CUSTOMER_REVENUE.MAX_FLAG,
          AGG_CUSTOMER_REVENUE.PS_FLAG,
          AGG_CUSTOMER_REVENUE.QB_SUBSCRIPTION_FLAG,
          AGG_CUSTOMER_REVENUE.TAX_YEAR,
          AGG_CUSTOMER_REVENUE.CUSTOMER_KEY,
          AGG_CUSTOMER_REVENUE.AUTH_ID
SEGMENTED BY hash(AGG_CUSTOMER_REVENUE.AUTH_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY /*+createtype(P)*/
(
 TAX_RETURN_FED_SUMMARY_ID,
 CLICKSTREAM_ID,
 TAX_RETURN_TIMESTAMP,
 TAX_DATE_ID,
 TAX_YEAR,
 AUTH_ID,
 FILING_STATUS_ID,
 FORM_ID,
 RESIDENT_STATE_CODE,
 RESIDENT_STATE_ID,
 PRIMARY_ID_KNOWN_FLAG,
 REFUND_AMOUNT,
 ANNUAL_GROSS_INCOME,
 EITC_AMOUNT,
 PRIMARY_TAXPAYER_AGE,
 DEPENDENT_COUNT,
 W2_COUNT,
 SCHEDULE_A_COUNT,
 SCHEDULE_B_COUNT,
 SCHEDULE_C_COUNT,
 SCHEDULE_D_COUNT,
 SCHEDULE_E_COUNT,
 SCHEDULE_F_COUNT,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT FACT_TAX_RETURN_FED_SUMMARY.TAX_RETURN_FED_SUMMARY_ID,
        FACT_TAX_RETURN_FED_SUMMARY.CLICKSTREAM_ID,
        FACT_TAX_RETURN_FED_SUMMARY.TAX_RETURN_TIMESTAMP,
        FACT_TAX_RETURN_FED_SUMMARY.TAX_DATE_ID,
        FACT_TAX_RETURN_FED_SUMMARY.TAX_YEAR,
        FACT_TAX_RETURN_FED_SUMMARY.AUTH_ID,
        FACT_TAX_RETURN_FED_SUMMARY.FILING_STATUS_ID,
        FACT_TAX_RETURN_FED_SUMMARY.FORM_ID,
        FACT_TAX_RETURN_FED_SUMMARY.RESIDENT_STATE_CODE,
        FACT_TAX_RETURN_FED_SUMMARY.RESIDENT_STATE_ID,
        FACT_TAX_RETURN_FED_SUMMARY.PRIMARY_ID_KNOWN_FLAG,
        FACT_TAX_RETURN_FED_SUMMARY.REFUND_AMOUNT,
        FACT_TAX_RETURN_FED_SUMMARY.ANNUAL_GROSS_INCOME,
        FACT_TAX_RETURN_FED_SUMMARY.EITC_AMOUNT,
        FACT_TAX_RETURN_FED_SUMMARY.PRIMARY_TAXPAYER_AGE,
        FACT_TAX_RETURN_FED_SUMMARY.DEPENDENT_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.W2_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_A_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_B_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_C_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_D_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_E_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.SCHEDULE_F_COUNT,
        FACT_TAX_RETURN_FED_SUMMARY.BATCH_EVENT_ID,
        FACT_TAX_RETURN_FED_SUMMARY.CREATED_TIMESTAMP,
        FACT_TAX_RETURN_FED_SUMMARY.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_TAX_RETURN_FED_SUMMARY
 ORDER BY FACT_TAX_RETURN_FED_SUMMARY.TAX_YEAR,
          FACT_TAX_RETURN_FED_SUMMARY.CLICKSTREAM_ID,
          FACT_TAX_RETURN_FED_SUMMARY.TAX_RETURN_FED_SUMMARY_ID
SEGMENTED BY hash(FACT_TAX_RETURN_FED_SUMMARY.TAX_RETURN_FED_SUMMARY_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS.DIM_FILING_STATUS /*+createtype(L)*/
(
 FILING_STATUS_ID,
 FILING_STATUS_ABBREVIATION,
 FILING_STATUS_DESCRIPTION,
 BATCH_EVENT_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT DIM_FILING_STATUS.FILING_STATUS_ID,
        DIM_FILING_STATUS.FILING_STATUS_ABBREVIATION,
        DIM_FILING_STATUS.FILING_STATUS_DESCRIPTION,
        DIM_FILING_STATUS.BATCH_EVENT_ID,
        DIM_FILING_STATUS.CREATED_TIMESTAMP,
        DIM_FILING_STATUS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS.DIM_FILING_STATUS
 ORDER BY DIM_FILING_STATUS.FILING_STATUS_ID
SEGMENTED BY hash(DIM_FILING_STATUS.FILING_STATUS_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_super /*+basename(ETL_BATCH_EVENT),createtype(P)*/
(
 BATCH_EVENT_ID,
 PROJECT_ID ENCODING RLE,
 COORDINATOR_INSTANCE_ID,
 START_TIMESTAMP,
 END_TIMESTAMP,
 STATUS ENCODING RLE,
 PROJECT_MAP_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ETL_BATCH_EVENT.BATCH_EVENT_ID,
        ETL_BATCH_EVENT.PROJECT_ID,
        ETL_BATCH_EVENT.COORDINATOR_INSTANCE_ID,
        ETL_BATCH_EVENT.START_TIMESTAMP,
        ETL_BATCH_EVENT.END_TIMESTAMP,
        ETL_BATCH_EVENT.STATUS,
        ETL_BATCH_EVENT.PROJECT_MAP_ID,
        ETL_BATCH_EVENT.CREATED_TIMESTAMP,
        ETL_BATCH_EVENT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT
 ORDER BY ETL_BATCH_EVENT.PROJECT_ID,
          ETL_BATCH_EVENT.STATUS,
          ETL_BATCH_EVENT.BATCH_EVENT_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP_super /*+basename(ETL_BATCH_EVENT_MAP),createtype(P)*/
(
 BATCH_EVENT_MAP_ID,
 PROJECT_MAP_ID ENCODING RLE,
 BATCH_EVENT_GROUP_MAP_ID,
 WRITE_BATCH_EVENT_ID,
 READ_BATCH_EVENT_ID,
 COORDINATOR_INSTANCE_ID,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT ETL_BATCH_EVENT_MAP.BATCH_EVENT_MAP_ID,
        ETL_BATCH_EVENT_MAP.PROJECT_MAP_ID,
        ETL_BATCH_EVENT_MAP.BATCH_EVENT_GROUP_MAP_ID,
        ETL_BATCH_EVENT_MAP.WRITE_BATCH_EVENT_ID,
        ETL_BATCH_EVENT_MAP.READ_BATCH_EVENT_ID,
        ETL_BATCH_EVENT_MAP.COORDINATOR_INSTANCE_ID,
        ETL_BATCH_EVENT_MAP.CREATED_TIMESTAMP,
        ETL_BATCH_EVENT_MAP.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.ETL_BATCH_EVENT_MAP
 ORDER BY ETL_BATCH_EVENT_MAP.READ_BATCH_EVENT_ID,
          ETL_BATCH_EVENT_MAP.PROJECT_MAP_ID,
          ETL_BATCH_EVENT_MAP.WRITE_BATCH_EVENT_ID,
          ETL_BATCH_EVENT_MAP.BATCH_EVENT_MAP_ID
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_JOAQUIN /*+createtype(P)*/
(
 ENABLED,
 MAX_CONCURRENCY
)
AS
 SELECT CONFIG_JOAQUIN.ENABLED,
        CONFIG_JOAQUIN.MAX_CONCURRENCY
 FROM CTG_ANALYTICS_ADMIN.CONFIG_JOAQUIN
 ORDER BY CONFIG_JOAQUIN.ENABLED,
          CONFIG_JOAQUIN.MAX_CONCURRENCY
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET
(
 APP_TYPE ENCODING RLE,
 DEVICE_TYPE ENCODING RLE,
 PLATFORM_TYPE ENCODING RLE,
 OS_FAMILY ENCODING RLE,
 OS_PATCH ENCODING RLE,
 USER_AGENT_MAJOR ENCODING RLE,
 BATCH_EVENT_ID ENCODING RLE,
 OS_MINOR ENCODING RLE,
 USER_AGENT_MINOR ENCODING RLE,
 USER_AGENT_FAMILY ENCODING RLE,
 OS_PATCH_MINOR ENCODING RLE,
 OS_MAJOR ENCODING RLE,
 USER_AGENT_PATCH ENCODING RLE,
 LOAD_DATETIME ENCODING RLE,
 USER_AGENT_BROWSER_VERSION ENCODING RLE,
 DEVICE_FAMILY ENCODING RLE,
 USER_AGENT,
 USER_AGENT_ID
)
AS
 SELECT DIM_USER_AGENT_SUPERSET.APP_TYPE,
        DIM_USER_AGENT_SUPERSET.DEVICE_TYPE,
        DIM_USER_AGENT_SUPERSET.PLATFORM_TYPE,
        DIM_USER_AGENT_SUPERSET.OS_FAMILY,
        DIM_USER_AGENT_SUPERSET.OS_PATCH,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_MAJOR,
        DIM_USER_AGENT_SUPERSET.BATCH_EVENT_ID,
        DIM_USER_AGENT_SUPERSET.OS_MINOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_MINOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_FAMILY,
        DIM_USER_AGENT_SUPERSET.OS_PATCH_MINOR,
        DIM_USER_AGENT_SUPERSET.OS_MAJOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_PATCH,
        DIM_USER_AGENT_SUPERSET.LOAD_DATETIME,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_BROWSER_VERSION,
        DIM_USER_AGENT_SUPERSET.DEVICE_FAMILY,
        DIM_USER_AGENT_SUPERSET.USER_AGENT,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_ID
 FROM CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET
 ORDER BY DIM_USER_AGENT_SUPERSET.APP_TYPE,
          DIM_USER_AGENT_SUPERSET.DEVICE_TYPE,
          DIM_USER_AGENT_SUPERSET.PLATFORM_TYPE,
          DIM_USER_AGENT_SUPERSET.OS_FAMILY,
          DIM_USER_AGENT_SUPERSET.OS_PATCH,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_MAJOR,
          DIM_USER_AGENT_SUPERSET.BATCH_EVENT_ID,
          DIM_USER_AGENT_SUPERSET.OS_MINOR,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_MINOR,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_FAMILY,
          DIM_USER_AGENT_SUPERSET.OS_PATCH_MINOR,
          DIM_USER_AGENT_SUPERSET.OS_MAJOR,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_PATCH,
          DIM_USER_AGENT_SUPERSET.LOAD_DATETIME,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_BROWSER_VERSION,
          DIM_USER_AGENT_SUPERSET.DEVICE_FAMILY,
          DIM_USER_AGENT_SUPERSET.USER_AGENT_ID
SEGMENTED BY hash(DIM_USER_AGENT_SUPERSET.USER_AGENT_ID) ALL NODES KSAFE 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.rk_missing_ttu_cs_20160302_0400 /*+createtype(P)*/
(
 trans_id
)
AS
 SELECT rk_missing_ttu_cs_20160302_0400.trans_id
 FROM CTG_ANALYTICS_ADMIN.rk_missing_ttu_cs_20160302_0400
 ORDER BY rk_missing_ttu_cs_20160302_0400.trans_id
UNSEGMENTED ALL NODES;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_SEG_B0
(
 PROJECT_ID,
 PROJECT_NAME,
 ENABLED ENCODING RLE,
 PROJECT_GROUP,
 PROJECT_TYPE,
 PROJECT_LOCATION,
 CONFIG_LOCATION,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT CONFIG_PROJECT.PROJECT_ID,
        CONFIG_PROJECT.PROJECT_NAME,
        CONFIG_PROJECT.ENABLED,
        CONFIG_PROJECT.PROJECT_GROUP,
        CONFIG_PROJECT.PROJECT_TYPE,
        CONFIG_PROJECT.PROJECT_LOCATION,
        CONFIG_PROJECT.CONFIG_LOCATION,
        CONFIG_PROJECT.CREATED_TIMESTAMP,
        CONFIG_PROJECT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.CONFIG_PROJECT
 ORDER BY CONFIG_PROJECT.ENABLED,
          CONFIG_PROJECT.PROJECT_ID
SEGMENTED BY hash(CONFIG_PROJECT.PROJECT_ID) ALL NODES OFFSET 0;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP_SEG_B1
(
 PROJECT_MAP_ID,
 CHILD_PROJECT_ID,
 PARENT_PROJECT_ID ENCODING RLE,
 PROJECT_MAP_PARAMETER_LOCATION,
 BATCH_LIMIT,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 PROJECT_MAP_NAME
)
AS
 SELECT CONFIG_PROJECT_MAP.PROJECT_MAP_ID,
        CONFIG_PROJECT_MAP.CHILD_PROJECT_ID,
        CONFIG_PROJECT_MAP.PARENT_PROJECT_ID,
        CONFIG_PROJECT_MAP.PROJECT_MAP_PARAMETER_LOCATION,
        CONFIG_PROJECT_MAP.BATCH_LIMIT,
        CONFIG_PROJECT_MAP.CREATED_TIMESTAMP,
        CONFIG_PROJECT_MAP.UPDATED_TIMESTAMP,
        CONFIG_PROJECT_MAP.PROJECT_MAP_NAME
 FROM CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP
 ORDER BY CONFIG_PROJECT_MAP.PARENT_PROJECT_ID,
          CONFIG_PROJECT_MAP.CHILD_PROJECT_ID
SEGMENTED BY hash(CONFIG_PROJECT_MAP.CHILD_PROJECT_ID) ALL NODES OFFSET 1;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP_SEG_B0
(
 PROJECT_MAP_ID,
 CHILD_PROJECT_ID,
 PARENT_PROJECT_ID ENCODING RLE,
 PROJECT_MAP_PARAMETER_LOCATION,
 BATCH_LIMIT,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP,
 PROJECT_MAP_NAME
)
AS
 SELECT CONFIG_PROJECT_MAP.PROJECT_MAP_ID,
        CONFIG_PROJECT_MAP.CHILD_PROJECT_ID,
        CONFIG_PROJECT_MAP.PARENT_PROJECT_ID,
        CONFIG_PROJECT_MAP.PROJECT_MAP_PARAMETER_LOCATION,
        CONFIG_PROJECT_MAP.BATCH_LIMIT,
        CONFIG_PROJECT_MAP.CREATED_TIMESTAMP,
        CONFIG_PROJECT_MAP.UPDATED_TIMESTAMP,
        CONFIG_PROJECT_MAP.PROJECT_MAP_NAME
 FROM CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_MAP
 ORDER BY CONFIG_PROJECT_MAP.PARENT_PROJECT_ID,
          CONFIG_PROJECT_MAP.CHILD_PROJECT_ID
SEGMENTED BY hash(CONFIG_PROJECT_MAP.CHILD_PROJECT_ID) ALL NODES OFFSET 0;

CREATE PROJECTION CTG_ANALYTICS_ADMIN.CONFIG_PROJECT_SEG_B1
(
 PROJECT_ID,
 PROJECT_NAME,
 ENABLED ENCODING RLE,
 PROJECT_GROUP,
 PROJECT_TYPE,
 PROJECT_LOCATION,
 CONFIG_LOCATION,
 CREATED_TIMESTAMP,
 UPDATED_TIMESTAMP
)
AS
 SELECT CONFIG_PROJECT.PROJECT_ID,
        CONFIG_PROJECT.PROJECT_NAME,
        CONFIG_PROJECT.ENABLED,
        CONFIG_PROJECT.PROJECT_GROUP,
        CONFIG_PROJECT.PROJECT_TYPE,
        CONFIG_PROJECT.PROJECT_LOCATION,
        CONFIG_PROJECT.CONFIG_LOCATION,
        CONFIG_PROJECT.CREATED_TIMESTAMP,
        CONFIG_PROJECT.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_ADMIN.CONFIG_PROJECT
 ORDER BY CONFIG_PROJECT.ENABLED,
          CONFIG_PROJECT.PROJECT_ID
SEGMENTED BY hash(CONFIG_PROJECT.PROJECT_ID) ALL NODES OFFSET 1;


CREATE  VIEW CTG_ANALYTICS_STG.STG_RAW_FLEX_GETDATA_UPLOAD_view AS
 SELECT (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'auth_id'::varchar(7)))::!varchar(20) AS auth_id,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'client'::varchar(6)))::!varchar(36) AS client,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'doc_type'::varchar(8)))::!varchar(20) AS doc_type,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'document_id'::varchar(11)))::!varchar(72) AS document_id,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'error_message'::varchar(13)))::!varchar(20) AS error_message,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.accept_language'::varchar(28)))::!varchar(20) AS "event_header.accept_language",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.app_id'::varchar(19)))::!varchar(78) AS "event_header.app_id",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.app_name'::varchar(21)))::!varchar(20) AS "event_header.app_name",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.client_ip_address'::varchar(30)))::!varchar(26) AS "event_header.client_ip_address",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.event_id'::varchar(21)))::!varchar(72) AS "event_header.event_id",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.event_timestamp'::varchar(28)))::!varchar(20) AS "event_header.event_timestamp",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.offering_id'::varchar(24)))::!varchar(36) AS "event_header.offering_id",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.server_ip_address'::varchar(30)))::!varchar(24) AS "event_header.server_ip_address",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.server_timestamp'::varchar(29)))::!varchar(26) AS "event_header.server_timestamp",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.topic_name'::varchar(23)))::!varchar(36) AS "event_header.topic_name",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.version'::varchar(20)))::!varchar(20) AS "event_header.version",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fed_id'::varchar(6)))::!varchar(20) AS fed_id,
        ((public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fields_populated'::varchar(16)))::long varbinary(130000))::!long varbinary(29444) AS fields_populated,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fields_recognized'::varchar(17)))::!varchar(20) AS fields_recognized,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'getdata_format_version'::varchar(22)))::!varchar(20) AS getdata_format_version,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'http_status'::varchar(11)))::!varchar(20) AS http_status,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'import_driver'::varchar(13)))::!varchar(20) AS import_driver,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'ivid_client'::varchar(11)))::!varchar(20) AS ivid_client,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'ivid_server'::varchar(11)))::!varchar(20) AS ivid_server,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'omt_visitor_id'::varchar(14)))::!varchar(20) AS omt_visitor_id,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'processing_time_in_ms'::varchar(21)))::!varchar(20) AS processing_time_in_ms,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'prod_or_test'::varchar(12)))::!varchar(20) AS prod_or_test,
        ((public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'service_messages'::varchar(16)))::long varbinary(130000))::!long varbinary(32) AS service_messages,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'service_type'::varchar(12)))::!varchar(20) AS service_type,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'succeeded'::varchar(9)))::!varchar(20) AS succeeded,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'tax_year'::varchar(8)))::!varchar(20) AS tax_year,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'tid'::varchar(3)))::!varchar(72) AS tid,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'timestamp'::varchar(9)))::!varchar(26) AS "timestamp",
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'topic'::varchar(5)))::!varchar(24) AS topic,
        (public.MapLookup(STG_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'user_agent'::varchar(10)))::!varchar(20) AS user_agent
 FROM CTG_ANALYTICS_STG.STG_RAW_FLEX_GETDATA_UPLOAD;

CREATE  VIEW CTG_ANALYTICS_STG.CUSTOMER_GROUP2 AS
 SELECT max(A.PRIMARY_ID) AS PRIMARY_ID,
        A.SECONDARY_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.SECONDARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER)) AND (A.PRIMARY_ID NOT IN ( SELECT CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.CUSTOMER_GROUP1)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))) AND (A.TTO_ORDER_KEY NOT IN ( SELECT LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS)) AND (A.SECONDARY_ID NOT IN ( SELECT CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.CUSTOMER_GROUP1)))
 GROUP BY A.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_REJECT_DESCRIPTION AS
 SELECT ERD.FILING_TYPE,
        ERD.PERIOD,
        ERD.ERROR_CODE,
        ERD.ERROR_MSG AS ERROR_MESSAGE,
        ERD.MATT_DATE,
        ERD.AUDIT_INS_KEY,
        ERD.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_REJECT_DESCRIPTION ERD;

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_FILING_ERROR AS
 SELECT EFE.CHANGE_ID,
        EFE.SEQ_NUM AS SEQUENCE_NUMBER,
        EFE.ERROR_CODE,
        EFE.FORM,
        EFE.FIELD AS FIELD_FULL_PATH,
        EFE.MATT_DATE,
        2015 AS TAX_YEAR,
        EFE.AUDIT_INS_KEY,
        EFE.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_ERROR EFE JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((EFE.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_ERROR'::varchar(29)))));

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_FILING AS
((((( SELECT PSA_EFS_FILING.FILING_ID,
        PSA_EFS_FILING.SOURCE_SYSTEM,
        PSA_EFS_FILING.FILING_TYPE,
        PSA_EFS_FILING.PERIOD,
        PSA_EFS_FILING.SENDER_ID,
        PSA_EFS_FILING.PRIMARY_FILER_ID,
        PSA_EFS_FILING.SECONDARY_FILER_ID,
        PSA_EFS_FILING.APP,
        PSA_EFS_FILING.PRIMARY_HOME_STATE,
        PSA_EFS_FILING.PAYMENT_TOTAL,
        PSA_EFS_FILING.ENGINE_CODE,
        PSA_EFS_FILING.ENGINE_VERSION,
        PSA_EFS_FILING.FORMSET_CODE,
        PSA_EFS_FILING.FORMSET_VERSION,
        PSA_EFS_FILING.BATCH_ID,
        PSA_EFS_FILING.STATE_ONLY_FLAG,
        PSA_EFS_FILING.CREDIT_FOR_SALE_PRIORITY_CODE,
        PSA_EFS_FILING.PRICING_PRIORITY_CODE,
        PSA_EFS_FILING.BANK_PRODUCT,
        PSA_EFS_FILING.CONVERTED_TYPE,
        PSA_EFS_FILING.ZIP_CODE,
        PSA_EFS_FILING.MACHINE_ID,
        PSA_EFS_FILING.INSERTION_TIMESTAMP,
        PSA_EFS_FILING.MATT_DATE,
        PSA_EFS_FILING.AUDIT_INS_KEY,
        PSA_EFS_FILING.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING
 WHERE (NOT ((PSA_EFS_FILING.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(PSA_EFS_FILING.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (PSA_EFS_FILING.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY14 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY13 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY12 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY11 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY10 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))))) UNION ALL  SELECT A.FILING_ID,
        A.SOURCE_SYSTEM,
        A.FILING_TYPE,
        A.PERIOD,
        A.SENDER_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.APP,
        A.PRIMARY_HOME_STATE,
        A.PAYMENT_TOTAL,
        A.ENGINE_CODE,
        A.ENGINE_VERSION,
        A.FORMSET_CODE,
        A.FORMSET_VERSION,
        A.BATCH_ID,
        A.STATE_ONLY_FLAG,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.PRICING_PRIORITY_CODE,
        A.BANK_PRODUCT,
        A.CONVERTED_TYPE,
        A.ZIP_CODE,
        A.MACHINE_ID,
        A.INSERTION_TIMESTAMP,
        A.MATT_DATE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_TY09 A
 WHERE (NOT ((A.APP = ANY (ARRAY['TURBOTAX-ONLINE'::varchar(15), 'TTO-FFA'::varchar(7), 'EASY-EXT'::varchar(8)])) AND ((regexp_count(A.SENDER_ID, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$'::varchar(34), 1, ''::varchar) > 0) = true) AND (A.SENDER_ID IN ( SELECT (tto_test_records.AUTH_ID)::varchar AS AUTH_ID
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)))));

CREATE  VIEW CTG_ANALYTICS_STG.TRN_RAW_FLEX_GETDATA_UPLOAD_view AS
 SELECT (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'auth_id'::varchar(7)))::varchar(38) AS auth_id,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'client'::varchar(6)))::varchar(36) AS client,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'doc_type'::varchar(8)))::varchar(20) AS doc_type,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'document_id'::varchar(11)))::varchar(72) AS document_id,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'error_message'::varchar(13)))::varchar(20) AS error_message,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.accept_language'::varchar(28)))::varchar(20) AS "event_header.accept_language",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.app_id'::varchar(19)))::varchar(36) AS "event_header.app_id",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.app_name'::varchar(21)))::varchar(20) AS "event_header.app_name",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.client_ip_address'::varchar(30)))::varchar(26) AS "event_header.client_ip_address",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.event_id'::varchar(21)))::varchar(72) AS "event_header.event_id",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.event_timestamp'::varchar(28)))::varchar(20) AS "event_header.event_timestamp",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.offering_id'::varchar(24)))::varchar(20) AS "event_header.offering_id",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.server_ip_address'::varchar(30)))::varchar(26) AS "event_header.server_ip_address",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.server_timestamp'::varchar(29)))::varchar(26) AS "event_header.server_timestamp",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.topic_name'::varchar(23)))::varchar(36) AS "event_header.topic_name",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'event_header.version'::varchar(20)))::varchar(20) AS "event_header.version",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fed_id'::varchar(6)))::varchar(20) AS fed_id,
        ((public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fields_populated'::varchar(16)))::long varbinary(130000))::long varbinary(24800) AS fields_populated,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'fields_recognized'::varchar(17)))::varchar(20) AS fields_recognized,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'getdata_format_version'::varchar(22)))::varchar(20) AS getdata_format_version,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'http_status'::varchar(11)))::varchar(20) AS http_status,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'import_driver'::varchar(13)))::varchar(20) AS import_driver,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'ivid_client'::varchar(11)))::varchar(20) AS ivid_client,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'ivid_server'::varchar(11)))::varchar(20) AS ivid_server,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'omt_visitor_id'::varchar(14)))::varchar(20) AS omt_visitor_id,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'processing_time_in_ms'::varchar(21)))::varchar(20) AS processing_time_in_ms,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'prod_or_test'::varchar(12)))::varchar(20) AS prod_or_test,
        ((public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'service_messages'::varchar(16)))::long varbinary(130000))::long varbinary(32) AS service_messages,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'succeeded'::varchar(9)))::varchar(20) AS succeeded,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'tax_year'::varchar(8)))::varchar(20) AS tax_year,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'timestamp'::varchar(9)))::varchar(20) AS "timestamp",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'topic'::varchar(5)))::varchar(24) AS topic,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'user_agent'::varchar(10)))::varchar(78) AS user_agent,
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, '`'::varchar(1)))::varchar(74) AS "`",
        (public.MapLookup(TRN_RAW_FLEX_GETDATA_UPLOAD.__raw__, 'tid'::varchar(3)))::varchar(72) AS tid
 FROM CTG_ANALYTICS_STG.TRN_RAW_FLEX_GETDATA_UPLOAD;

CREATE  VIEW CTG_ANALYTICS_STG.TAXFILER_GROUP1 AS
 SELECT A.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.PRIMARY_ID IN ( SELECT DIM_TAXFILER.PRIMARY_ID
 FROM CTG_ANALYTICS.DIM_TAXFILER)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))))
 GROUP BY A.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.TAXFILER_GROUP2 AS
 SELECT max(A.PRIMARY_ID) AS PRIMARY_ID,
        A.SECONDARY_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.SECONDARY_ID IN ( SELECT DIM_TAXFILER.PRIMARY_ID
 FROM CTG_ANALYTICS.DIM_TAXFILER)) AND (A.PRIMARY_ID NOT IN ( SELECT TAXFILER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.TAXFILER_GROUP1)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))))
 GROUP BY A.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.TAXFILER_GROUP3 AS
 SELECT A.PRIMARY_ID,
        A.SECONDARY_ID,
        max(A.BATCH_EVENT_ID) AS BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.PRIMARY_ID NOT IN ( SELECT TAXFILER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.TAXFILER_GROUP1)) AND (A.PRIMARY_ID NOT IN ( SELECT TAXFILER_GROUP2.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.TAXFILER_GROUP2)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))))
 GROUP BY A.PRIMARY_ID,
          A.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.STG_INSERT_EXTRA_ORDERS AS
 SELECT A.TTO_ORDER_KEY,
        A.BATCH_EVENT_ID,
        A.ORDER_TIMESTAMP,
        A.AUTH_ID,
        A.PRIMARY_ID,
        A.SECONDARY_ID,
        A.CURRENT_PRIORITY_CODE,
        A.PRICE_PRIORITY_CODE,
        A.CREDIT_PRIORITY_CODE,
        A.ORDER_NUMBER,
        A.PRODUCT_CODE,
        A.PAYMENT_METHOD,
        A.PAYMENT_AMOUNT,
        A.ORIGINAL_SKU_ID,
        A.VOUCHER_CODE,
        A.TAX_YEAR,
        A.HOLD_REASON,
        A.ORDER_ORIGIN
 FROM ((CTG_ANALYTICS_STG.STG_TTO_ORDERS A JOIN CTG_ANALYTICS.DIM_TAXFILER C1 ON ((A.SECONDARY_ID = C1.PRIMARY_ID))) LEFT JOIN CTG_ANALYTICS.DIM_TAXFILER C2 ON ((A.PRIMARY_ID = C2.PRIMARY_ID)))
 WHERE (C2.PRIMARY_ID IS NULL);

CREATE  VIEW CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP1 AS
 SELECT STG_ETX_ORDERS.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_ORDERS
 WHERE (STG_ETX_ORDERS.PRIMARY_ID IN ( SELECT DIM_TAXFILER.PRIMARY_ID
 FROM CTG_ANALYTICS.DIM_TAXFILER))
 GROUP BY STG_ETX_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP2 AS
 SELECT max(STG_ETX_ORDERS.PRIMARY_ID) AS PRIMARY_ID,
        STG_ETX_ORDERS.SECONDARY_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_ORDERS
 WHERE ((STG_ETX_ORDERS.SECONDARY_ID IN ( SELECT DIM_TAXFILER.PRIMARY_ID
 FROM CTG_ANALYTICS.DIM_TAXFILER)) AND (STG_ETX_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_TAXFILER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP1)))
 GROUP BY STG_ETX_ORDERS.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP3 AS
 SELECT STG_ETX_ORDERS.PRIMARY_ID,
        max(STG_ETX_ORDERS.SECONDARY_ID) AS SECONDARY_ID,
        max(STG_ETX_ORDERS.BATCH_EVENT_ID) AS BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_ORDERS
 WHERE ((STG_ETX_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_TAXFILER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP1)) AND (STG_ETX_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_TAXFILER_GROUP2.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_TAXFILER_GROUP2)))
 GROUP BY STG_ETX_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.CUSTOMER_GROUP1 AS
 SELECT A.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.PRIMARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))) AND (A.TTO_ORDER_KEY NOT IN ( SELECT LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS)))
 GROUP BY A.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.CUSTOMER_GROUP3 AS
 SELECT A.PRIMARY_ID,
        A.SECONDARY_ID,
        max(A.BATCH_EVENT_ID) AS BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_TTO_ORDERS A
 WHERE ((A.PRIMARY_ID NOT IN ( SELECT CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.CUSTOMER_GROUP1)) AND (A.PRIMARY_ID NOT IN ( SELECT CUSTOMER_GROUP2.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.CUSTOMER_GROUP2)) AND (A.PRODUCT_CODE NOT IN ( SELECT SOLUTION_VARIABLES.VARIABLE_VALUE
 FROM CTG_ANALYTICS_SRC.SOLUTION_VARIABLES
 WHERE (SOLUTION_VARIABLES.ATTRIBUTE = 'EZE'::varchar(3)))) AND (A.TTO_ORDER_KEY NOT IN ( SELECT LKP_CUSTOMER_TTO_ORDERS.TTO_ORDERS_KEY
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_TTO_ORDERS)))
 GROUP BY A.PRIMARY_ID,
          A.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.STG_NEW_ETX_RT_ORDERS AS
 SELECT A.CHANGE_ID,
        A.PRIMARY_ID,
        A.SECONDARY_ID,
        A.ENGINE_ID,
        A.PRODUCT_CODE,
        A.PRODUCT_VERSION,
        A.TAX_YEAR,
        A.CREDIT_PRIORITY_CODE,
        A.FILING_TYPE,
        A.ORDER_AMOUNT,
        A.ORDER_TYPE,
        A.ETX_REF_NUM,
        A.ORDER_TIMESTAMP,
        A.PRICE_PRIORITY_CODE,
        A.PRODUCT_ALIAS_CODE,
        A.STATUS_TYPE,
        A.BATCH_EVENT_ID,
        A.CREATED_TIMESTAMP,
        A.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_STG.STG_ETX_RT_ORDERS A
 WHERE (NOT EXISTS ( SELECT 1
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_RT_ORDER B
 WHERE ((A.ETX_REF_NUM = B.ORDER_NUMBER) AND (A.TAX_YEAR = B.TAX_YEAR) AND (A.PRODUCT_ALIAS_CODE = B.ITEM_ALIAS_CODE))));

CREATE  VIEW CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP1 AS
 SELECT STG_NEW_ETX_RT_ORDERS.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.STG_NEW_ETX_RT_ORDERS
 WHERE (STG_NEW_ETX_RT_ORDERS.PRIMARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER))
 GROUP BY STG_NEW_ETX_RT_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP3 AS
 SELECT STG_NEW_ETX_RT_ORDERS.PRIMARY_ID,
        max(STG_NEW_ETX_RT_ORDERS.SECONDARY_ID) AS SECONDARY_ID,
        max(STG_NEW_ETX_RT_ORDERS.BATCH_EVENT_ID) AS BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_NEW_ETX_RT_ORDERS
 WHERE ((STG_NEW_ETX_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP1)) AND (STG_NEW_ETX_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_RT_CUSTOMER_GROUP2.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP2)))
 GROUP BY STG_NEW_ETX_RT_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.STG_ETX_NEW_NON_RT_ORDERS AS
 SELECT A.ETX_ORDER_ID,
        A.CHANGE_ID,
        A.PRIMARY_ID,
        A.SECONDARY_ID,
        A.ENGINE_ID,
        A.PRODUCT_CODE,
        A.PRODUCT_VERSION,
        A.TAX_YEAR,
        A.CREDIT_PRIORITY_CODE,
        A.FILING_TYPE,
        A.ORDER_AMOUNT,
        A.ORDER_TYPE,
        A.ETX_REF_NUM,
        A.ORDER_TIMESTAMP,
        A.PRICE_PRIORITY_CODE,
        A.PRODUCT_ALIAS_CODE,
        A.STATUS_TYPE,
        A.BATCH_EVENT_ID
 FROM (CTG_ANALYTICS_STG.STG_ETX_ORDERS A LEFT JOIN CTG_ANALYTICS_SRC.LKP_CUSTOMER_EFS_NON_RT_ORDER B ON (((A.CHANGE_ID = B.CHANGE_ID) AND (A.TAX_YEAR = B.TAX_YEAR))))
 WHERE (B.CUSTOMER_KEY IS NULL);

CREATE  VIEW CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP1 AS
 SELECT STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_NEW_NON_RT_ORDERS
 WHERE (STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER))
 GROUP BY STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP3 AS
 SELECT STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID,
        max(STG_ETX_NEW_NON_RT_ORDERS.SECONDARY_ID) AS SECONDARY_ID,
        max(STG_ETX_NEW_NON_RT_ORDERS.BATCH_EVENT_ID) AS BATCH_EVENT_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_NEW_NON_RT_ORDERS
 WHERE ((STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_NON_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP1)) AND (STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_NON_RT_CUSTOMER_GROUP2.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP2)))
 GROUP BY STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID;

CREATE  VIEW CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_TTU_TY14 AS
 SELECT A.TRANS_ID,
        A.VISITOR_ID,
        A.AUTH_ID,
        A.AUTH_ID_SOURCE,
        A.PAGE_ID,
        A.PAGE_URL_ID,
        A.REFERRER_ID,
        A.USER_AGENT_ID,
        A.UA_BROWSER_ID,
        A.UA_OPERATING_SYSTEM_ID,
        A.TEST_ID,
        A.GEO_ID,
        A.BROWSER_ID,
        A.COLOR_DEPTH_ID,
        A.CONNECTION_TYPE_ID,
        A.LANGUAGE_ID,
        A.JAVASCRIPT_VERSION_ID,
        A.OPERATING_SYSTEM_ID,
        A.RESOLUTION_ID,
        A.DIM_TIME_BY_DAY_KEY,
        A.CAMPAIGN_ID,
        A.SEARCH_ENGINE_ID,
        A.COUNTRY_ID,
        A.HIT_TIMESTAMP,
        A.TY_WEEK,
        A.TY_YEAR,
        A.HIT_TIME_GMT,
        A.DATE_TIME,
        A.SERVICE,
        A.ACCEPT_LANGUAGE,
        A.VISID,
        A.USERID,
        A.CID,
        A.EVENT_LIST,
        A.HOMEPAGE,
        A.IP,
        A.PAGE_EVENT,
        A.PAGE_EVENT_VAR1,
        A.PAGE_EVENT_VAR2,
        A.PAGE_TYPE,
        A.PAGE_URL,
        A.PAGENAME,
        A.DURATION_ON_PAGE,
        A.PRODUCT_LIST,
        A.USER_SERVER,
        A.CHANNEL,
        A.PROP01,
        A.PROP02,
        A.PROP03,
        A.PROP04,
        A.PROP05,
        A.PROP06,
        A.PROP07,
        A.PROP08,
        A.PROP09,
        A.PROP10,
        A.PROP11,
        A.PROP12,
        A.PROP13,
        A.PROP14,
        A.PROP15,
        A.PROP16,
        A.PROP17,
        A.PROP18,
        A.PROP19,
        A.PROP20,
        A.PROP21,
        A.PROP22,
        A.PROP23,
        A.PROP24,
        A.PROP25,
        A.PROP26,
        A.PROP27,
        A.PROP28,
        A.PROP29,
        A.PROP30,
        A.PROP31,
        A.PROP32,
        A.PROP33,
        A.PROP34,
        A.PROP35,
        A.PROP36,
        A.PROP37,
        A.PROP38,
        A.PROP39,
        A.PROP40,
        A.PROP41,
        A.PROP42,
        A.PROP43,
        A.PROP44,
        A.PROP45,
        A.PROP46,
        A.PROP47,
        A.PROP48,
        A.PROP49,
        A.PROP50,
        A.PURCHASEID,
        A.REFERRER,
        A.STATE,
        A.USER_AGENT,
        A.ZIP,
        A.EXCLUDE_HIT,
        A.HIER1,
        A.HIER2,
        A.HIER3,
        A.HIER4,
        A.HIER5,
        A.POST_BROWSER_HEIGHT,
        A.POST_BROWSER_WIDTH,
        A.POST_COOKIES,
        A.POST_JAVA_ENABLED,
        A.POST_PERSISTENT_COOKIE,
        A.DOMAIN,
        A.POST_T_TIME_INFO,
        A.PLUGINS,
        A.LAST_HIT_TIME_GMT,
        A.FIRST_HIT_TIME_GMT,
        A.VISIT_START_TIME_GMT,
        A.LAST_PURCHASE_TIME_GMT,
        A.LAST_PURCHASE_NUM,
        A.FIRST_HIT_PAGE_URL,
        A.FIRST_HIT_PAGENAME,
        A.VISIT_START_PAGE_URL,
        A.VISIT_START_PAGENAME,
        A.FIRST_HIT_REFERRER,
        A.VISIT_REFERRER,
        A.VISIT_SEARCH_ENGINE,
        A.VISIT_NUM,
        A.VISIT_PAGE_NUM,
        A.PREV_PAGE,
        A.GEO_CITY,
        A.GEO_COUNTRY,
        A.GEO_REGION,
        A.DUPLICATE_PURCHASE,
        A.NEW_VISIT,
        A.DAILY_VISITOR,
        A.HOURLY_VISITOR,
        A.MONTHLY_VISITOR,
        A.YEARLY_VISITOR,
        A.POST_CAMPAIGN,
        A.EVAR01,
        A.EVAR02,
        A.EVAR03,
        A.EVAR04,
        A.EVAR05,
        A.EVAR06,
        A.EVAR07,
        A.EVAR08,
        A.EVAR09,
        A.EVAR10,
        A.EVAR11,
        A.EVAR12,
        A.EVAR13,
        A.EVAR14,
        A.EVAR15,
        A.EVAR16,
        A.EVAR17,
        A.EVAR18,
        A.EVAR19,
        A.EVAR20,
        A.EVAR21,
        A.EVAR22,
        A.EVAR23,
        A.EVAR24,
        A.EVAR25,
        A.EVAR26,
        A.EVAR27,
        A.EVAR28,
        A.EVAR29,
        A.EVAR30,
        A.EVAR31,
        A.EVAR32,
        A.EVAR33,
        A.EVAR34,
        A.EVAR35,
        A.EVAR36,
        A.EVAR37,
        A.EVAR38,
        A.EVAR39,
        A.EVAR40,
        A.EVAR41,
        A.EVAR42,
        A.EVAR43,
        A.EVAR44,
        A.EVAR45,
        A.EVAR46,
        A.EVAR47,
        A.EVAR48,
        A.EVAR49,
        A.EVAR50,
        A.POST_EVAR01,
        A.POST_EVAR02,
        A.POST_EVAR03,
        A.POST_EVAR04,
        A.POST_EVAR05,
        A.POST_EVAR06,
        A.POST_EVAR07,
        A.POST_EVAR08,
        A.POST_EVAR09,
        A.POST_EVAR10,
        A.POST_EVAR11,
        A.POST_EVAR12,
        A.POST_EVAR13,
        A.POST_EVAR14,
        A.POST_EVAR15,
        A.POST_EVAR16,
        A.POST_EVAR17,
        A.POST_EVAR18,
        A.POST_EVAR19,
        A.POST_EVAR20,
        A.POST_EVAR21,
        A.POST_EVAR22,
        A.POST_EVAR23,
        A.POST_EVAR24,
        A.POST_EVAR25,
        A.POST_EVAR26,
        A.POST_EVAR27,
        A.POST_EVAR28,
        A.POST_EVAR29,
        A.POST_EVAR30,
        A.POST_EVAR31,
        A.POST_EVAR32,
        A.POST_EVAR33,
        A.POST_EVAR34,
        A.POST_EVAR35,
        A.POST_EVAR36,
        A.POST_EVAR37,
        A.POST_EVAR38,
        A.POST_EVAR39,
        A.POST_EVAR40,
        A.POST_EVAR41,
        A.POST_EVAR42,
        A.POST_EVAR43,
        A.POST_EVAR44,
        A.POST_EVAR45,
        A.POST_EVAR46,
        A.POST_EVAR47,
        A.POST_EVAR48,
        A.POST_EVAR49,
        A.POST_EVAR50,
        A.CLICK_ACTION,
        A.CLICK_ACTION_TYPE,
        A.CLICK_CONTEXT,
        A.CLICK_CONTEXT_TYPE,
        A.CLICK_SOURCEID,
        A.CLICK_TAG,
        A.POST_KEYWORDS,
        A.LOAD_DATE,
        A.LOAD_HOUR
 FROM OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY14 A
 WHERE (A.TRANS_ID >= 1125899906842624::float);

CREATE  VIEW CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_TTU_TY15 AS
 SELECT A.TRANS_ID,
        A.VISITOR_ID,
        A.AUTH_ID,
        A.AUTH_ID_SOURCE,
        A.PAGE_ID,
        A.PAGE_URL_ID,
        A.REFERRER_ID,
        A.USER_AGENT_ID,
        A.UA_BROWSER_ID,
        A.UA_OPERATING_SYSTEM_ID,
        A.TEST_ID,
        A.GEO_ID,
        A.BROWSER_ID,
        A.COLOR_DEPTH_ID,
        A.CONNECTION_TYPE_ID,
        A.LANGUAGE_ID,
        A.JAVASCRIPT_VERSION_ID,
        A.OPERATING_SYSTEM_ID,
        A.RESOLUTION_ID,
        A.DIM_TIME_BY_DAY_KEY,
        A.CAMPAIGN_ID,
        A.SEARCH_ENGINE_ID,
        A.COUNTRY_ID,
        A.HIT_TIMESTAMP,
        A.TY_WEEK,
        A.TY_YEAR,
        A.HIT_TIME_GMT,
        A.DATE_TIME,
        A.SERVICE,
        A.ACCEPT_LANGUAGE,
        A.VISID,
        A.USERID,
        A.CID,
        A.EVENT_LIST,
        A.HOMEPAGE,
        A.IP,
        A.PAGE_EVENT,
        A.PAGE_EVENT_VAR1,
        A.PAGE_EVENT_VAR2,
        A.PAGE_TYPE,
        A.PAGE_URL,
        A.PAGENAME,
        A.DURATION_ON_PAGE,
        A.PRODUCT_LIST,
        A.USER_SERVER,
        A.CHANNEL,
        A.PROP01,
        A.PROP02,
        A.PROP03,
        A.PROP04,
        A.PROP05,
        A.PROP06,
        A.PROP07,
        A.PROP08,
        A.PROP09,
        A.PROP10,
        A.PROP11,
        A.PROP12,
        A.PROP13,
        A.PROP14,
        A.PROP15,
        A.PROP16,
        A.PROP17,
        A.PROP18,
        A.PROP19,
        A.PROP20,
        A.PROP21,
        A.PROP22,
        A.PROP23,
        A.PROP24,
        A.PROP25,
        A.PROP26,
        A.PROP27,
        A.PROP28,
        A.PROP29,
        A.PROP30,
        A.PROP31,
        A.PROP32,
        A.PROP33,
        A.PROP34,
        A.PROP35,
        A.PROP36,
        A.PROP37,
        A.PROP38,
        A.PROP39,
        A.PROP40,
        A.PROP41,
        A.PROP42,
        A.PROP43,
        A.PROP44,
        A.PROP45,
        A.PROP46,
        A.PROP47,
        A.PROP48,
        A.PROP49,
        A.PROP50,
        A.PURCHASEID,
        A.REFERRER,
        A.STATE,
        A.USER_AGENT,
        A.ZIP,
        A.EXCLUDE_HIT,
        A.HIER1,
        A.HIER2,
        A.HIER3,
        A.HIER4,
        A.HIER5,
        A.POST_BROWSER_HEIGHT,
        A.POST_BROWSER_WIDTH,
        A.POST_COOKIES,
        A.POST_JAVA_ENABLED,
        A.POST_PERSISTENT_COOKIE,
        A.DOMAIN,
        A.POST_T_TIME_INFO,
        A.PLUGINS,
        A.LAST_HIT_TIME_GMT,
        A.FIRST_HIT_TIME_GMT,
        A.VISIT_START_TIME_GMT,
        A.LAST_PURCHASE_TIME_GMT,
        A.LAST_PURCHASE_NUM,
        A.FIRST_HIT_PAGE_URL,
        A.FIRST_HIT_PAGENAME,
        A.VISIT_START_PAGE_URL,
        A.VISIT_START_PAGENAME,
        A.FIRST_HIT_REFERRER,
        A.VISIT_REFERRER,
        A.VISIT_SEARCH_ENGINE,
        A.VISIT_NUM,
        A.VISIT_PAGE_NUM,
        A.PREV_PAGE,
        A.GEO_CITY,
        A.GEO_COUNTRY,
        A.GEO_REGION,
        A.DUPLICATE_PURCHASE,
        A.NEW_VISIT,
        A.DAILY_VISITOR,
        A.HOURLY_VISITOR,
        A.MONTHLY_VISITOR,
        A.YEARLY_VISITOR,
        A.POST_CAMPAIGN,
        A.EVAR01,
        A.EVAR02,
        A.EVAR03,
        A.EVAR04,
        A.EVAR05,
        A.EVAR06,
        A.EVAR07,
        A.EVAR08,
        A.EVAR09,
        A.EVAR10,
        A.EVAR11,
        A.EVAR12,
        A.EVAR13,
        A.EVAR14,
        A.EVAR15,
        A.EVAR16,
        A.EVAR17,
        A.EVAR18,
        A.EVAR19,
        A.EVAR20,
        A.EVAR21,
        A.EVAR22,
        A.EVAR23,
        A.EVAR24,
        A.EVAR25,
        A.EVAR26,
        A.EVAR27,
        A.EVAR28,
        A.EVAR29,
        A.EVAR30,
        A.EVAR31,
        A.EVAR32,
        A.EVAR33,
        A.EVAR34,
        A.EVAR35,
        A.EVAR36,
        A.EVAR37,
        A.EVAR38,
        A.EVAR39,
        A.EVAR40,
        A.EVAR41,
        A.EVAR42,
        A.EVAR43,
        A.EVAR44,
        A.EVAR45,
        A.EVAR46,
        A.EVAR47,
        A.EVAR48,
        A.EVAR49,
        A.EVAR50,
        A.POST_EVAR01,
        A.POST_EVAR02,
        A.POST_EVAR03,
        A.POST_EVAR04,
        A.POST_EVAR05,
        A.POST_EVAR06,
        A.POST_EVAR07,
        A.POST_EVAR08,
        A.POST_EVAR09,
        A.POST_EVAR10,
        A.POST_EVAR11,
        A.POST_EVAR12,
        A.POST_EVAR13,
        A.POST_EVAR14,
        A.POST_EVAR15,
        A.POST_EVAR16,
        A.POST_EVAR17,
        A.POST_EVAR18,
        A.POST_EVAR19,
        A.POST_EVAR20,
        A.POST_EVAR21,
        A.POST_EVAR22,
        A.POST_EVAR23,
        A.POST_EVAR24,
        A.POST_EVAR25,
        A.POST_EVAR26,
        A.POST_EVAR27,
        A.POST_EVAR28,
        A.POST_EVAR29,
        A.POST_EVAR30,
        A.POST_EVAR31,
        A.POST_EVAR32,
        A.POST_EVAR33,
        A.POST_EVAR34,
        A.POST_EVAR35,
        A.POST_EVAR36,
        A.POST_EVAR37,
        A.POST_EVAR38,
        A.POST_EVAR39,
        A.POST_EVAR40,
        A.POST_EVAR41,
        A.POST_EVAR42,
        A.POST_EVAR43,
        A.POST_EVAR44,
        A.POST_EVAR45,
        A.POST_EVAR46,
        A.POST_EVAR47,
        A.POST_EVAR48,
        A.POST_EVAR49,
        A.POST_EVAR50,
        A.CLICK_ACTION,
        A.CLICK_ACTION_TYPE,
        A.CLICK_CONTEXT,
        A.CLICK_CONTEXT_TYPE,
        A.CLICK_SOURCEID,
        A.CLICK_TAG,
        A.POST_KEYWORDS,
        A.LOAD_DATE,
        A.LOAD_HOUR
 FROM OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY15 A
 WHERE (A.TRANS_ID >= 1125899906842624::float);

CREATE  VIEW CTG_ANALYTICS_SRC.TTO_SESSIONSTART_LOG AS
 SELECT A.SESSIONSTART_LOG_KEY,
        A.START_DATE,
        A.AUTH_ID,
        A.PRIORITY_CODE,
        A.PRODUCT_ID AS SKU_ID,
        A.TAX_YEAR,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.TTO_SESSIONSTART_LOG A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.TTO_SESSIONSTART_LOG'::varchar(29)))))
 WHERE (A.AUTH_ID NOT IN ( SELECT tto_test_records.AUTH_ID AS auth_id
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)));

CREATE  VIEW CTG_ANALYTICS_SRC.ETX_ORDERS AS
 SELECT A.PRIMARY_ID,
        A.SECONDARY_ID,
        A.ENGINE_ID,
        A.PRODUCT_CODE,
        A.PRODUCT_VERSION,
        A.TAX_YEAR,
        A.CREDIT_PRIORITY_CODE,
        A.PRODUCT_STATE,
        A.ORDER_AMOUNT,
        A.ORDER_TYPE,
        A.ETX_REF_NUM,
        A.ORDER_DATE,
        A.PRICE_PRIORITY_CODE,
        A.PRODUCT_ALIAS_CODE,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.ETX_ORDERS A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.ETX_ORDERS'::varchar(19)))));

CREATE  VIEW CTG_ANALYTICS_SRC.PRS AS
 SELECT A.NET_PROMOTER_KEY,
        A.NET_PROMOTER_TS,
        A.AUTH_ID,
        A.PRODUCT_ID AS SKU_ID,
        A.LOCATION,
        A.SCORE,
        A.TAX_YEAR,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.PRS A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.PRS'::varchar(12)))))
 WHERE (A.AUTH_ID NOT IN ( SELECT tto_test_records.AUTH_ID AS auth_id
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)));

CREATE  VIEW CTG_ANALYTICS_SRC.TTO_AUTH_LOG AS
 SELECT A.AUTH_LOG_KEY,
        A.AUTH_ID,
        A.AUTH_DT,
        A.SOURCE,
        A.ROLE,
        A.TAX_YEAR,
        A.AUTH_SOURCE,
        A.PRODUCT_ID AS SKU_ID,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID,
        coalesce((A.authentication_level)::int, alo.AUTHENTICATION_LEVEL, CASE WHEN (A.AUTH_DT < '2015-02-01 00:00:00'::timestamp) THEN 25 ELSE NULL::int END) AS AUTHENTICATION_LEVEL,
        A.ip_address AS IP_ADDRESS,
        A.test_flag AS TEST_FLAG,
        A.transaction_id AS TRANSACTION_ID
 FROM ((MATT_DWH.TTO_AUTH_LOG A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.TTO_AUTH_LOG'::varchar(21))))) LEFT JOIN CTG_ANALYTICS_SRC.TTO_AUTH_LOG_OVERRIDE alo ON ((A.AUTH_LOG_KEY = alo.AUTH_LOG_KEY)))
 WHERE (A.AUTH_ID NOT IN ( SELECT tto_test_records.AUTH_ID AS auth_id
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)));

CREATE  VIEW CTG_ANALYTICS_SRC.TTO_ORDERS AS
 SELECT A.TTO_ORDERS_KEY,
        A.ORDER_DATE AS ORDER_TIMESTAMP,
        A.AUTH_ID,
        A.PRIMARY_ID,
        A.SECONDARY_ID,
        A.CURRENT_PRIORITY_CODE,
        A.PRICE_PRIORITY_CODE,
        A.CREDIT_PRIORITY_CODE,
        A.ORDER_NUMBER,
        A.PRODUCT_CODE,
        A.PAYMENT_METHOD,
        A.PAYMENT_AMOUNT,
        A.ORIGINAL_PRODUCTID AS ORIGINAL_SKU_ID,
        A.VOUCHER_CODE,
        A.TAX_YEAR,
        A.HOLD_REASON,
        A.ORDER_ORIGIN,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.TTO_ORDERS A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.TTO_ORDERS'::varchar(19)))))
 WHERE (A.AUTH_ID NOT IN ( SELECT tto_test_records.AUTH_ID AS auth_id
 FROM MATT_DWH.tto_test_records
 WHERE (tto_test_records.AUTH_ID IS NOT NULL)));

CREATE  VIEW CTG_ANALYTICS_SRC.EF_PAYMENTS AS
(((( SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS'::varchar(20))))) UNION ALL  SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS_TY13 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS_TY13'::varchar(25)))))) UNION ALL  SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS_TY12 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS_TY12'::varchar(25)))))) UNION ALL  SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS_TY11 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS_TY11'::varchar(25)))))) UNION ALL  SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS_TY10 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS_TY10'::varchar(25)))))) UNION ALL  SELECT A.EF_PAYMENTS_KEY,
        A.FILING_ID,
        A.PRIMARY_FILER_ID,
        A.SECONDARY_FILER_ID,
        A.PAYMENT_METHOD,
        A.DESCRIPTION,
        A.BANK_PRODUCT,
        A.AMOUNT,
        A.FILING_TYPE,
        A.APP,
        A.ENGINE_CODE,
        A.CREDIT_FOR_SALE_PRIORITY_CODE,
        A.ACCEPTED_DATE,
        A.TAX_YEAR,
        A.RTN,
        A.INSERTION_TIMESTAMP,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.EF_PAYMENTS_TY09 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.EF_PAYMENTS_TY09'::varchar(25)))));

CREATE  VIEW CTG_ANALYTICS_SRC.TTO_SESSION_END_LOG AS
 SELECT A.SESSION_END_LOG_KEY,
        A.SESSION_DATE,
        A.AUTH_ID,
        A.CURRENT_PRIORITY_CODE,
        A.PRICE_PRIORITY_CODE,
        A.CREDIT_PRIORITY_CODE,
        A.PRODUCT_ID AS SKU_ID,
        A.FIRST_TIME_FLAG,
        A.ORIGINAL_PRODUCTID AS ORIGINAL_SKU_ID,
        A.TAX_YEAR,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS,
        B.BATCH_EVENT_ID
 FROM (MATT_DWH.TTO_SESSION_END_LOG A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((A.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_DWH.TTO_SESSION_END_LOG'::varchar(28)))));

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_FILING_STATUS_CHANGE AS
((((( SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE'::varchar(37))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY14 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY14'::varchar(42)))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY13 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY13'::varchar(42)))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY12 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY12'::varchar(42)))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY11 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY11'::varchar(42)))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY10 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY10'::varchar(42)))))) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY,
        B.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY09 fsc JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON (((fsc.AUDIT_INS_KEY = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY09'::varchar(42)))));

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_REFUND_TRANSFER_ITEMS AS
(( SELECT rti.ORDER_NUMBER,
        rti.SEQ_NUM,
        rti.ITEM_TYPE,
        rti.PRODUCT_ALIAS,
        rti.ITEM_AMOUNT,
        rti.SALES_TAX_AMOUNT,
        rti.VOUCHER_AMOUNT,
        rti.VOUCHER_CAMPAIGN_CODE,
        rti.CREDIT_FOR_SALE_PRIORITY_CODE,
        rti.PRICING_PRIORITY_CODE,
        rti.PAID_FOR_BY_FILING_ID,
        rti.INSERTION_TIMESTAMP,
        rti.MATT_DATE,
        rti.AUDIT_INS_KEY,
        rti.AUDIT_INS_BY,
        b.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS rti JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((rti.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS'::varchar(38))))) UNION ALL  SELECT rti.ORDER_NUMBER,
        rti.SEQ_NUM,
        rti.ITEM_TYPE,
        rti.PRODUCT_ALIAS,
        rti.ITEM_AMOUNT,
        rti.SALES_TAX_AMOUNT,
        rti.VOUCHER_AMOUNT,
        rti.VOUCHER_CAMPAIGN_CODE,
        rti.CREDIT_FOR_SALE_PRIORITY_CODE,
        rti.PRICING_PRIORITY_CODE,
        rti.PAID_FOR_BY_FILING_ID,
        rti.INSERTION_TIMESTAMP,
        rti.MATT_DATE,
        rti.AUDIT_INS_KEY,
        rti.AUDIT_INS_BY,
        b.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY14 rti JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((rti.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY14'::varchar(43)))))) UNION ALL  SELECT rti.ORDER_NUMBER,
        rti.SEQ_NUM,
        rti.ITEM_TYPE,
        rti.PRODUCT_ALIAS,
        rti.ITEM_AMOUNT,
        rti.SALES_TAX_AMOUNT,
        rti.VOUCHER_AMOUNT,
        rti.VOUCHER_CAMPAIGN_CODE,
        rti.CREDIT_FOR_SALE_PRIORITY_CODE,
        rti.PRICING_PRIORITY_CODE,
        rti.PAID_FOR_BY_FILING_ID,
        rti.INSERTION_TIMESTAMP,
        rti.MATT_DATE,
        rti.AUDIT_INS_KEY,
        rti.AUDIT_INS_BY,
        b.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY13 rti JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((rti.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY13'::varchar(43)))))) UNION ALL  SELECT rti.ORDER_NUMBER,
        rti.SEQ_NUM,
        rti.ITEM_TYPE,
        rti.PRODUCT_ALIAS,
        rti.ITEM_AMOUNT,
        rti.SALES_TAX_AMOUNT,
        rti.VOUCHER_AMOUNT,
        rti.VOUCHER_CAMPAIGN_CODE,
        rti.CREDIT_FOR_SALE_PRIORITY_CODE,
        rti.PRICING_PRIORITY_CODE,
        rti.PAID_FOR_BY_FILING_ID,
        rti.INSERTION_TIMESTAMP,
        rti.MATT_DATE,
        rti.AUDIT_INS_KEY,
        rti.AUDIT_INS_BY,
        b.BATCH_EVENT_ID
 FROM (MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY12 rti JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((rti.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'MATT_STG.PSA_EFS_REFUND_TRANSFER_ITEMS_TY12'::varchar(43)))));

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_RISK_SCORE AS
(( SELECT rs.FILING_ID,
        rs.RISK_SCORE,
        rs.SCORE_DATE,
        rs.REPORT_ID,
        rs.INSERTION_TIMESTAMP,
        rs.MATT_DATE,
        rs.AUDIT_INS_KEY,
        rs.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_RISK_SCORE rs UNION ALL  SELECT rs.FILING_ID,
        rs.RISK_SCORE,
        rs.SCORE_DATE,
        rs.REPORT_ID,
        rs.INSERTION_TIMESTAMP,
        rs.MATT_DATE,
        rs.AUDIT_INS_KEY,
        rs.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_RISK_SCORE_TY14 rs) UNION ALL  SELECT rs.FILING_ID,
        rs.RISK_SCORE,
        rs.SCORE_DATE,
        rs.REPORT_ID,
        rs.INSERTION_TIMESTAMP,
        rs.MATT_DATE,
        rs.AUDIT_INS_KEY,
        rs.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_RISK_SCORE_TY13 rs) UNION ALL  SELECT rs.FILING_ID,
        rs.RISK_SCORE,
        rs.SCORE_DATE,
        rs.REPORT_ID,
        rs.INSERTION_TIMESTAMP,
        rs.MATT_DATE,
        rs.AUDIT_INS_KEY,
        rs.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_RISK_SCORE_TY12 rs;

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_FILING_STATUS_CHANGE_ACCEPTED AS
(( SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_STATUS_CHANGE fsc
 WHERE (fsc.STATUS_TYPE = 7) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY14 fsc
 WHERE (fsc.STATUS_TYPE = 7)) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY13 fsc
 WHERE (fsc.STATUS_TYPE = 7)) UNION ALL  SELECT fsc.CHANGE_ID,
        fsc.FILING_ID,
        fsc.STATUS_TYPE,
        fsc.TIMESTAMP_DTM,
        fsc.INSERTION_TIMESTAMP,
        fsc.MATT_DATE,
        fsc.AUDIT_INS_KEY,
        fsc.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_STATUS_CHANGE_TY12 fsc
 WHERE (fsc.STATUS_TYPE = 7);

CREATE  VIEW CTG_ANALYTICS_SRC.LKP_CUSTOMER_KEY_ALL_YEARS AS
 SELECT LKP_CUSTOMER_KEY.PRIMARY_ID,
        LKP_CUSTOMER_KEY.SECONDARY_ID,
        LKP_CUSTOMER_KEY.CUSTOMER_KEY,
        LKP_CUSTOMER_KEY.TAX_YEAR
 FROM CTG_ANALYTICS_SRC.LKP_CUSTOMER_KEY UNION  SELECT DIM_CUSTOMER.PRIMARY_ID,
        DIM_CUSTOMER.SECONDARY_ID,
        DIM_CUSTOMER.CUSTOMER_KEY,
        ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 WHERE (DIM_TAX_DATE.TAX_DATE_ID = (to_char((statement_timestamp())::timestamp, 'YYYYMMDDHH24'::varchar(12)))::int)) AS TAX_YEAR
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER;

CREATE  VIEW CTG_ANALYTICS_SRC.TRN_USER_PRODUCTION_TEST AS
 SELECT tto_test_records.AUTH_ID,
        tto_test_records.EMAIL_ADDRESS
 FROM MATT_DWH.tto_test_records;

CREATE  VIEW CTG_ANALYTICS_SRC.PRIMARY_FILER_LOCATION AS
((( SELECT fd.FILING_ID,
        fd.FORM_FIELD_METADATA_ID,
        fd.DATA,
        sm.FILER_ID,
        sm.RECEIVED_DATE,
        fm.FIELD_ID,
        b.BATCH_EVENT_ID
 FROM (((CAT_DWH.FORM_USAGE_DATA fd JOIN CAT_DWH.FORM_FIELD_METADATA fm ON (((fd.FORM_FIELD_METADATA_ID = fm.FORM_FIELD_METADATA_ID) AND (fm.FORMSET_SHORT = 'US'::varchar(2)) AND (fm.FORM_ID = ANY (ARRAY['F1040'::varchar(5), 'F1040A'::varchar(6), 'F1040EZ'::varchar(7)])) AND (fm.FIELD_ID = ANY (ARRAY['ZIP'::varchar(3), 'ST'::varchar(2)]))))) JOIN CAT_DWH.SUBMISSION_META_DATA sm ON ((fd.FILING_ID = sm.FILING_ID))) JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((fd.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'CAT_DWH.FORM_USAGE_DATA'::varchar(23)))))
 WHERE (fd.FORM_STATUS = 'por'::varchar(3)) UNION ALL  SELECT fd.FILING_ID AS filing_id,
        fd.FORM_FIELD_METADATA_ID AS form_field_metadata_id,
        fd.DATA AS data,
        sm.FILER_ID AS filer_id,
        sm.RECEIVED_DATE AS received_date,
        fm.FIELD_ID AS field_id,
        b.BATCH_EVENT_ID AS batch_event_id
 FROM (((CAT_TY14_DWH.FORM_USAGE_DATA fd JOIN CAT_TY14_DWH.FORM_FIELD_METADATA fm ON (((fd.FORM_FIELD_METADATA_ID = fm.FORM_FIELD_METADATA_ID) AND (fm.FORMSET_SHORT = 'US'::varchar(2)) AND (fm.FORM_ID = ANY (ARRAY['F1040'::varchar(5), 'F1040A'::varchar(6), 'F1040EZ'::varchar(7)])) AND (fm.FIELD_ID = ANY (ARRAY['ZIP'::varchar(3), 'ST'::varchar(2)]))))) JOIN CAT_TY14_DWH.SUBMISSION_META_DATA sm ON ((fd.FILING_ID = sm.FILING_ID))) JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((fd.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'CAT_TY14_DWH.FORM_USAGE_DATA'::varchar(28)))))
 WHERE (fd.FORM_STATUS = 'por'::varchar(3))) UNION ALL  SELECT fd.FILING_ID AS filing_id,
        fd.FORM_FIELD_METADATA_ID AS form_field_metadata_id,
        fd.DATA AS data,
        sm.FILER_ID AS filer_id,
        sm.RECEIVED_DATE AS received_date,
        fm.FIELD_ID AS field_id,
        b.BATCH_EVENT_ID AS batch_event_id
 FROM (((CAT_TY13_DWH.FORM_USAGE_DATA fd JOIN CAT_TY13_DWH.FORM_FIELD_METADATA fm ON (((fd.FORM_FIELD_METADATA_ID = fm.FORM_FIELD_METADATA_ID) AND (fm.FORMSET_SHORT = 'US'::varchar(2)) AND (fm.FORM_ID = ANY (ARRAY['F1040'::varchar(5), 'F1040A'::varchar(6), 'F1040EZ'::varchar(7)])) AND (fm.FIELD_ID = ANY (ARRAY['ZIP'::varchar(3), 'ST'::varchar(2)]))))) JOIN CAT_TY13_DWH.SUBMISSION_META_DATA sm ON ((fd.FILING_ID = sm.FILING_ID))) JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((fd.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'CAT_TY13_DWH.FORM_USAGE_DATA'::varchar(28)))))
 WHERE (fd.FORM_STATUS = 'por'::varchar(3))) UNION ALL  SELECT fd.FILING_ID AS filing_id,
        fd.FORM_FIELD_METADATA_ID AS form_field_metadata_id,
        fd.DATA AS data,
        sm.FILER_ID AS filer_id,
        sm.RECEIVED_DATE AS received_date,
        fm.FIELD_ID AS field_id,
        b.BATCH_EVENT_ID AS batch_event_id
 FROM (((CAT_TY12_DWH.FORM_USAGE_DATA fd JOIN CAT_TY12_DWH.FORM_FIELD_METADATA fm ON (((fd.FORM_FIELD_METADATA_ID = fm.FORM_FIELD_METADATA_ID) AND (fm.FORMSET_SHORT = 'US'::varchar(2)) AND (fm.FORM_ID = ANY (ARRAY['F1040'::varchar(5), 'F1040A'::varchar(6), 'F1040EZ'::varchar(7)])) AND (fm.FIELD_ID = ANY (ARRAY['ZIP'::varchar(3), 'ST'::varchar(2)]))))) JOIN CAT_TY12_DWH.SUBMISSION_META_DATA sm ON ((fd.FILING_ID = sm.FILING_ID))) JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((fd.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'CAT_TY12_DWH.FORM_USAGE_DATA'::varchar(28)))))
 WHERE (fd.FORM_STATUS = 'por'::varchar(3))) UNION ALL  SELECT fd.FILING_ID AS filing_id,
        fd.FORM_FIELD_METADATA_ID AS form_field_metadata_id,
        fd.DATA AS data,
        sm.FILER_ID AS filer_id,
        sm.RECEIVED_DATE AS received_date,
        fm.FIELD_ID AS field_id,
        b.BATCH_EVENT_ID AS batch_event_id
 FROM (((CAT_TY11_DWH.FORM_USAGE_DATA fd JOIN CAT_TY11_DWH.FORM_FIELD_METADATA fm ON (((fd.FORM_FIELD_METADATA_ID = fm.FORM_FIELD_METADATA_ID) AND (fm.FORMSET_SHORT = 'US'::varchar(2)) AND (fm.FORM_ID = ANY (ARRAY['F1040'::varchar(5), 'F1040A'::varchar(6), 'F1040EZ'::varchar(7)])) AND (fm.FIELD_ID = ANY (ARRAY['ZIP'::varchar(3), 'ST'::varchar(2)]))))) JOIN CAT_TY11_DWH.SUBMISSION_META_DATA sm ON ((fd.FILING_ID = sm.FILING_ID))) JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE b ON (((fd.AUDIT_INS_KEY = b.SOURCE_AUDIT_KEY) AND (b.TABLE_NAME = 'CAT_TY11_DWH.FORM_USAGE_DATA'::varchar(28)))))
 WHERE (fd.FORM_STATUS = 'por'::varchar(3));

CREATE  VIEW CTG_ANALYTICS_SRC.PRS_VERBATIM AS
 SELECT A.PRS_KEY,
        A.PRS_DATE,
        A.AUTH_ID,
        A.TAX_YEAR,
        A.PRODUCT_ENGINE,
        A.VERBATIM,
        A.AUDIT_INS_KEY,
        A.AUDIT_INS_TS,
        A.AUDIT_UPD_KEY,
        A.AUDIT_UPD_TS
 FROM MATT_DWH.PRS_VERBATIM A;

CREATE  VIEW CTG_ANALYTICS_SRC.EFS_FILING_PAYMENT AS
((((( SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2015 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT fp UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2014 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY14 fp) UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2013 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY13 fp) UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2012 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY12 fp) UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2011 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY11 fp) UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2010 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY10 fp) UNION ALL  SELECT fp.FILING_ID,
        fp.SEQ_NUM,
        2009 AS TAX_YEAR,
        fp.AMOUNT,
        fp.RTN,
        fp.PAYMENT_METHOD,
        fp.INSERTION_TIMESTAMP,
        fp.MATT_DATE,
        fp.AUDIT_INS_KEY,
        fp.AUDIT_INS_BY
 FROM MATT_STG.PSA_EFS_FILING_PAYMENT_TY09 fp;

CREATE  VIEW CTG_ANALYTICS_SRC.TRANS_CLICKSTREAM_CTG AS
( SELECT A.TRANS_ID,
        A.VISITOR_ID,
        A.AUTH_ID,
        A.AUTH_ID_SOURCE,
        A.PAGE_ID,
        A.PAGE_URL_ID,
        A.REFERRER_ID,
        A.USER_AGENT_ID,
        A.UA_BROWSER_ID,
        A.UA_OPERATING_SYSTEM_ID,
        A.TEST_ID,
        A.GEO_ID,
        A.BROWSER_ID,
        A.COLOR_DEPTH_ID,
        A.CONNECTION_TYPE_ID,
        A.LANGUAGE_ID,
        A.JAVASCRIPT_VERSION_ID,
        A.OPERATING_SYSTEM_ID,
        A.RESOLUTION_ID,
        A.DIM_TIME_BY_DAY_KEY,
        A.CAMPAIGN_ID,
        A.SEARCH_ENGINE_ID,
        A.COUNTRY_ID,
        A.HIT_TIMESTAMP,
        A.TY_WEEK,
        A.TY_YEAR,
        A.HIT_TIME_GMT,
        A.DATE_TIME,
        A.SERVICE,
        A.ACCEPT_LANGUAGE,
        A.VISID,
        A.USERID,
        A.CID,
        A.EVENT_LIST,
        A.HOMEPAGE,
        A.IP,
        A.PAGE_EVENT,
        A.PAGE_EVENT_VAR1,
        A.PAGE_EVENT_VAR2,
        A.PAGE_TYPE,
        A.PAGE_URL,
        A.PAGENAME,
        A.DURATION_ON_PAGE,
        A.PRODUCT_LIST,
        A.USER_SERVER,
        A.CHANNEL,
        A.PROP01,
        A.PROP02,
        A.PROP03,
        A.PROP04,
        A.PROP05,
        A.PROP06,
        A.PROP07,
        A.PROP08,
        A.PROP09,
        A.PROP10,
        A.PROP11,
        A.PROP12,
        A.PROP13,
        A.PROP14,
        A.PROP15,
        A.PROP16,
        A.PROP17,
        A.PROP18,
        A.PROP19,
        A.PROP20,
        A.PROP21,
        A.PROP22,
        A.PROP23,
        A.PROP24,
        A.PROP25,
        A.PROP26,
        A.PROP27,
        A.PROP28,
        A.PROP29,
        A.PROP30,
        A.PROP31,
        A.PROP32,
        A.PROP33,
        A.PROP34,
        A.PROP35,
        A.PROP36,
        A.PROP37,
        A.PROP38,
        A.PROP39,
        A.PROP40,
        A.PROP41,
        A.PROP42,
        A.PROP43,
        A.PROP44,
        A.PROP45,
        A.PROP46,
        A.PROP47,
        A.PROP48,
        A.PROP49,
        A.PROP50,
        A.PURCHASEID,
        A.REFERRER,
        A.STATE,
        A.USER_AGENT,
        A.ZIP,
        A.EXCLUDE_HIT,
        A.HIER1,
        A.HIER2,
        A.HIER3,
        A.HIER4,
        A.HIER5,
        A.POST_BROWSER_HEIGHT,
        A.POST_BROWSER_WIDTH,
        A.POST_COOKIES,
        A.POST_JAVA_ENABLED,
        A.POST_PERSISTENT_COOKIE,
        A.DOMAIN,
        A.POST_T_TIME_INFO,
        A.PLUGINS,
        A.LAST_HIT_TIME_GMT,
        A.FIRST_HIT_TIME_GMT,
        A.VISIT_START_TIME_GMT,
        A.LAST_PURCHASE_TIME_GMT,
        A.LAST_PURCHASE_NUM,
        A.FIRST_HIT_PAGE_URL,
        A.FIRST_HIT_PAGENAME,
        A.VISIT_START_PAGE_URL,
        A.VISIT_START_PAGENAME,
        A.FIRST_HIT_REFERRER,
        A.VISIT_REFERRER,
        A.VISIT_SEARCH_ENGINE,
        A.VISIT_NUM,
        A.VISIT_PAGE_NUM,
        A.PREV_PAGE,
        A.GEO_CITY,
        A.GEO_COUNTRY,
        A.GEO_REGION,
        A.DUPLICATE_PURCHASE,
        A.NEW_VISIT,
        A.DAILY_VISITOR,
        A.HOURLY_VISITOR,
        A.MONTHLY_VISITOR,
        A.YEARLY_VISITOR,
        A.POST_CAMPAIGN,
        A.EVAR01,
        A.EVAR02,
        A.EVAR03,
        A.EVAR04,
        A.EVAR05,
        A.EVAR06,
        A.EVAR07,
        A.EVAR08,
        A.EVAR09,
        A.EVAR10,
        A.EVAR11,
        A.EVAR12,
        A.EVAR13,
        A.EVAR14,
        A.EVAR15,
        A.EVAR16,
        A.EVAR17,
        A.EVAR18,
        A.EVAR19,
        A.EVAR20,
        A.EVAR21,
        A.EVAR22,
        A.EVAR23,
        A.EVAR24,
        A.EVAR25,
        A.EVAR26,
        A.EVAR27,
        A.EVAR28,
        A.EVAR29,
        A.EVAR30,
        A.EVAR31,
        A.EVAR32,
        A.EVAR33,
        A.EVAR34,
        A.EVAR35,
        A.EVAR36,
        A.EVAR37,
        A.EVAR38,
        A.EVAR39,
        A.EVAR40,
        A.EVAR41,
        A.EVAR42,
        A.EVAR43,
        A.EVAR44,
        A.EVAR45,
        A.EVAR46,
        A.EVAR47,
        A.EVAR48,
        A.EVAR49,
        A.EVAR50,
        A.POST_EVAR01,
        A.POST_EVAR02,
        A.POST_EVAR03,
        A.POST_EVAR04,
        A.POST_EVAR05,
        A.POST_EVAR06,
        A.POST_EVAR07,
        A.POST_EVAR08,
        A.POST_EVAR09,
        A.POST_EVAR10,
        A.POST_EVAR11,
        A.POST_EVAR12,
        A.POST_EVAR13,
        A.POST_EVAR14,
        A.POST_EVAR15,
        A.POST_EVAR16,
        A.POST_EVAR17,
        A.POST_EVAR18,
        A.POST_EVAR19,
        A.POST_EVAR20,
        A.POST_EVAR21,
        A.POST_EVAR22,
        A.POST_EVAR23,
        A.POST_EVAR24,
        A.POST_EVAR25,
        A.POST_EVAR26,
        A.POST_EVAR27,
        A.POST_EVAR28,
        A.POST_EVAR29,
        A.POST_EVAR30,
        A.POST_EVAR31,
        A.POST_EVAR32,
        A.POST_EVAR33,
        A.POST_EVAR34,
        A.POST_EVAR35,
        A.POST_EVAR36,
        A.POST_EVAR37,
        A.POST_EVAR38,
        A.POST_EVAR39,
        A.POST_EVAR40,
        A.POST_EVAR41,
        A.POST_EVAR42,
        A.POST_EVAR43,
        A.POST_EVAR44,
        A.POST_EVAR45,
        A.POST_EVAR46,
        A.POST_EVAR47,
        A.POST_EVAR48,
        A.POST_EVAR49,
        A.POST_EVAR50,
        A.CLICK_ACTION,
        A.CLICK_ACTION_TYPE,
        A.CLICK_CONTEXT,
        A.CLICK_CONTEXT_TYPE,
        A.CLICK_SOURCEID,
        A.CLICK_TAG,
        A.POST_KEYWORDS,
        A.LOAD_DATE,
        A.LOAD_HOUR,
        B.BATCH_EVENT_ID
 FROM (OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY15 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON ((((CASE WHEN (A.TRANS_ID < 1125899906842624::float) THEN 1000000000000000 ELSE 2000000000000000 END + ((to_char(A.LOAD_DATE, 'YYYYMMDD'::varchar(8)) || coalesce(A.LOAD_HOUR, '23'::varchar(2))))::int) = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY15'::varchar(42))))) UNION ALL  SELECT A.TRANS_ID,
        A.VISITOR_ID,
        A.AUTH_ID,
        A.AUTH_ID_SOURCE,
        A.PAGE_ID,
        A.PAGE_URL_ID,
        A.REFERRER_ID,
        A.USER_AGENT_ID,
        A.UA_BROWSER_ID,
        A.UA_OPERATING_SYSTEM_ID,
        A.TEST_ID,
        A.GEO_ID,
        A.BROWSER_ID,
        A.COLOR_DEPTH_ID,
        A.CONNECTION_TYPE_ID,
        A.LANGUAGE_ID,
        A.JAVASCRIPT_VERSION_ID,
        A.OPERATING_SYSTEM_ID,
        A.RESOLUTION_ID,
        A.DIM_TIME_BY_DAY_KEY,
        A.CAMPAIGN_ID,
        A.SEARCH_ENGINE_ID,
        A.COUNTRY_ID,
        A.HIT_TIMESTAMP,
        A.TY_WEEK,
        A.TY_YEAR,
        A.HIT_TIME_GMT,
        A.DATE_TIME,
        A.SERVICE,
        A.ACCEPT_LANGUAGE,
        A.VISID,
        A.USERID,
        A.CID,
        A.EVENT_LIST,
        A.HOMEPAGE,
        A.IP,
        A.PAGE_EVENT,
        A.PAGE_EVENT_VAR1,
        A.PAGE_EVENT_VAR2,
        A.PAGE_TYPE,
        A.PAGE_URL,
        A.PAGENAME,
        A.DURATION_ON_PAGE,
        A.PRODUCT_LIST,
        A.USER_SERVER,
        A.CHANNEL,
        A.PROP01,
        A.PROP02,
        A.PROP03,
        A.PROP04,
        A.PROP05,
        A.PROP06,
        A.PROP07,
        A.PROP08,
        A.PROP09,
        A.PROP10,
        A.PROP11,
        A.PROP12,
        A.PROP13,
        A.PROP14,
        A.PROP15,
        A.PROP16,
        A.PROP17,
        A.PROP18,
        A.PROP19,
        A.PROP20,
        A.PROP21,
        A.PROP22,
        A.PROP23,
        A.PROP24,
        A.PROP25,
        A.PROP26,
        A.PROP27,
        A.PROP28,
        A.PROP29,
        A.PROP30,
        A.PROP31,
        A.PROP32,
        A.PROP33,
        A.PROP34,
        A.PROP35,
        A.PROP36,
        A.PROP37,
        A.PROP38,
        A.PROP39,
        A.PROP40,
        A.PROP41,
        A.PROP42,
        A.PROP43,
        A.PROP44,
        A.PROP45,
        A.PROP46,
        A.PROP47,
        A.PROP48,
        A.PROP49,
        A.PROP50,
        A.PURCHASEID,
        A.REFERRER,
        A.STATE,
        A.USER_AGENT,
        A.ZIP,
        A.EXCLUDE_HIT,
        A.HIER1,
        A.HIER2,
        A.HIER3,
        A.HIER4,
        A.HIER5,
        A.POST_BROWSER_HEIGHT,
        A.POST_BROWSER_WIDTH,
        A.POST_COOKIES,
        A.POST_JAVA_ENABLED,
        A.POST_PERSISTENT_COOKIE,
        A.DOMAIN,
        A.POST_T_TIME_INFO,
        A.PLUGINS,
        A.LAST_HIT_TIME_GMT,
        A.FIRST_HIT_TIME_GMT,
        A.VISIT_START_TIME_GMT,
        A.LAST_PURCHASE_TIME_GMT,
        A.LAST_PURCHASE_NUM,
        A.FIRST_HIT_PAGE_URL,
        A.FIRST_HIT_PAGENAME,
        A.VISIT_START_PAGE_URL,
        A.VISIT_START_PAGENAME,
        A.FIRST_HIT_REFERRER,
        A.VISIT_REFERRER,
        A.VISIT_SEARCH_ENGINE,
        A.VISIT_NUM,
        A.VISIT_PAGE_NUM,
        A.PREV_PAGE,
        A.GEO_CITY,
        A.GEO_COUNTRY,
        A.GEO_REGION,
        A.DUPLICATE_PURCHASE,
        A.NEW_VISIT,
        A.DAILY_VISITOR,
        A.HOURLY_VISITOR,
        A.MONTHLY_VISITOR,
        A.YEARLY_VISITOR,
        A.POST_CAMPAIGN,
        A.EVAR01,
        A.EVAR02,
        A.EVAR03,
        A.EVAR04,
        A.EVAR05,
        A.EVAR06,
        A.EVAR07,
        A.EVAR08,
        A.EVAR09,
        A.EVAR10,
        A.EVAR11,
        A.EVAR12,
        A.EVAR13,
        A.EVAR14,
        A.EVAR15,
        A.EVAR16,
        A.EVAR17,
        A.EVAR18,
        A.EVAR19,
        A.EVAR20,
        A.EVAR21,
        A.EVAR22,
        A.EVAR23,
        A.EVAR24,
        A.EVAR25,
        A.EVAR26,
        A.EVAR27,
        A.EVAR28,
        A.EVAR29,
        A.EVAR30,
        A.EVAR31,
        A.EVAR32,
        A.EVAR33,
        A.EVAR34,
        A.EVAR35,
        A.EVAR36,
        A.EVAR37,
        A.EVAR38,
        A.EVAR39,
        A.EVAR40,
        A.EVAR41,
        A.EVAR42,
        A.EVAR43,
        A.EVAR44,
        A.EVAR45,
        A.EVAR46,
        A.EVAR47,
        A.EVAR48,
        A.EVAR49,
        A.EVAR50,
        A.POST_EVAR01,
        A.POST_EVAR02,
        A.POST_EVAR03,
        A.POST_EVAR04,
        A.POST_EVAR05,
        A.POST_EVAR06,
        A.POST_EVAR07,
        A.POST_EVAR08,
        A.POST_EVAR09,
        A.POST_EVAR10,
        A.POST_EVAR11,
        A.POST_EVAR12,
        A.POST_EVAR13,
        A.POST_EVAR14,
        A.POST_EVAR15,
        A.POST_EVAR16,
        A.POST_EVAR17,
        A.POST_EVAR18,
        A.POST_EVAR19,
        A.POST_EVAR20,
        A.POST_EVAR21,
        A.POST_EVAR22,
        A.POST_EVAR23,
        A.POST_EVAR24,
        A.POST_EVAR25,
        A.POST_EVAR26,
        A.POST_EVAR27,
        A.POST_EVAR28,
        A.POST_EVAR29,
        A.POST_EVAR30,
        A.POST_EVAR31,
        A.POST_EVAR32,
        A.POST_EVAR33,
        A.POST_EVAR34,
        A.POST_EVAR35,
        A.POST_EVAR36,
        A.POST_EVAR37,
        A.POST_EVAR38,
        A.POST_EVAR39,
        A.POST_EVAR40,
        A.POST_EVAR41,
        A.POST_EVAR42,
        A.POST_EVAR43,
        A.POST_EVAR44,
        A.POST_EVAR45,
        A.POST_EVAR46,
        A.POST_EVAR47,
        A.POST_EVAR48,
        A.POST_EVAR49,
        A.POST_EVAR50,
        A.CLICK_ACTION,
        A.CLICK_ACTION_TYPE,
        A.CLICK_CONTEXT,
        A.CLICK_CONTEXT_TYPE,
        A.CLICK_SOURCEID,
        A.CLICK_TAG,
        A.POST_KEYWORDS,
        A.LOAD_DATE,
        A.LOAD_HOUR,
        B.BATCH_EVENT_ID
 FROM (OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY14 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON ((((CASE WHEN (A.TRANS_ID < 1125899906842624::float) THEN 1000000000000000 ELSE 2000000000000000 END + ((to_char(A.LOAD_DATE, 'YYYYMMDD'::varchar(8)) || coalesce(A.LOAD_HOUR, '23'::varchar(2))))::int) = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'OMT_CTG_DWH_DEV.TRANS_CLICKSTREAM_CTG_TY14'::varchar(42)))))) UNION ALL  SELECT A.TRANS_ID,
        A.VISITOR_ID,
        A.AUTH_ID,
        A.AUTH_ID_SOURCE,
        A.PAGE_ID,
        A.PAGE_URL_ID,
        A.REFERRER_ID,
        A.USER_AGENT_ID,
        A.UA_BROWSER_ID,
        A.UA_OPERATING_SYSTEM_ID,
        A.TEST_ID,
        A.GEO_ID,
        A.BROWSER_ID,
        A.COLOR_DEPTH_ID,
        A.CONNECTION_TYPE_ID,
        A.LANGUAGE_ID,
        A.JAVASCRIPT_VERSION_ID,
        A.OPERATING_SYSTEM_ID,
        A.RESOLUTION_ID,
        A.DIM_TIME_BY_DAY_KEY,
        A.CAMPAIGN_ID,
        A.SEARCH_ENGINE_ID,
        A.COUNTRY_ID,
        A.HIT_TIMESTAMP,
        A.TY_WEEK,
        A.TY_YEAR,
        A.HIT_TIME_GMT,
        A.DATE_TIME,
        A.SERVICE,
        A.ACCEPT_LANGUAGE,
        A.VISID,
        A.USERID,
        A.CID,
        A.EVENT_LIST,
        A.HOMEPAGE,
        A.IP,
        A.PAGE_EVENT,
        A.PAGE_EVENT_VAR1,
        A.PAGE_EVENT_VAR2,
        A.PAGE_TYPE,
        A.PAGE_URL,
        A.PAGENAME,
        A.DURATION_ON_PAGE,
        A.PRODUCT_LIST,
        A.USER_SERVER,
        A.CHANNEL,
        A.PROP01,
        A.PROP02,
        A.PROP03,
        A.PROP04,
        A.PROP05,
        A.PROP06,
        A.PROP07,
        A.PROP08,
        A.PROP09,
        A.PROP10,
        A.PROP11,
        A.PROP12,
        A.PROP13,
        A.PROP14,
        A.PROP15,
        A.PROP16,
        A.PROP17,
        A.PROP18,
        A.PROP19,
        A.PROP20,
        A.PROP21,
        A.PROP22,
        A.PROP23,
        A.PROP24,
        A.PROP25,
        A.PROP26,
        A.PROP27,
        A.PROP28,
        A.PROP29,
        A.PROP30,
        A.PROP31,
        A.PROP32,
        A.PROP33,
        A.PROP34,
        A.PROP35,
        A.PROP36,
        A.PROP37,
        A.PROP38,
        A.PROP39,
        A.PROP40,
        A.PROP41,
        A.PROP42,
        A.PROP43,
        A.PROP44,
        A.PROP45,
        A.PROP46,
        A.PROP47,
        A.PROP48,
        A.PROP49,
        A.PROP50,
        A.PURCHASEID,
        A.REFERRER,
        A.STATE,
        A.USER_AGENT,
        A.ZIP,
        A.EXCLUDE_HIT,
        A.HIER1,
        A.HIER2,
        A.HIER3,
        A.HIER4,
        A.HIER5,
        A.POST_BROWSER_HEIGHT,
        A.POST_BROWSER_WIDTH,
        A.POST_COOKIES,
        A.POST_JAVA_ENABLED,
        A.POST_PERSISTENT_COOKIE,
        A.DOMAIN,
        A.POST_T_TIME_INFO,
        A.PLUGINS,
        A.LAST_HIT_TIME_GMT,
        A.FIRST_HIT_TIME_GMT,
        A.VISIT_START_TIME_GMT,
        A.LAST_PURCHASE_TIME_GMT,
        A.LAST_PURCHASE_NUM,
        A.FIRST_HIT_PAGE_URL,
        A.FIRST_HIT_PAGENAME,
        A.VISIT_START_PAGE_URL,
        A.VISIT_START_PAGENAME,
        A.FIRST_HIT_REFERRER,
        A.VISIT_REFERRER,
        A.VISIT_SEARCH_ENGINE,
        A.VISIT_NUM,
        A.VISIT_PAGE_NUM,
        A.PREV_PAGE,
        A.GEO_CITY,
        A.GEO_COUNTRY,
        A.GEO_REGION,
        A.DUPLICATE_PURCHASE,
        A.NEW_VISIT,
        A.DAILY_VISITOR,
        A.HOURLY_VISITOR,
        A.MONTHLY_VISITOR,
        A.YEARLY_VISITOR,
        A.POST_CAMPAIGN,
        A.EVAR01,
        A.EVAR02,
        A.EVAR03,
        A.EVAR04,
        A.EVAR05,
        A.EVAR06,
        A.EVAR07,
        A.EVAR08,
        A.EVAR09,
        A.EVAR10,
        A.EVAR11,
        A.EVAR12,
        A.EVAR13,
        A.EVAR14,
        A.EVAR15,
        A.EVAR16,
        A.EVAR17,
        A.EVAR18,
        A.EVAR19,
        A.EVAR20,
        A.EVAR21,
        A.EVAR22,
        A.EVAR23,
        A.EVAR24,
        A.EVAR25,
        A.EVAR26,
        A.EVAR27,
        A.EVAR28,
        A.EVAR29,
        A.EVAR30,
        A.EVAR31,
        A.EVAR32,
        A.EVAR33,
        A.EVAR34,
        A.EVAR35,
        A.EVAR36,
        A.EVAR37,
        A.EVAR38,
        A.EVAR39,
        A.EVAR40,
        A.EVAR41,
        A.EVAR42,
        A.EVAR43,
        A.EVAR44,
        A.EVAR45,
        A.EVAR46,
        A.EVAR47,
        A.EVAR48,
        A.EVAR49,
        A.EVAR50,
        A.POST_EVAR01,
        A.POST_EVAR02,
        A.POST_EVAR03,
        A.POST_EVAR04,
        A.POST_EVAR05,
        A.POST_EVAR06,
        A.POST_EVAR07,
        A.POST_EVAR08,
        A.POST_EVAR09,
        A.POST_EVAR10,
        A.POST_EVAR11,
        A.POST_EVAR12,
        A.POST_EVAR13,
        A.POST_EVAR14,
        A.POST_EVAR15,
        A.POST_EVAR16,
        A.POST_EVAR17,
        A.POST_EVAR18,
        A.POST_EVAR19,
        A.POST_EVAR20,
        A.POST_EVAR21,
        A.POST_EVAR22,
        A.POST_EVAR23,
        A.POST_EVAR24,
        A.POST_EVAR25,
        A.POST_EVAR26,
        A.POST_EVAR27,
        A.POST_EVAR28,
        A.POST_EVAR29,
        A.POST_EVAR30,
        A.POST_EVAR31,
        A.POST_EVAR32,
        A.POST_EVAR33,
        A.POST_EVAR34,
        A.POST_EVAR35,
        A.POST_EVAR36,
        A.POST_EVAR37,
        A.POST_EVAR38,
        A.POST_EVAR39,
        A.POST_EVAR40,
        A.POST_EVAR41,
        A.POST_EVAR42,
        A.POST_EVAR43,
        A.POST_EVAR44,
        A.POST_EVAR45,
        A.POST_EVAR46,
        A.POST_EVAR47,
        A.POST_EVAR48,
        A.POST_EVAR49,
        A.POST_EVAR50,
        A.CLICK_ACTION,
        A.CLICK_ACTION_TYPE,
        A.CLICK_CONTEXT,
        A.CLICK_CONTEXT_TYPE,
        A.CLICK_SOURCEID,
        A.CLICK_TAG,
        A.POST_KEYWORDS,
        A.LOAD_DATE,
        A.load_hour AS LOAD_HOUR,
        B.BATCH_EVENT_ID
 FROM (OMT_CTG_DWH.TRANS_CLICKSTREAM_CTG_TY13 A JOIN CTG_ANALYTICS_ADMIN.ETL_BRIDGE B ON ((((CASE WHEN (A.TRANS_ID < 1125899906842624::float) THEN 1000000000000000 ELSE 2000000000000000 END + ((to_char(A.LOAD_DATE, 'YYYYMMDD'::varchar(8)) || coalesce(A.load_hour, '23'::varchar(2))))::int) = B.SOURCE_AUDIT_KEY) AND (B.TABLE_NAME = 'OMT_CTG_DWH.TRANS_CLICKSTREAM_CTG_TY13'::varchar(38)))));

CREATE  VIEW CTG_ANALYTICS.AGG_CUSTOMER_REVENUE_BAK AS
 SELECT FT.CUSTOMER_KEY,
        FT.AUTH_ID,
        FT.TAX_YEAR,
        ((((((((coalesce(CASE WHEN ((FT.TAX_YEAR = 2014) AND (MB_REV.MB_ATTACH = 1)) THEN 0.0 ELSE FT.ORDER_AMOUNT END, 0.0) + coalesce(ST.STATE_REV, 0.0)) + coalesce(MB_REV.MB_REVENUE, 0.0)) + coalesce(AD.AD_REV, 0.0)) + coalesce(RT.RT_REV, 0.0)) + coalesce(MAX_REV.MAX_REV, 0.0)) + coalesce(PS.PS_REV, 0.0)) + coalesce(QBSUB.QB_SUBSCRIPTION_REVENUE, 0.0)) + coalesce(QBTTSUB.QBTT_SUBSCRIPTION_REVENUE, 0.0)) AS TOTAL_REVENUE,
        CASE WHEN ((FT.TAX_YEAR = 2014) AND (MB_REV.MB_ATTACH = 1)) THEN 0.0 ELSE FT.ORDER_AMOUNT END AS FEDERAL_REVENUE,
        ST.STATE_REV AS STATE_REVENUE,
        coalesce(ST.STATE_ATTACH_COUNT, 0) AS STATE_ATTACH_COUNT,
        MB_REV.MB_REVENUE AS MINDBENDER_REVENUE,
        MB_REV.MB_ATTACH AS MINDBENDER_FLAG,
        RT.RT_CA_REV AS CA_REFUND_TRANSFER_REVENUE,
        coalesce(RT.RT_CA_ATTACH, 0) AS CA_REFUND_TRANSFER_FLAG,
        RT.RT_NON_CA_REV AS NON_CA_REFUND_TRANSFER_REVENUE,
        coalesce(RT.RT_NON_CA_ATTACH, 0) AS NON_CA_REFUND_TRANSFER_FLAG,
        RT.RT_REV AS REFUND_TRANSFER_REVENUE,
        coalesce(RT.RT_ATTACH, 0) AS REFUND_TRANSFER_FLAG,
        AD.AD_CA_REV AS CA_AUDIT_DEFENSE_REVENUE,
        coalesce(AD.AD_CA_ATTACH, 0) AS CA_AUDIT_DEFENSE_FLAG,
        AD.AD_NON_CA_REV AS NON_CA_AUDIT_DEFENSE_REVENUE,
        coalesce(AD.AD_NON_CA_ATTACH, 0) AS NON_CA_AUDIT_DEFENSE_FLAG,
        AD.AD_REV AS AUDIT_DEFENSE_REVENUE,
        coalesce(AD.AD_ATTACH, 0) AS AUDIT_DEFENSE_FLAG,
        MAX_REV.CA_MAX_REV AS CA_MAX_REVENUE,
        coalesce(MAX_REV.CA_MAX_FLAG, 0) AS CA_MAX_FLAG,
        MAX_REV.NON_CA_MAX_REV AS NON_CA_MAX_REVENUE,
        coalesce(MAX_REV.NON_CA_MAX_FLAG, 0) AS NON_CA_MAX_FLAG,
        MAX_REV.MAX_REV AS MAX_REVENUE,
        coalesce(MAX_REV.MAX_FLAG, 0) AS MAX_FLAG,
        PS.PS_REV AS PS_REVENUE,
        coalesce(PS.PS_FLAG, 0) AS PS_FLAG,
        QBSUB.QB_SUBSCRIPTION_REVENUE,
        coalesce(QBSUB.QB_SUBSCRIPTION_FLAG, 0) AS QB_SUBSCRIPTION_FLAG,
        QBTTSUB.QBTT_SUBSCRIPTION_REVENUE,
        coalesce(QBTTSUB.QBTT_SUBSCRIPTION_FLAG, 0) AS QBTT_SUBSCRIPTION_FLAG
 FROM (((((((((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED STCR ON ((FT.TAXORDER_ID = STCR.TAXORDER_ID))) LEFT JOIN ( SELECT TY14_MB_REVENUE.CUSTOMER_KEY,
        TY14_MB_REVENUE.TAX_YEAR,
        TY14_MB_REVENUE.MB_REVENUE,
        TY14_MB_REVENUE.MB_ATTACH
 FROM ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        FT.ORDER_AMOUNT AS MB_REVENUE,
        1 AS MB_ATTACH
 FROM (((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED STCR ON ((FT.TAXORDER_ID = STCR.TAXORDER_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS PA ON ((FT.PRODUCT_ALIAS_ID = PA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((PA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'MB'::varchar(2)))))
 WHERE (FT.TAX_YEAR = 2014)) TY14_MB_REVENUE UNION  SELECT NON_TY14_MB_REVENUE.CUSTOMER_KEY,
        NON_TY14_MB_REVENUE.TAX_YEAR,
        NON_TY14_MB_REVENUE.MB_REVENUE,
        NON_TY14_MB_REVENUE.MB_ATTACH
 FROM ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        FT.ORDER_AMOUNT AS MB_REVENUE,
        1 AS MB_ATTACH
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS PA ON ((FT.PRODUCT_ALIAS_ID = PA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((PA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'MB'::varchar(2)))))
 WHERE (FT.TAX_YEAR <> 2014)) NON_TY14_MB_REVENUE) MB_REV ON (((FT.CUSTOMER_KEY = MB_REV.CUSTOMER_KEY) AND (FT.TAX_YEAR = MB_REV.TAX_YEAR)))) LEFT JOIN ( SELECT STATE_REV_BY_STATES.CUSTOMER_KEY,
        STATE_REV_BY_STATES.TAX_YEAR,
        count(STATE_REV_BY_STATES.STATE_REV) AS STATE_ATTACH_COUNT,
        sum(STATE_REV_BY_STATES.STATE_REV) AS STATE_REV
 FROM ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        substr(DPA.ITEM_ALIAS_CODE, 4, 2) AS STATE_SKU,
        min(coalesce(FT.ORDER_AMOUNT, 0::numeric(18,0))) AS STATE_REV
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((FT.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT DP ON ((DPA.PRODUCT_ID = DP.PRODUCT_ID)))
 WHERE (DP.PRODUCT_FAMILY_DESCRIPTION ~~* '%TURBOTAX WEB - STATE%'::varchar(22))
 GROUP BY FT.CUSTOMER_KEY,
          FT.TAX_YEAR,
          substr(DPA.ITEM_ALIAS_CODE, 4, 2)) STATE_REV_BY_STATES
 GROUP BY STATE_REV_BY_STATES.CUSTOMER_KEY,
          STATE_REV_BY_STATES.TAX_YEAR) ST ON (((ST.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (ST.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT coalesce(CA.CUSTOMER_KEY, NON.CUSTOMER_KEY) AS CUSTOMER_KEY,
        coalesce(CA.TAX_YEAR, NON.TAX_YEAR) AS TAX_YEAR,
        CA.AD_CA_REV,
        coalesce(CA.AD_CA_FLAG, 0) AS AD_CA_ATTACH,
        NON.AD_NON_CA_REV,
        coalesce(NON.AD_NON_CA_FLAG, 0) AS AD_NON_CA_ATTACH,
        coalesce(CA.AD_CA_REV, NON.AD_NON_CA_REV) AS AD_REV,
        coalesce(CA.AD_CA_FLAG, NON.AD_NON_CA_FLAG) AS AD_ATTACH
 FROM (( SELECT TAXORDER.CUSTOMER_KEY,
        TAXORDER.TAX_YEAR,
        max(TAXORDER.ORDER_AMOUNT) AS AD_CA_REV,
        1 AS AD_CA_FLAG
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON (((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID) AND (BUNDLE.BUNDLE_NAME = 'AD'::varchar(2)))))) SUBSET ON (((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID) AND (SUBSET.SUB_BUNDLE_NAME = 'CA'::varchar(2)))))
 GROUP BY TAXORDER.CUSTOMER_KEY,
          TAXORDER.TAX_YEAR) CA FULL JOIN ( SELECT TAXORDER.CUSTOMER_KEY,
        TAXORDER.TAX_YEAR,
        max(TAXORDER.ORDER_AMOUNT) AS AD_NON_CA_REV,
        1 AS AD_NON_CA_FLAG
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON (((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID) AND (BUNDLE.BUNDLE_NAME = 'AD'::varchar(2)))))) SUBSET ON (((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID) AND (SUBSET.SUB_BUNDLE_NAME = 'non-CA'::varchar(6)))))
 GROUP BY TAXORDER.CUSTOMER_KEY,
          TAXORDER.TAX_YEAR) NON ON (((CA.CUSTOMER_KEY = NON.CUSTOMER_KEY) AND (CA.TAX_YEAR = NON.TAX_YEAR))))) AD ON (((AD.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (AD.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT coalesce(C.CUSTOMER_KEY, N.CUSTOMER_KEY) AS CUSTOMER_KEY,
        coalesce(C.TAX_YEAR, N.TAX_YEAR) AS TAX_YEAR,
        C.TOTAL_REFUND_TRANSFER AS RT_CA_REV,
        coalesce(C.CA_FLAG, 0) AS RT_CA_ATTACH,
        N.TOTAL_REFUND_TRANSFER AS RT_NON_CA_REV,
        coalesce(N.NON_CA_FLAG, 0) AS RT_NON_CA_ATTACH,
        coalesce(C.TOTAL_REFUND_TRANSFER, N.TOTAL_REFUND_TRANSFER) AS RT_REV,
        coalesce(C.CA_FLAG, N.NON_CA_FLAG) AS RT_ATTACH
 FROM (( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        max(FT.ORDER_AMOUNT) AS TOTAL_REFUND_TRANSFER,
        1 AS CA_FLAG
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS PA ON ((FT.PRODUCT_ALIAS_ID = PA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((PA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'RT'::varchar(2)) AND (BR.SUB_BUNDLE_NAME = 'CA'::varchar(2)))))
 GROUP BY FT.CUSTOMER_KEY,
          FT.TAX_YEAR) C FULL JOIN ( SELECT SUB.CUSTOMER_KEY,
        SUB.TAX_YEAR,
        SUB.ORDER_AMOUNT AS TOTAL_REFUND_TRANSFER,
        SUB.NON_CA_FLAG
 FROM ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        FT.ORDER_AMOUNT,
        row_number() OVER (PARTITION BY FT.CUSTOMER_KEY, FT.TAX_YEAR ORDER BY FT.ORDER_TIMESTAMP) AS RN,
        1 AS NON_CA_FLAG
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS PA ON ((FT.PRODUCT_ALIAS_ID = PA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((PA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'RT'::varchar(2)) AND (BR.SUB_BUNDLE_NAME = 'non-CA'::varchar(6)))))) SUB
 WHERE (SUB.RN = 1)) N ON (((C.CUSTOMER_KEY = N.CUSTOMER_KEY) AND (C.TAX_YEAR = N.TAX_YEAR))))) RT ON (((RT.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (RT.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT coalesce(CA.CUSTOMER_KEY, NON.CUSTOMER_KEY) AS CUSTOMER_KEY,
        coalesce(CA.TAX_YEAR, NON.TAX_YEAR) AS TAX_YEAR,
        CA.CA_MAX_REV,
        coalesce(CA.CA_MAX_FLAG, 0) AS CA_MAX_FLAG,
        NON.NON_CA_MAX_REV,
        coalesce(NON.NON_CA_MAX_FLAG, 0) AS NON_CA_MAX_FLAG,
        coalesce(CA.CA_MAX_REV, NON.NON_CA_MAX_REV) AS MAX_REV,
        coalesce(CA.CA_MAX_FLAG, NON.NON_CA_MAX_FLAG) AS MAX_FLAG
 FROM (( SELECT TAXORDER.CUSTOMER_KEY,
        TAXORDER.TAX_YEAR,
        max(TAXORDER.ORDER_AMOUNT) AS CA_MAX_REV,
        1 AS CA_MAX_FLAG
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON (((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID) AND (BUNDLE.BUNDLE_NAME = 'MAX'::varchar(3)))))) SUBSET ON (((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID) AND (SUBSET.SUB_BUNDLE_NAME = 'CA'::varchar(2)))))
 GROUP BY TAXORDER.CUSTOMER_KEY,
          TAXORDER.TAX_YEAR) CA FULL JOIN ( SELECT TAXORDER.CUSTOMER_KEY,
        TAXORDER.TAX_YEAR,
        max(TAXORDER.ORDER_AMOUNT) AS NON_CA_MAX_REV,
        1 AS NON_CA_MAX_FLAG
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON (((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID) AND (BUNDLE.BUNDLE_NAME = 'MAX'::varchar(3)))))) SUBSET ON (((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID) AND (SUBSET.SUB_BUNDLE_NAME = 'non-CA'::varchar(6)))))
 GROUP BY TAXORDER.CUSTOMER_KEY,
          TAXORDER.TAX_YEAR) NON ON (((CA.CUSTOMER_KEY = NON.CUSTOMER_KEY) AND (CA.TAX_YEAR = NON.TAX_YEAR))))) MAX_REV ON (((MAX_REV.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (MAX_REV.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT TAXORDER.CUSTOMER_KEY,
        TAXORDER.TAX_YEAR,
        max(TAXORDER.ORDER_AMOUNT) AS PS_REV,
        1 AS PS_FLAG
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        BUNDLE.BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON (((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID) AND (BUNDLE.BUNDLE_NAME = 'PS'::varchar(2)))))) SUBSET ON ((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID)))
 GROUP BY TAXORDER.CUSTOMER_KEY,
          TAXORDER.TAX_YEAR) PS ON (((PS.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (PS.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        max(FT.ORDER_AMOUNT) AS QB_SUBSCRIPTION_REVENUE,
        1 AS QB_SUBSCRIPTION_FLAG
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((FT.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((DPA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'QBSUB'::varchar(5)))))
 GROUP BY FT.CUSTOMER_KEY,
          FT.TAX_YEAR) QBSUB ON (((QBSUB.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (QBSUB.TAX_YEAR = FT.TAX_YEAR)))) LEFT JOIN ( SELECT FT.CUSTOMER_KEY,
        FT.TAX_YEAR,
        max(FT.ORDER_AMOUNT) AS QBTT_SUBSCRIPTION_REVENUE,
        1 AS QBTT_SUBSCRIPTION_FLAG
 FROM ((CTG_ANALYTICS.FACT_TAXORDER FT JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((FT.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BR ON (((DPA.PRODUCT_ID = BR.PRODUCT_ID) AND (BR.BUNDLE_NAME = 'QBTTSUB'::varchar(7)))))
 GROUP BY FT.CUSTOMER_KEY,
          FT.TAX_YEAR) QBTTSUB ON (((QBTTSUB.CUSTOMER_KEY = FT.CUSTOMER_KEY) AND (QBTTSUB.TAX_YEAR = FT.TAX_YEAR))));

CREATE  VIEW CTG_ANALYTICS.DIM_USER_AGENT AS
 SELECT DIM_USER_AGENT_SUPERSET.USER_AGENT_ID,
        DIM_USER_AGENT_SUPERSET.USER_AGENT,
        DIM_USER_AGENT_SUPERSET.DEVICE_FAMILY,
        DIM_USER_AGENT_SUPERSET.OS_FAMILY,
        DIM_USER_AGENT_SUPERSET.OS_MAJOR,
        DIM_USER_AGENT_SUPERSET.OS_MINOR,
        DIM_USER_AGENT_SUPERSET.OS_PATCH,
        DIM_USER_AGENT_SUPERSET.OS_PATCH_MINOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_FAMILY,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_MAJOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_MINOR,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_PATCH,
        DIM_USER_AGENT_SUPERSET.USER_AGENT_BROWSER_VERSION,
        DIM_USER_AGENT_SUPERSET.DEVICE_TYPE,
        DIM_USER_AGENT_SUPERSET.PLATFORM_TYPE,
        DIM_USER_AGENT_SUPERSET.APP_TYPE,
        DIM_USER_AGENT_SUPERSET.BATCH_EVENT_ID,
        DIM_USER_AGENT_SUPERSET.LOAD_DATETIME AS CREATED_TIMESTAMP,
        DIM_USER_AGENT_SUPERSET.LOAD_DATETIME AS UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.DIM_USER_AGENT_SUPERSET;

CREATE  VIEW CTG_ANALYTICS.CLICKSTREAM_VISITOR_AUTHENTICATION_FIRST AS
 SELECT AUTH_ALL.CLICKSTREAM_ID,
        AUTH_ALL.VISITOR_OMT_ID,
        AUTH_ALL.AUTH_ID,
        AUTH_ALL.TAX_YEAR
 FROM ( SELECT AUTH_UNION.CLICKSTREAM_ID,
        AUTH_UNION.VISITOR_OMT_ID,
        AUTH_UNION.AUTH_ID,
        AUTH_UNION.TAX_YEAR,
        row_number() OVER (PARTITION BY AUTH_UNION.TAX_YEAR, AUTH_UNION.VISITOR_OMT_ID ORDER BY AUTH_UNION.AUTH_ID DESC) AS ROWNUM
 FROM ( SELECT AUTH.CLICKSTREAM_ID,
        AUTH.VISITOR_OMT_ID,
        AUTH.AUTH_ID,
        AUTH.TAX_YEAR,
        AUTH.SERVER_TIMESTAMP
 FROM ( SELECT FACT_CLICKSTREAM.CLICKSTREAM_ID,
        FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.TAX_YEAR,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP,
        row_number() OVER (PARTITION BY FACT_CLICKSTREAM.TAX_YEAR, FACT_CLICKSTREAM.VISITOR_OMT_ID ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID) AS ROWNUM
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.AUTH_ID >= 0)) AUTH
 WHERE (AUTH.ROWNUM = 1) UNION ALL  SELECT NO_AUTH.CLICKSTREAM_ID,
        NO_AUTH.VISITOR_OMT_ID,
        NO_AUTH.AUTH_ID,
        NO_AUTH.TAX_YEAR,
        NO_AUTH.SERVER_TIMESTAMP
 FROM ( SELECT FACT_CLICKSTREAM.CLICKSTREAM_ID,
        FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.TAX_YEAR,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP,
        row_number() OVER (PARTITION BY FACT_CLICKSTREAM.TAX_YEAR, FACT_CLICKSTREAM.VISITOR_OMT_ID ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID) AS ROWNUM
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.AUTH_ID = (-1))) NO_AUTH
 WHERE (NO_AUTH.ROWNUM = 1)) AUTH_UNION) AUTH_ALL
 WHERE (AUTH_ALL.ROWNUM = 1);

CREATE  VIEW CTG_ANALYTICS.REPORTING_DATE_YTD AS
 SELECT A.CURRENT_TAX_YEAR,
        A.CURRENT_TAX_YEAR_START,
        A.CURRENT_TAX_YEAR_END,
        A.CURRENT_TAX_DATE,
        A.PREVIOUS_YEAR_TAX_DATE
 FROM ( SELECT TY.CURRENT_TAX_YEAR,
        TY.CURRENT_TAX_YEAR_START,
        TY.CURRENT_TAX_YEAR_END,
        date(now()) AS CURRENT_TAX_DATE,
        date((now() + (-364)::float)) AS PREVIOUS_YEAR_TAX_DATE
 FROM ( SELECT DIM_TAX_DATE.TAX_YEAR AS CURRENT_TAX_YEAR,
        min(DIM_TAX_DATE.TAX_DATE) AS CURRENT_TAX_YEAR_START,
        max(DIM_TAX_DATE.TAX_DATE) AS CURRENT_TAX_YEAR_END
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 WHERE (DIM_TAX_DATE.TAX_YEAR IN ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 WHERE ((DIM_TAX_DATE.TAX_DATE = date(now())) AND (DIM_TAX_DATE.TAX_HOUR = 0))))
 GROUP BY DIM_TAX_DATE.TAX_YEAR) TY) A;

CREATE  VIEW CTG_ANALYTICS.AUTH_FORM_CLICKSTREAM AS
 SELECT A.AUTH_ID,
        A.START_FORM_ID,
        A.CURRENT_FORM_ID
 FROM ( SELECT FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP,
        FACT_CLICKSTREAM.FORM_ID,
        first_value(FACT_CLICKSTREAM.FORM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.AUTH_ID ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP) AS START_FORM_ID,
        last_value(FACT_CLICKSTREAM.FORM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.AUTH_ID ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP) AS CURRENT_FORM_ID,
        row_number() OVER (PARTITION BY FACT_CLICKSTREAM.AUTH_ID ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP DESC) AS ID_INDEX
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE ((FACT_CLICKSTREAM.AUTH_ID <> (-1)) AND (FACT_CLICKSTREAM.FORM_ID <> (-1)))) A
 WHERE (A.ID_INDEX = 1)
 ORDER BY A.AUTH_ID;

CREATE  VIEW CTG_ANALYTICS.SESSION_VISITOR_AUTH_SUMMARY AS
 SELECT S.VISITOR_OMT_ID,
        S.VISIT_NUM,
        S.MIN_SERVER_TIMESTAMP,
        S.MAX_SERVER_TIMESTAMP,
        S.MIN_CLICKSTREAM_ID,
        S.MAX_CLICKSTREAM_ID,
        S.AUTH_ID_COUNT,
        S.TAX_YEAR,
        A.AUTH_ID,
        A.AUTH_CLICK AS MAX_AUTH_CLICK
 FROM (( SELECT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        min(FACT_CLICKSTREAM.SERVER_TIMESTAMP) AS MIN_SERVER_TIMESTAMP,
        max(FACT_CLICKSTREAM.SERVER_TIMESTAMP) AS MAX_SERVER_TIMESTAMP,
        min(FACT_CLICKSTREAM.CLICKSTREAM_ID) AS MIN_CLICKSTREAM_ID,
        max(FACT_CLICKSTREAM.CLICKSTREAM_ID) AS MAX_CLICKSTREAM_ID,
        count(DISTINCT FACT_CLICKSTREAM.AUTH_ID) AS AUTH_ID_COUNT,
        min(FACT_CLICKSTREAM.TAX_YEAR) AS TAX_YEAR
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.VISIT_NUM IS NOT NULL)
 GROUP BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM
 ORDER BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM) S LEFT JOIN ( SELECT B.VISITOR_OMT_ID,
        B.VISIT_NUM,
        B.AUTH_ID,
        B.AUTH_CLICK
 FROM ( SELECT A.VISITOR_OMT_ID,
        A.VISIT_NUM,
        A.AUTH_ID,
        A.AUTH_CLICK,
        row_number() OVER (PARTITION BY A.VISITOR_OMT_ID, A.VISIT_NUM ORDER BY A.AUTH_CLICK DESC) AS ROWNUM
 FROM ( SELECT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.AUTH_ID,
        count(*) AS AUTH_CLICK
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID = 7)
 GROUP BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          FACT_CLICKSTREAM.AUTH_ID) A) B
 WHERE (B.ROWNUM = 1)) A ON (((S.VISITOR_OMT_ID = A.VISITOR_OMT_ID) AND (S.VISIT_NUM = A.VISIT_NUM))));

CREATE  VIEW CTG_ANALYTICS.AGG_CUSTOMER AS
 SELECT ORDER_SUMMARY.CUSTOMER_KEY,
        DT.PRIMARY_ID,
        DT.SECONDARY_ID,
        ORDER_SUMMARY.FIRST_COMPLETE_TAX_DATE,
        ORDER_SUMMARY.FIRST_COMPLETE_TAX_YEAR,
        ORDER_SUMMARY.FIRST_COMPLETE_TAXORDER_ID,
        ORDER_SUMMARY.LAST_COMPLETE_TAX_DATE,
        ORDER_SUMMARY.LAST_COMPLETE_TAX_YEAR,
        ORDER_SUMMARY.LAST_COMPLETE_TAXORDER_ID
 FROM (( SELECT DISTINCT FT.CUSTOMER_KEY,
        first_value(FT.ORDER_TIMESTAMP, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_COMPLETE_TAX_DATE,
        last_value(FT.ORDER_TIMESTAMP, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_COMPLETE_TAX_DATE,
        first_value(FT.TAXORDER_ID, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_COMPLETE_TAXORDER_ID,
        last_value(FT.TAXORDER_ID, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_COMPLETE_TAXORDER_ID,
        first_value(FT.TAX_YEAR, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_COMPLETE_TAX_YEAR,
        last_value(FT.TAX_YEAR, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_COMPLETE_TAX_YEAR
 FROM CTG_ANALYTICS.FACT_TAXORDER FT
 ORDER BY FT.CUSTOMER_KEY,
          first_value(FT.ORDER_TIMESTAMP, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FT.ORDER_TIMESTAMP, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          first_value(FT.TAXORDER_ID, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FT.TAXORDER_ID, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          first_value(FT.TAX_YEAR, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FT.TAX_YEAR, false) OVER (PARTITION BY FT.CUSTOMER_KEY ORDER BY FT.ORDER_TIMESTAMP, FT.TAXORDER_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) ORDER_SUMMARY JOIN CTG_ANALYTICS_SRC.DIM_CUSTOMER DT ON ((ORDER_SUMMARY.CUSTOMER_KEY = DT.CUSTOMER_KEY)))
 ORDER BY ORDER_SUMMARY.CUSTOMER_KEY;

CREATE  VIEW CTG_ANALYTICS.AGG_CUSTOMER_SEGMENT AS
 SELECT COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAXFILER_ID,
        COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR,
        COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG,
        first_value(CASE COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG WHEN NULLSEQUAL 1 THEN COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR ELSE NULL::int END, true) OVER (PARTITION BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAXFILER_ID ORDER BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR DESC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS LAST_COMPLETED_TAX_YEAR,
        last_value(CASE COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG WHEN NULLSEQUAL 1 THEN COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR ELSE NULL::int END, true) OVER (PARTITION BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAXFILER_ID ORDER BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR DESC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS FIRST_COMPLETED_TAX_YEAR,
        (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY - CASE COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG WHEN NULLSEQUAL 1 THEN 1 ELSE 0 END) AS TOTAL_PREVIOUS_COMPLETED_ORDERS,
        CASE WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 0)) THEN 'new'::varchar(3) WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY > 2) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 1)) THEN 'veteran returning'::varchar(17) WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY >= 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 0)) THEN 'skip year'::varchar(9) WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY = 2) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 1)) THEN 'first year renewing'::varchar(19) ELSE NULL END AS CUSTOMER_TYPE,
        CASE WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 0)) THEN 'new'::varchar(3) WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY > 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 1)) THEN 'existing'::varchar(8) WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COUNT_BY_TY >= 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 0)) THEN 'new'::varchar(3) ELSE NULL END AS CUSTOMER_TYPE_RUP,
        CASE WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 1)) THEN 0 WHEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG = 1) AND (COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.PY_FLAG = 0)) THEN ((COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR - first_value(CASE COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.COMP_FLAG WHEN NULLSEQUAL 1 THEN COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR ELSE NULL::int END, true) OVER (PARTITION BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAXFILER_ID ORDER BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR DESC ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING)) - 1) ELSE NULL::int END AS SKIPPED_YEARS
 FROM ( SELECT CCF1.TAXFILER_ID,
        CCF1.TAX_YEAR,
        CCF1.COMP_FLAG,
        CCF1.COUNT_BY_TY,
        CCF2.COMP_FLAG AS PY_FLAG
 FROM (( SELECT CCF1.TAXFILER_ID,
        CCF1.TAX_YEAR,
        CCF1.COMP_FLAG,
        sum(CCF2.COMP_FLAG) AS COUNT_BY_TY
 FROM (( SELECT CTY.TAXFILER_ID,
        CTY.TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS COMP_FLAG
 FROM (( SELECT CC.TAXFILER_ID,
        TY.TAX_YEAR
 FROM (( SELECT FACT_TAXORDER.TAXFILER_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 GROUP BY FACT_TAXORDER.TAXFILER_ID) CC CROSS JOIN ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 GROUP BY DIM_TAX_DATE.TAX_YEAR) TY)) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST TFF ON (((CTY.TAXFILER_ID = TFF.TAXFILER_ID) AND (CTY.TAX_YEAR = TFF.TAX_YEAR))))
 GROUP BY CTY.TAXFILER_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END) CCF1 JOIN ( SELECT CTY.TAXFILER_ID,
        CTY.TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS COMP_FLAG
 FROM (( SELECT CC.TAXFILER_ID,
        TY.TAX_YEAR
 FROM (( SELECT FACT_TAXORDER.TAXFILER_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 GROUP BY FACT_TAXORDER.TAXFILER_ID) CC CROSS JOIN ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 GROUP BY DIM_TAX_DATE.TAX_YEAR) TY)) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST TFF ON (((CTY.TAXFILER_ID = TFF.TAXFILER_ID) AND (CTY.TAX_YEAR = TFF.TAX_YEAR))))
 GROUP BY CTY.TAXFILER_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END) CCF2 ON (((CCF1.TAXFILER_ID = CCF2.TAXFILER_ID) AND (CCF1.TAX_YEAR >= CCF2.TAX_YEAR))))
 GROUP BY CCF1.TAXFILER_ID,
          CCF1.TAX_YEAR,
          CCF1.COMP_FLAG
 ORDER BY CCF1.TAXFILER_ID) CCF1 JOIN ( SELECT CCF1.TAXFILER_ID,
        CCF1.TAX_YEAR,
        CCF1.COMP_FLAG,
        sum(CCF2.COMP_FLAG) AS COUNT_BY_TY
 FROM (( SELECT CTY.TAXFILER_ID,
        CTY.TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS COMP_FLAG
 FROM (( SELECT CC.TAXFILER_ID,
        TY.TAX_YEAR
 FROM (( SELECT FACT_TAXORDER.TAXFILER_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 GROUP BY FACT_TAXORDER.TAXFILER_ID) CC CROSS JOIN ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 GROUP BY DIM_TAX_DATE.TAX_YEAR) TY)) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST TFF ON (((CTY.TAXFILER_ID = TFF.TAXFILER_ID) AND (CTY.TAX_YEAR = TFF.TAX_YEAR))))
 GROUP BY CTY.TAXFILER_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END) CCF1 JOIN ( SELECT CTY.TAXFILER_ID,
        CTY.TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS COMP_FLAG
 FROM (( SELECT CC.TAXFILER_ID,
        TY.TAX_YEAR
 FROM (( SELECT FACT_TAXORDER.TAXFILER_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 GROUP BY FACT_TAXORDER.TAXFILER_ID) CC CROSS JOIN ( SELECT DIM_TAX_DATE.TAX_YEAR
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 GROUP BY DIM_TAX_DATE.TAX_YEAR) TY)) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST TFF ON (((CTY.TAXFILER_ID = TFF.TAXFILER_ID) AND (CTY.TAX_YEAR = TFF.TAX_YEAR))))
 GROUP BY CTY.TAXFILER_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END) CCF2 ON (((CCF1.TAXFILER_ID = CCF2.TAXFILER_ID) AND (CCF1.TAX_YEAR >= CCF2.TAX_YEAR))))
 GROUP BY CCF1.TAXFILER_ID,
          CCF1.TAX_YEAR,
          CCF1.COMP_FLAG
 ORDER BY CCF1.TAXFILER_ID) CCF2 ON (((CCF1.TAXFILER_ID = CCF2.TAXFILER_ID) AND (CCF1.TAX_YEAR = (CCF2.TAX_YEAR + 1)))))
 GROUP BY CCF1.TAXFILER_ID,
          CCF1.TAX_YEAR,
          CCF1.COMP_FLAG,
          CCF1.COUNT_BY_TY,
          CCF2.COMP_FLAG
 ORDER BY CCF1.TAXFILER_ID) COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG
 ORDER BY COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAXFILER_ID,
          COMPLETED_CUSTOMER_FLAG_AND_COUNTS_PY_FLAG.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.SUB_AD_REVENUE AS
 SELECT TAXORDER.TAXFILER_ID,
        TAXORDER.TAX_YEAR,
        max(CASE WHEN (SUBSET.SUB_BUNDLE_NAME = 'CA'::varchar(2)) THEN 1 ELSE 0 END) AS CA,
        max(TAXORDER.ORDER_AMOUNT) AS AD_REV
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        PRODALIAS.ITEM_ALIAS_CODE,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON ((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID)))
 WHERE (BUNDLE.BUNDLE_NAME = 'AD'::varchar(2))) SUBSET ON ((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID)))
 GROUP BY TAXORDER.TAXFILER_ID,
          TAXORDER.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.PRS_NPS AS
 SELECT ((SUMMED.PROM - SUMMED.DET) / SUMMED.TOTAL) AS NPR
 FROM ( SELECT sum(COUNTED.PROM) AS PROM,
        sum(COUNTED.DET) AS DET,
        sum(COUNTED.TOTAL) AS TOTAL
 FROM ( SELECT count(DISTINCT CASE WHEN (AGG.AVERAGE_SCORE >= 9) THEN PRS.AUTH_ID ELSE NULL::int END) AS PROM,
        count(DISTINCT CASE WHEN (AGG.AVERAGE_SCORE <= 6) THEN PRS.AUTH_ID ELSE NULL::int END) AS DET,
        count(DISTINCT CASE WHEN (AGG.AVERAGE_SCORE IS NOT NULL) THEN PRS.AUTH_ID ELSE NULL::int END) AS TOTAL
 FROM (CTG_ANALYTICS.FACT_PRS PRS JOIN CTG_ANALYTICS.AGG_AUTH_ID_PRS AGG ON (((PRS.AUTH_ID = AGG.AUTH_ID) AND (PRS.TAX_YEAR = AGG.TAX_YEAR))))
 GROUP BY PRS.AUTH_ID,
          PRS.TAX_YEAR) COUNTED) SUMMED;

CREATE  VIEW CTG_ANALYTICS.FIRST_AUTH_DATE AS
 SELECT A.AUTH_ID,
        A.FIRST_AUTH_DATE,
        D.TAX_YEAR,
        CASE WHEN (A.FIRST_AUTH_DATE < ( SELECT min(DIM_TAX_DATE.TAX_DATE) AS MIN
 FROM CTG_ANALYTICS.DIM_TAX_DATE
 WHERE (DIM_TAX_DATE.TAX_YEAR_IND = 'CY'::varchar(2)))) THEN 'Existing'::varchar(8) ELSE 'New'::varchar(3) END AS AUTH_ROLE
 FROM (( SELECT FACT_AUTHENTICATION.AUTH_ID,
        min(FACT_AUTHENTICATION.AUTH_TIMESTAMP) AS FIRST_AUTH_DATE
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION
 GROUP BY FACT_AUTHENTICATION.AUTH_ID) A JOIN CTG_ANALYTICS.DIM_TAX_DATE D ON (((date(A.FIRST_AUTH_DATE) = D.TAX_DATE) AND (D.TAX_HOUR = 0))));

CREATE  VIEW CTG_ANALYTICS.AGG_SESSION_VIEW AS
 SELECT S.VISITOR_OMT_ID,
        S.VISIT_NUM,
        S.MIN_SERVER_TIMESTAMP,
        S.MAX_SERVER_TIMESTAMP,
        F.MIN_CLICKSTREAM_ID AS FIRST_CLICKSTREAM_ID,
        F.MAX_CLICKSTREAM_ID AS LAST_CLICKSTREAM_ID,
        S.AUTH_ID_COUNT,
        S.TAX_YEAR,
        S.HIT_COUNT,
        S.PAGE_COUNT,
        CASE WHEN (S.PAGE_COUNT = 1) THEN true ELSE false END AS PAGE_BOUNCE_FLAG,
        CASE WHEN (S.HIT_COUNT < 4) THEN true ELSE false END AS BOUNCE_FLAG,
        A.AUTH_ID,
        A.AUTH_CLICK AS MAX_AUTH_CLICK_COUNT,
        C.CID AS FIRST_CID,
        C.CHANNEL AS FIRST_CHANNEL,
        C.CHANNEL_GROUP AS FIRST_CHANNEL_GROUP,
        C.PAGE_NAME AS LANDING_PAGE,
        PK.POST_KEYWORD AS FIRST_POST_KEYWORD,
        FA.FIRST_AUTH_TIMESTAMP,
        FVA.FIRST_VAUTH_TIMESTAMP AS FIRST_AUTHORIZATION_TIMESTAMP,
        FST.START_EXPERIENCE,
        FST.FIRST_START_TIMESTAMP,
        FC.FIRST_COMPLETE_TIMESTAMP,
        CASE WHEN (S.NONFFA_FLAG = 0) THEN 'false'::varchar(5) ELSE 'true'::varchar(4) END AS NONFFA_FLAG,
        FR.PAGE_URL AS REFERRER_PAGE_URL,
        FR.REFERRER_PAGE_URL_ID,
        SF.START_FORM,
        EF.END_FORM
 FROM (((((((((((( SELECT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        min(FC.SERVER_TIMESTAMP) AS MIN_SERVER_TIMESTAMP,
        max(FC.SERVER_TIMESTAMP) AS MAX_SERVER_TIMESTAMP,
        count(DISTINCT FC.AUTH_ID) AS AUTH_ID_COUNT,
        min(D.TAX_YEAR) AS TAX_YEAR,
        count(*) AS HIT_COUNT,
        count(DISTINCT FC.PAGE_ID) AS PAGE_COUNT,
        sum(CASE WHEN (FC.NONFFA_FLAG = true) THEN 1 ELSE 0 END) AS NONFFA_FLAG
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM FC JOIN CTG_ANALYTICS.DIM_TAX_DATE D ON (((FC.TAX_DATE_ID = D.TAX_DATE_ID) AND (D.TAX_YEAR = 2014))))
 GROUP BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM
 ORDER BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM) S JOIN ( SELECT SESSION_FIRST_LAST.VISITOR_OMT_ID,
        SESSION_FIRST_LAST.VISIT_NUM,
        SESSION_FIRST_LAST.MIN_CLICKSTREAM_ID,
        SESSION_FIRST_LAST.MAX_CLICKSTREAM_ID
 FROM ( SELECT DISTINCT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MIN_CLICKSTREAM_ID,
        last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MAX_CLICKSTREAM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.TAX_YEAR = 2014)
 ORDER BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) SESSION_FIRST_LAST
 GROUP BY SESSION_FIRST_LAST.VISITOR_OMT_ID,
          SESSION_FIRST_LAST.VISIT_NUM,
          SESSION_FIRST_LAST.MIN_CLICKSTREAM_ID,
          SESSION_FIRST_LAST.MAX_CLICKSTREAM_ID) F ON (((S.VISIT_NUM = F.VISIT_NUM) AND (S.VISITOR_OMT_ID = F.VISITOR_OMT_ID)))) JOIN ( SELECT S.VISITOR_OMT_ID,
        S.VISIT_NUM,
        C.CID,
        C.CHANNEL,
        C.CHANNEL_GROUP,
        P.PAGE_NAME
 FROM (((CTG_ANALYTICS.FACT_CLICKSTREAM F JOIN ( SELECT DISTINCT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MIN_CLICKSTREAM_ID,
        last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MAX_CLICKSTREAM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.TAX_YEAR = 2014)
 ORDER BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) S ON ((F.CLICKSTREAM_ID = S.MIN_CLICKSTREAM_ID))) LEFT JOIN CTG_ANALYTICS.DIM_PAGE P ON ((F.PAGE_ID = P.PAGE_ID))) LEFT JOIN CTG_ANALYTICS.DIM_CAMPAIGN C ON ((F.CAMPAIGN_ID = C.CAMPAIGN_ID)))
 WHERE (F.TAX_YEAR = 2014)) C ON (((S.VISIT_NUM = C.VISIT_NUM) AND (S.VISITOR_OMT_ID = C.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT B.VISITOR_OMT_ID,
        B.VISIT_NUM,
        B.AUTH_ID,
        B.AUTH_CLICK
 FROM ( SELECT A.VISITOR_OMT_ID,
        A.VISIT_NUM,
        A.AUTH_ID,
        A.AUTH_CLICK,
        row_number() OVER (PARTITION BY A.VISITOR_OMT_ID, A.VISIT_NUM ORDER BY A.AUTH_CLICK DESC) AS ROWNUM
 FROM ( SELECT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.AUTH_ID,
        count(*) AS AUTH_CLICK
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE ((FACT_CLICKSTREAM.TAX_YEAR = 2014) AND (FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID = 7))
 GROUP BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          FACT_CLICKSTREAM.AUTH_ID) A) B
 WHERE (B.ROWNUM = 1)) A ON (((S.VISIT_NUM = A.VISIT_NUM) AND (S.VISITOR_OMT_ID = A.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT PK.POST_KEYWORD,
        KID.VISIT_NUM,
        KID.VISITOR_OMT_ID
 FROM (( SELECT DISTINCT first_value(FACT_CLICKSTREAM.POST_KEYWORD_ID, true) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS POST_KEYWORD_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.VISITOR_OMT_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 ORDER BY first_value(FACT_CLICKSTREAM.POST_KEYWORD_ID, true) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          FACT_CLICKSTREAM.VISIT_NUM,
          FACT_CLICKSTREAM.VISITOR_OMT_ID) KID JOIN CTG_ANALYTICS.DIM_POST_KEYWORD PK ON ((PK.POST_KEYWORD_ID = KID.POST_KEYWORD_ID)))) PK ON (((S.VISIT_NUM = PK.VISIT_NUM) AND (S.VISITOR_OMT_ID = PK.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT AUTH.VISITOR_OMT_ID,
        AUTH.VISIT_NUM,
        min(AUTH.SERVER_TIMESTAMP) AS FIRST_AUTH_TIMESTAMP
 FROM ( SELECT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.AUTH_ID,
        FC.SERVER_TIMESTAMP,
        BCA.AUTHENTICATION_ID
 FROM (CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH BCA JOIN ( SELECT FACT_CLICKSTREAM.CLICKSTREAM_ID,
        FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.AUTH_ID,
        FACT_CLICKSTREAM.SERVER_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE ((FACT_CLICKSTREAM.TAX_YEAR = 2014) AND (FACT_CLICKSTREAM.AUTH_ID_SOURCE_ID = 7))) FC ON ((BCA.CLICKSTREAM_ID = FC.CLICKSTREAM_ID)))) AUTH
 GROUP BY AUTH.VISITOR_OMT_ID,
          AUTH.VISIT_NUM) FA ON (((S.VISIT_NUM = FA.VISIT_NUM) AND (S.VISITOR_OMT_ID = FA.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT VAUTH.VISITOR_OMT_ID,
        VAUTH.VISIT_NUM,
        min(VAUTH.VAUTH_TIMESTAMP) AS FIRST_VAUTH_TIMESTAMP
 FROM ( SELECT BCA.VISITOR_OMT_ID,
        BCA.VISIT_NUM,
        FA.AUTH_ID,
        FA.AUTH_TIMESTAMP AS VAUTH_TIMESTAMP
 FROM (CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH BCA JOIN ( SELECT FACT_AUTHENTICATION.AUTHENTICATION_ID,
        FACT_AUTHENTICATION.AUTH_ID,
        FACT_AUTHENTICATION.AUTH_TIMESTAMP
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION
 WHERE ((FACT_AUTHENTICATION.TAX_YEAR = 2014) AND (FACT_AUTHENTICATION.AUTHORIZATION_LEVEL_ID >= 25) AND (FACT_AUTHENTICATION.AUTHORIZATION_LEVEL_ID <= 31))) FA ON ((BCA.AUTHENTICATION_ID = FA.AUTHENTICATION_ID)))) VAUTH
 GROUP BY VAUTH.VISITOR_OMT_ID,
          VAUTH.VISIT_NUM) FVA ON (((S.VISIT_NUM = FVA.VISIT_NUM) AND (S.VISITOR_OMT_ID = FVA.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT SE.VISITOR_OMT_ID,
        SE.VISIT_NUM,
        SE.CLICKSTREAM_ID,
        SE.START_EXPERIENCE,
        FC.SERVER_TIMESTAMP AS FIRST_START_TIMESTAMP
 FROM (( SELECT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        FACT_CLICKSTREAM.CLICKSTREAM_ID,
        first_value(FACT_CLICKSTREAM.START_EXPERIENCE, true) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS START_EXPERIENCE
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM) SE JOIN CTG_ANALYTICS.FACT_CLICKSTREAM FC ON ((SE.CLICKSTREAM_ID = FC.CLICKSTREAM_ID)))) FST ON (((S.VISIT_NUM = FST.VISIT_NUM) AND (S.VISITOR_OMT_ID = FST.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT COMPLETE.VISITOR_OMT_ID,
        COMPLETE.VISIT_NUM,
        min(COMPLETE.COMPLETE_TIMESTAMP) AS FIRST_COMPLETE_TIMESTAMP
 FROM ( SELECT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.SERVER_TIMESTAMP AS COMPLETE_TIMESTAMP
 FROM (CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER BCT JOIN CTG_ANALYTICS.FACT_CLICKSTREAM FC ON ((BCT.CLICKSTREAM_ID = FC.CLICKSTREAM_ID)))
 WHERE (FC.TAX_YEAR = 2014)) COMPLETE
 GROUP BY COMPLETE.VISITOR_OMT_ID,
          COMPLETE.VISIT_NUM) FC ON (((S.VISIT_NUM = FC.VISIT_NUM) AND (S.VISITOR_OMT_ID = FC.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT SFL.VISITOR_OMT_ID,
        SFL.VISIT_NUM,
        FC.REFERRER_PAGE_URL_ID,
        DPU.PAGE_URL
 FROM ((( SELECT DISTINCT FACT_CLICKSTREAM.VISITOR_OMT_ID,
        FACT_CLICKSTREAM.VISIT_NUM,
        first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MIN_CLICKSTREAM_ID,
        last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS MAX_CLICKSTREAM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM
 WHERE (FACT_CLICKSTREAM.TAX_YEAR = 2014)
 ORDER BY FACT_CLICKSTREAM.VISITOR_OMT_ID,
          FACT_CLICKSTREAM.VISIT_NUM,
          first_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(FACT_CLICKSTREAM.CLICKSTREAM_ID, false) OVER (PARTITION BY FACT_CLICKSTREAM.VISITOR_OMT_ID, FACT_CLICKSTREAM.VISIT_NUM ORDER BY FACT_CLICKSTREAM.SERVER_TIMESTAMP, FACT_CLICKSTREAM.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) SFL JOIN CTG_ANALYTICS.FACT_CLICKSTREAM FC ON ((SFL.MIN_CLICKSTREAM_ID = FC.CLICKSTREAM_ID))) JOIN CTG_ANALYTICS.DIM_PAGE_URL DPU ON ((FC.REFERRER_PAGE_URL_ID = DPU.PAGE_URL_ID)))
 WHERE (FC.TAX_YEAR = 2014)) FR ON (((S.VISIT_NUM = FR.VISIT_NUM) AND (S.VISITOR_OMT_ID = FR.VISITOR_OMT_ID)))) LEFT JOIN ( SELECT CA.VISITOR_OMT_ID,
        CA.VISIT_NUM,
        CSF.AUTH_ID,
        DF.FORM_NAME AS START_FORM
 FROM ((( SELECT DISTINCT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.AUTH_ID,
        FC.FORM_ID,
        first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS START_FORM_ID,
        last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS END_FORM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM FC
 WHERE ((FC.VISIT_NUM IS NOT NULL) AND (FC.AUTH_ID <> (-1)))
 ORDER BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM,
          FC.AUTH_ID,
          FC.FORM_ID,
          first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) CSF JOIN CTG_ANALYTICS.DIM_FORM DF ON ((CSF.START_FORM_ID = DF.FORM_ID))) JOIN ( SELECT CLICK_SESSION_FORM.VISITOR_OMT_ID,
        CLICK_SESSION_FORM.VISIT_NUM,
        count(DISTINCT CLICK_SESSION_FORM.AUTH_ID) AS AUTH_COUNT
 FROM ( SELECT DISTINCT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.AUTH_ID,
        FC.FORM_ID,
        first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS START_FORM_ID,
        last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS END_FORM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM FC
 WHERE ((FC.VISIT_NUM IS NOT NULL) AND (FC.AUTH_ID <> (-1)))
 ORDER BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM,
          FC.AUTH_ID,
          FC.FORM_ID,
          first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) CLICK_SESSION_FORM
 WHERE (CLICK_SESSION_FORM.AUTH_ID <> (-1))
 GROUP BY CLICK_SESSION_FORM.VISITOR_OMT_ID,
          CLICK_SESSION_FORM.VISIT_NUM
 ORDER BY CLICK_SESSION_FORM.VISITOR_OMT_ID,
          CLICK_SESSION_FORM.VISIT_NUM) CA ON (((CA.VISITOR_OMT_ID = CSF.VISITOR_OMT_ID) AND (CA.VISIT_NUM = CSF.VISIT_NUM))))
 WHERE (CA.AUTH_COUNT = 1)
 GROUP BY CA.VISITOR_OMT_ID,
          CA.VISIT_NUM,
          CSF.AUTH_ID,
          DF.FORM_NAME) SF ON (((SF.VISITOR_OMT_ID = S.VISITOR_OMT_ID) AND (SF.VISIT_NUM = S.VISIT_NUM)))) LEFT JOIN ( SELECT CA.VISITOR_OMT_ID,
        CA.VISIT_NUM,
        CSF.AUTH_ID,
        DF.FORM_NAME AS END_FORM
 FROM ((( SELECT DISTINCT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.AUTH_ID,
        FC.FORM_ID,
        first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS START_FORM_ID,
        last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS END_FORM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM FC
 WHERE ((FC.VISIT_NUM IS NOT NULL) AND (FC.AUTH_ID <> (-1)))
 ORDER BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM,
          FC.AUTH_ID,
          FC.FORM_ID,
          first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) CSF JOIN CTG_ANALYTICS.DIM_FORM DF ON ((CSF.END_FORM_ID = DF.FORM_ID))) JOIN ( SELECT CLICK_SESSION_FORM.VISITOR_OMT_ID,
        CLICK_SESSION_FORM.VISIT_NUM,
        count(DISTINCT CLICK_SESSION_FORM.AUTH_ID) AS AUTH_COUNT
 FROM ( SELECT DISTINCT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.AUTH_ID,
        FC.FORM_ID,
        first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS START_FORM_ID,
        last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS END_FORM_ID
 FROM CTG_ANALYTICS.FACT_CLICKSTREAM FC
 WHERE ((FC.VISIT_NUM IS NOT NULL) AND (FC.AUTH_ID <> (-1)))
 ORDER BY FC.VISITOR_OMT_ID,
          FC.VISIT_NUM,
          FC.AUTH_ID,
          FC.FORM_ID,
          first_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),
          last_value(CASE FC.FORM_ID WHEN NULLSEQUAL (-1) THEN NULL::int ELSE FC.FORM_ID END, true) OVER (PARTITION BY FC.VISITOR_OMT_ID, FC.VISIT_NUM ORDER BY FC.SERVER_TIMESTAMP, FC.CLICKSTREAM_ID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) CLICK_SESSION_FORM
 WHERE (CLICK_SESSION_FORM.AUTH_ID <> (-1))
 GROUP BY CLICK_SESSION_FORM.VISITOR_OMT_ID,
          CLICK_SESSION_FORM.VISIT_NUM
 ORDER BY CLICK_SESSION_FORM.VISITOR_OMT_ID,
          CLICK_SESSION_FORM.VISIT_NUM) CA ON (((CA.VISITOR_OMT_ID = CSF.VISITOR_OMT_ID) AND (CA.VISIT_NUM = CSF.VISIT_NUM))))
 WHERE (CA.AUTH_COUNT = 1)
 GROUP BY CA.VISITOR_OMT_ID,
          CA.VISIT_NUM,
          CSF.AUTH_ID,
          DF.FORM_NAME) EF ON (((EF.VISITOR_OMT_ID = S.VISITOR_OMT_ID) AND (EF.VISIT_NUM = S.VISIT_NUM))));

CREATE  VIEW CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED AS
 SELECT TAXORDER_RANKS.TAXORDER_ID,
        TAXORDER_RANKS.CUSTOMER_KEY,
        TAXORDER_RANKS.AUTH_ID,
        TAXORDER_RANKS.PRODUCT_ALIAS_ID,
        TAXORDER_RANKS.ORDER_TIMESTAMP,
        TAXORDER_RANKS.TAX_YEAR,
        TAXORDER_RANKS.PRICE_PRIORITY_ID,
        TAXORDER_RANKS.CREDIT_PRIORITY_ID,
        TAXORDER_RANKS.ORDER_NUMBER,
        TAXORDER_RANKS.ORDER_AMOUNT,
        TAXORDER_RANKS.ORDER_TYPE,
        TAXORDER_RANKS.PRODUCT_VERSION,
        TAXORDER_RANKS.ORIGINAL_SKU_ROLLUP_ID,
        TAXORDER_RANKS.ITEM_ALIAS_RANK
 FROM ( SELECT FT.TAXORDER_ID,
        FT.CUSTOMER_KEY,
        FT.AUTH_ID,
        FT.TAX_YEAR,
        FT.PRODUCT_ALIAS_ID,
        FT.ORDER_TIMESTAMP,
        FT.PRICE_PRIORITY_ID,
        FT.CREDIT_PRIORITY_ID,
        FT.ORDER_NUMBER,
        FT.ORDER_AMOUNT,
        FT.ORDER_TYPE,
        FT.PRODUCT_VERSION,
        FT.ORIGINAL_SKU_ROLLUP_ID,
        coalesce(PR.ITEM_ALIAS_RANK, 999) AS ITEM_ALIAS_RANK,
        row_number() OVER (PARTITION BY FT.CUSTOMER_KEY, FT.TAX_YEAR ORDER BY coalesce(PR.ITEM_ALIAS_RANK, 999), FT.ORDER_TIMESTAMP, coalesce(FT.ORIGINAL_SKU_ROLLUP_ID, 0) DESC, FT.TAXORDER_ID) AS RN
 FROM (CTG_ANALYTICS.FACT_TAXORDER FT LEFT JOIN ( SELECT PA.PRODUCT_ALIAS_ID,
        PA.ITEM_ALIAS_CODE,
        AR.TAX_YEAR,
        coalesce(AR.ITEM_ALIAS_RANK, 999) AS ITEM_ALIAS_RANK
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PA LEFT JOIN CTG_ANALYTICS_SRC.LKP_ITEM_ALIAS_RANK AR ON ((PA.ITEM_ALIAS_CODE = AR.ITEM_ALIAS_CODE)))) PR ON (((FT.PRODUCT_ALIAS_ID = PR.PRODUCT_ALIAS_ID) AND (FT.TAX_YEAR <=> coalesce(PR.TAX_YEAR, FT.TAX_YEAR)))))) TAXORDER_RANKS
 WHERE (TAXORDER_RANKS.RN = 1);

CREATE  VIEW CTG_ANALYTICS.SUB_TAXORDER_RANKED AS
 SELECT FACT.TAXORDER_ID,
        FACT.TTO_ORDERS_KEY,
        FACT.CHANGE_ID,
        FACT.CUSTOMER_KEY,
        FACT.TAXFILER_ID,
        FACT.AUTH_ID,
        FACT.PRODUCT_ALIAS_ID,
        FACT.ORDER_TIMESTAMP,
        FACT.TAX_DATE_ID,
        FACT.TAX_YEAR,
        FACT.CREDIT_PRIORITY_ID,
        FACT.PRICE_PRIORITY_ID,
        FACT.CURRENT_PRIORITY_ID,
        FACT.ORDER_NUMBER,
        FACT.ORDER_TYPE,
        FACT.PRODUCT_VERSION,
        FACT.ORDER_AMOUNT,
        FACT.VALID_FLAG,
        FACT.ORIGINAL_SKU_ROLLUP_ID,
        FACT.SOURCE_APPLICATION_ID,
        FACT.STATUS_TYPE,
        FACT.FILING_TYPE_ID,
        FACT.RT_FLAG,
        SUB.ITEM_ALIAS_RANK
 FROM (CTG_ANALYTICS.FACT_TAXORDER FACT JOIN CTG_ANALYTICS.SUB_TAXORDER_COMPLETED_RANKED SUB ON ((SUB.TAXORDER_ID = FACT.TAXORDER_ID)));

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_FUNNEL_VIEW AS
 SELECT COMBINE_AGENTS_S2C_SKU.AUTH_ID,
        COMBINE_AGENTS_S2C_SKU.TAX_YEAR,
        max(COMBINE_AGENTS_S2C_SKU.START_SKU_ROLLUP_ID) AS START_SKU_ROLLUP_ID,
        max(COMBINE_AGENTS_S2C_SKU.START_SKU) AS START_SKU,
        max(COMBINE_AGENTS_S2C_SKU.START_SKU_TIMESTAMP) AS START_SKU_TIMESTAMP,
        max(COMBINE_AGENTS_S2C_SKU.COMPLETED_SKU) AS COMPLETED_SKU,
        max(COMBINE_AGENTS_S2C_SKU.PY_MAX_PRODUCT_HYBRID) AS PY_MAX_PRODUCT_HYBRID,
        max(COMBINE_AGENTS_S2C_SKU.PY_MAX_PRODUCT) AS PY_MAX_PRODUCT,
        max(COMBINE_AGENTS_S2C_SKU.START_EXPERIENCE) AS START_EXPERIENCE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_START_TIMESTAMP) AS FIRST_START_TIMESTAMP,
        max(COMBINE_AGENTS_S2C_SKU.START_USER_AGENT_ID) AS START_USER_AGENT_ID,
        max(COMBINE_AGENTS_S2C_SKU.START_DEVICE_TYPE) AS START_DEVICE_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.START_PLATFORM_TYPE) AS START_PLATFORM_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.START_APP_TYPE) AS START_APP_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHORIZATION_TIMESTAMP) AS FIRST_AUTHORIZATION_TIMESTAMP,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHORIZATION_USER_AGENT_ID) AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHORIZATION_DEVICE_TYPE) AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHORIZATION_PLATFORM_TYPE) AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHORIZATION_APP_TYPE) AS FIRST_AUTHORIZATION_APP_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHENTICATION_TIMESTAMP) AS FIRST_AUTHENTICATION_TIMESTAMP,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHENTICATION_USER_AGENT_ID) AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHENTICATION_DEVICE_TYPE) AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHENTICATION_PLATFORM_TYPE) AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_AUTHENTICATION_APP_TYPE) AS FIRST_AUTHENTICATION_APP_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_FED_TAXORDER_TIMESTAMP) AS FIRST_FED_TAXORDER_TIMESTAMP,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_COMPLETE_USER_AGENT_ID) AS FIRST_COMPLETE_USER_AGENT_ID,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_COMPLETE_DEVICE_TYPE) AS FIRST_COMPLETE_DEVICE_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_COMPLETE_PLATFORM_TYPE) AS FIRST_COMPLETE_PLATFORM_TYPE,
        max(COMBINE_AGENTS_S2C_SKU.FIRST_COMPLETE_APP_TYPE) AS FIRST_COMPLETE_APP_TYPE
 FROM ((((( SELECT FIRST_VALID_AUTHORIZATION_AGENT.AUTH_ID,
        FIRST_VALID_AUTHORIZATION_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        NULL AS PY_MAX_PRODUCT_HYBRID,
        NULL AS PY_MAX_PRODUCT,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS START_USER_AGENT_ID,
        NULL AS START_DEVICE_TYPE,
        NULL AS START_PLATFORM_TYPE,
        NULL AS START_APP_TYPE,
        FIRST_VALID_AUTHORIZATION_AGENT.FIRST_AUTHORIZATION_TIMESTAMP,
        FIRST_VALID_AUTHORIZATION_AGENT.FIRST_AUTHORIZATION_USER_AGENT_ID,
        FIRST_VALID_AUTHORIZATION_AGENT.FIRST_AUTHORIZATION_DEVICE_TYPE,
        FIRST_VALID_AUTHORIZATION_AGENT.FIRST_AUTHORIZATION_PLATFORM_TYPE,
        FIRST_VALID_AUTHORIZATION_AGENT.FIRST_AUTHORIZATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_FED_TAXORDER_TIMESTAMP,
        NULL::int AS FIRST_COMPLETE_USER_AGENT_ID,
        NULL AS FIRST_COMPLETE_DEVICE_TYPE,
        NULL AS FIRST_COMPLETE_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT S.AUTH_ID,
        S.FIRST_AUTH_TIMESTAMP AS FIRST_AUTHORIZATION_TIMESTAMP,
        S.TAX_YEAR,
        U.USER_AGENT_ID AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        U.DEVICE_TYPE AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        U.PLATFORM_TYPE AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        U.APP_TYPE AS FIRST_AUTHORIZATION_APP_TYPE
 FROM ((CTG_ANALYTICS.FACT_CLICKSTREAM C JOIN ( SELECT S.AUTH_ID,
        S.TAX_YEAR,
        B.CLICKSTREAM_ID,
        B.AUTHENTICATION_ID,
        S.FIRST_AUTH_TIMESTAMP
 FROM (CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH B JOIN CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST S ON ((S.AUTHENTICATION_ID = B.AUTHENTICATION_ID)))) S ON ((S.CLICKSTREAM_ID = C.CLICKSTREAM_ID))) JOIN CTG_ANALYTICS.DIM_USER_AGENT U ON ((C.USER_AGENT_ID = U.USER_AGENT_ID)))) FIRST_VALID_AUTHORIZATION_AGENT UNION  SELECT FIRST_VALID_AUTHENTICATION_AGENT.AUTH_ID,
        FIRST_VALID_AUTHENTICATION_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        NULL AS PY_MAX_PRODUCT_HYBRID,
        NULL AS PY_MAX_PRODUCT,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS START_USER_AGENT_ID,
        NULL AS START_DEVICE_TYPE,
        NULL AS START_PLATFORM_TYPE,
        NULL AS START_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        FIRST_VALID_AUTHENTICATION_AGENT.FIRST_AUTHENTICATION_TIMESTAMP,
        FIRST_VALID_AUTHENTICATION_AGENT.FIRST_AUTHENTICATION_USER_AGENT_ID,
        FIRST_VALID_AUTHENTICATION_AGENT.FIRST_AUTHENTICATION_DEVICE_TYPE,
        FIRST_VALID_AUTHENTICATION_AGENT.FIRST_AUTHENTICATION_PLATFORM_TYPE,
        FIRST_VALID_AUTHENTICATION_AGENT.FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_FED_TAXORDER_TIMESTAMP,
        NULL::int AS FIRST_COMPLETE_USER_AGENT_ID,
        NULL AS FIRST_COMPLETE_DEVICE_TYPE,
        NULL AS FIRST_COMPLETE_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT BFA.AUTH_ID,
        BFA.FIRST_AUTH_TIMESTAMP AS FIRST_AUTHENTICATION_TIMESTAMP,
        BFA.TAX_YEAR,
        UA.USER_AGENT_ID AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        UA.DEVICE_TYPE AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        UA.PLATFORM_TYPE AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        UA.APP_TYPE AS FIRST_AUTHENTICATION_APP_TYPE
 FROM ((CTG_ANALYTICS.FACT_CLICKSTREAM FC JOIN ( SELECT SAF.AUTH_ID,
        SAF.TAX_YEAR,
        BCA.CLICKSTREAM_ID,
        BCA.AUTHENTICATION_ID,
        SAF.FIRST_AUTH_TIMESTAMP
 FROM (CTG_ANALYTICS.BRIDGE_CLICKSTREAM_AUTH BCA JOIN CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST SAF ON ((SAF.AUTHENTICATION_ID = BCA.AUTHENTICATION_ID)))) BFA ON ((BFA.CLICKSTREAM_ID = FC.CLICKSTREAM_ID))) JOIN CTG_ANALYTICS.DIM_USER_AGENT UA ON ((FC.USER_AGENT_ID = UA.USER_AGENT_ID)))) FIRST_VALID_AUTHENTICATION_AGENT) UNION  SELECT FIRST_COMPLETE_AGENT.AUTH_ID,
        FIRST_COMPLETE_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        NULL AS PY_MAX_PRODUCT_HYBRID,
        NULL AS PY_MAX_PRODUCT,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS START_USER_AGENT_ID,
        NULL AS START_DEVICE_TYPE,
        NULL AS START_PLATFORM_TYPE,
        NULL AS START_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        FIRST_COMPLETE_AGENT.FIRST_FED_TAXORDER_TIMESTAMP,
        FIRST_COMPLETE_AGENT.FIRST_COMPLETE_USER_AGENT_ID,
        FIRST_COMPLETE_AGENT.FIRST_COMPLETE_DEVICE_TYPE,
        FIRST_COMPLETE_AGENT.FIRST_COMPLETE_PLATFORM_TYPE,
        FIRST_COMPLETE_AGENT.FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT BOC.AUTH_ID,
        BOC.TAXORDER_ID,
        BOC.TAX_YEAR,
        FC.CLICKSTREAM_ID,
        DMG.USER_AGENT_ID AS FIRST_COMPLETE_USER_AGENT_ID,
        DMG.DEVICE_TYPE AS FIRST_COMPLETE_DEVICE_TYPE,
        DMG.PLATFORM_TYPE AS FIRST_COMPLETE_PLATFORM_TYPE,
        DMG.APP_TYPE AS FIRST_COMPLETE_APP_TYPE,
        BOC.FIRST_FED_TAXORDER_TIMESTAMP
 FROM ((( SELECT STO.AUTH_ID,
        STO.TAXORDER_ID,
        STO.TAX_YEAR,
        STO.ORDER_TIMESTAMP AS FIRST_FED_TAXORDER_TIMESTAMP,
        BCO.CLICKSTREAM_ID
 FROM (( SELECT SUB_TAXORDER_RANKED.AUTH_ID,
        SUB_TAXORDER_RANKED.TAXORDER_ID,
        SUB_TAXORDER_RANKED.TAX_YEAR,
        SUB_TAXORDER_RANKED.ORDER_TIMESTAMP,
        row_number() OVER (PARTITION BY SUB_TAXORDER_RANKED.AUTH_ID, SUB_TAXORDER_RANKED.TAX_YEAR ORDER BY SUB_TAXORDER_RANKED.ORDER_TIMESTAMP, SUB_TAXORDER_RANKED.TAXORDER_ID) AS ROWNUM
 FROM CTG_ANALYTICS.SUB_TAXORDER_RANKED) STO JOIN CTG_ANALYTICS.BRIDGE_CLICKSTREAM_TAXORDER BCO ON ((BCO.TAXORDER_ID = STO.TAXORDER_ID)))
 WHERE (STO.ROWNUM = 1)) BOC JOIN CTG_ANALYTICS.FACT_CLICKSTREAM FC ON ((FC.CLICKSTREAM_ID = BOC.CLICKSTREAM_ID))) JOIN CTG_ANALYTICS.DIM_USER_AGENT DMG ON ((DMG.USER_AGENT_ID = FC.USER_AGENT_ID)))) FIRST_COMPLETE_AGENT) UNION  SELECT FIRST_START_AGENT.AUTH_ID,
        FIRST_START_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        NULL AS PY_MAX_PRODUCT_HYBRID,
        NULL AS PY_MAX_PRODUCT,
        FIRST_START_AGENT.START_EXPERIENCE,
        FIRST_START_AGENT.FIRST_START_TIMESTAMP,
        FIRST_START_AGENT.START_USER_AGENT_ID,
        FIRST_START_AGENT.START_DEVICE_TYPE,
        FIRST_START_AGENT.START_PLATFORM_TYPE,
        FIRST_START_AGENT.START_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_FED_TAXORDER_TIMESTAMP,
        NULL::int AS FIRST_COMPLETE_USER_AGENT_ID,
        NULL AS FIRST_COMPLETE_DEVICE_TYPE,
        NULL AS FIRST_COMPLETE_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT S.AUTH_ID,
        S.START_EXPERIENCE,
        S.FIRST_START_TIMESTAMP,
        S.TAX_YEAR,
        U.USER_AGENT_ID AS START_USER_AGENT_ID,
        U.DEVICE_TYPE AS START_DEVICE_TYPE,
        U.PLATFORM_TYPE AS START_PLATFORM_TYPE,
        U.APP_TYPE AS START_APP_TYPE
 FROM ((CTG_ANALYTICS.FACT_CLICKSTREAM C JOIN CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST S ON ((S.CLICKSTREAM_ID = C.CLICKSTREAM_ID))) JOIN CTG_ANALYTICS.DIM_USER_AGENT U ON ((C.USER_AGENT_ID = U.USER_AGENT_ID)))) FIRST_START_AGENT) UNION  SELECT START_SKU.AUTH_ID,
        START_SKU.TAX_YEAR,
        START_SKU.START_SKU_ROLLUP_ID,
        START_SKU.START_SKU,
        START_SKU.START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        NULL AS PY_MAX_PRODUCT_HYBRID,
        NULL AS PY_MAX_PRODUCT,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS START_USER_AGENT_ID,
        NULL AS START_DEVICE_TYPE,
        NULL AS START_PLATFORM_TYPE,
        NULL AS START_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_FED_TAXORDER_TIMESTAMP,
        NULL::int AS FIRST_COMPLETE_USER_AGENT_ID,
        NULL AS FIRST_COMPLETE_DEVICE_TYPE,
        NULL AS FIRST_COMPLETE_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT SSB.AUTH_ID,
        SSB.TAX_YEAR,
        CASE WHEN (DSR.DISPLAY_SKU_NAME_WITH_SORT IS NULL) THEN NULL::timestamp ELSE SSB.START_SKU_TIMESTAMP END AS START_SKU_TIMESTAMP,
        SSB.START_SKU_ROLLUP_ID,
        DSR.DISPLAY_SKU_NAME_WITH_SORT AS START_SKU
 FROM (( SELECT C.AUTH_ID,
        C.TAX_YEAR,
        C.START_SKU_TIMESTAMP,
        C.START_SKU_ROLLUP_ID
 FROM ( SELECT B.AUTH_ID,
        B.TAX_YEAR,
        first_value(B.SKU_TIMESTAMP, true) OVER (PARTITION BY B.AUTH_ID, B.TAX_YEAR ORDER BY CASE WHEN ((B.SKU_ROLLUP_ID = 1) OR (B.SKU_ROLLUP_ID >= 37)) THEN 1 ELSE 0 END, B.SKU_TIMESTAMP) AS START_SKU_TIMESTAMP,
        first_value(B.SKU_ROLLUP_ID, true) OVER (PARTITION BY B.AUTH_ID, B.TAX_YEAR ORDER BY CASE WHEN ((B.SKU_ROLLUP_ID = 1) OR (B.SKU_ROLLUP_ID >= 37)) THEN 1 ELSE 0 END, B.SKU_TIMESTAMP) AS START_SKU_ROLLUP_ID,
        row_number() OVER (PARTITION BY B.AUTH_ID, B.TAX_YEAR ORDER BY B.SKU_TIMESTAMP) AS AUTH_RN
 FROM (( SELECT FACT_AUTHENTICATION.AUTH_ID,
        FACT_AUTHENTICATION.TAX_YEAR,
        FACT_AUTHENTICATION.AUTH_TIMESTAMP AS SKU_TIMESTAMP,
        FACT_AUTHENTICATION.SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_AUTHENTICATION UNION  SELECT FACT_TAXPREP_SESSION.AUTH_ID,
        FACT_TAXPREP_SESSION.TAX_YEAR,
        FACT_TAXPREP_SESSION.SESSION_TIMESTAMP AS SKU_TIMESTAMP,
        CASE WHEN (FACT_TAXPREP_SESSION.SESSION_TYPE = 'end'::varchar(3)) THEN FACT_TAXPREP_SESSION.ORIGINAL_SKU_ROLLUP_ID ELSE FACT_TAXPREP_SESSION.SKU_ROLLUP_ID END AS SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_TAXPREP_SESSION) UNION  SELECT FACT_TAXORDER.AUTH_ID,
        FACT_TAXORDER.TAX_YEAR,
        FACT_TAXORDER.ORDER_TIMESTAMP AS SKU_TIMESTAMP,
        FACT_TAXORDER.ORIGINAL_SKU_ROLLUP_ID AS SKU_ROLLUP_ID
 FROM CTG_ANALYTICS.FACT_TAXORDER
 WHERE (FACT_TAXORDER.ORIGINAL_SKU_ROLLUP_ID IS NOT NULL)) B) C
 WHERE (C.AUTH_RN = 1)) SSB JOIN CTG_ANALYTICS.DIM_SKU_ROLLUP DSR ON ((SSB.START_SKU_ROLLUP_ID = DSR.SKU_ROLLUP_ID)))) START_SKU) UNION  SELECT PY_CY_COMPLETED_SKU.AUTH_ID,
        PY_CY_COMPLETED_SKU.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        PY_CY_COMPLETED_SKU.COMPLETED_SKU,
        NULL::int AS COMPLETED_PRODUCT_ROLLUP_ID,
        PY_CY_COMPLETED_SKU.PY_MAX_PRODUCT_HYBRID,
        PY_CY_COMPLETED_SKU.PY_MAX_PRODUCT,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS START_USER_AGENT_ID,
        NULL AS START_DEVICE_TYPE,
        NULL AS START_PLATFORM_TYPE,
        NULL AS START_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_FED_TAXORDER_TIMESTAMP,
        NULL::int AS FIRST_COMPLETE_USER_AGENT_ID,
        NULL AS FIRST_COMPLETE_DEVICE_TYPE,
        NULL AS FIRST_COMPLETE_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETE_APP_TYPE
 FROM ( SELECT CK.AUTH_ID,
        CK.TAX_YEAR,
        CK.COMPLETED_SKU,
        CK.PY_MAX_PRODUCT_HYBRID,
        PY.COMPLETED_SKU AS PY_MAX_PRODUCT
 FROM (( SELECT AGC.AUTH_ID,
        AGC.TAX_YEAR,
        max(CASE WHEN (DP.PRODUCT_EDITION_DESCRIPTION IS NULL) THEN NULL WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX ITFP 1040'::varchar(18)) THEN '100|FFA'::varchar(7) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military Officers E6+'::varchar(21), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2013 PREP'::varchar(68), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2012 PREP'::varchar(68), 'TURBOTAX ONLINE DELUXE MILITARY EDITION TY2012 UPGRADE'::varchar(54), 'TURBOTAX ONLINE DELUXE MILITARY ED E6 AND ABOVE W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(80)]))) THEN '700|Paid Military'::varchar(17) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB FED - FREE NON-FFA'::varchar(31)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military E1-E5'::varchar(14), 'TURBOTAX ONLINE DELUXE MILITARY ED E1 TO E5 W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(76), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2012 PREP'::varchar(64), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2013 PREP'::varchar(64)]))) THEN '400|Free Military'::varchar(17) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB FED - FREE NON-FFA'::varchar(31), 'TURBOTAX WEB FREE PLUS BUNDLE'::varchar(29)])) THEN '200|Free TTO'::varchar(12) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB BASIC'::varchar(18))) THEN '500|Paid Basic'::varchar(14) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) THEN '600|Paid Deluxe'::varchar(15) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER'::varchar(20)) THEN '800|Paid Premier'::varchar(16) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER HOME & BUSINESS'::varchar(36)) THEN '900|Paid Home and Business'::varchar(26) ELSE ('000|Unknown Edt Desc|'::varchar(21) || DP.PRODUCT_EDITION_DESCRIPTION) END) AS COMPLETED_SKU,
        max(PCSH.PY_MAX_PRODUCT_HYBRID) AS PY_MAX_PRODUCT_HYBRID
 FROM (((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED AGC JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((AGC.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT DP ON (((DPA.PRODUCT_ID = DP.PRODUCT_ID) AND (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB - FEDERAL'::varchar(22), 'TURBOTAX WEB - FEDERAL ITFP'::varchar(27)]))))) LEFT JOIN ( SELECT AGC.CUSTOMER_KEY,
        AGC.TAX_YEAR,
        CASE WHEN (DP.PRODUCT_EDITION_DESCRIPTION IS NULL) THEN NULL WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX ITFP 1040'::varchar(18)) THEN '100|FFA'::varchar(7) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military Officers E6+'::varchar(21), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2013 PREP'::varchar(68), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2012 PREP'::varchar(68), 'TURBOTAX ONLINE DELUXE MILITARY EDITION TY2012 UPGRADE'::varchar(54), 'TURBOTAX ONLINE DELUXE MILITARY ED E6 AND ABOVE W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(80)]))) THEN '700|Paid Military'::varchar(17) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB FED - FREE NON-FFA'::varchar(31)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military E1-E5'::varchar(14), 'TURBOTAX ONLINE DELUXE MILITARY ED E1 TO E5 W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(76), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2012 PREP'::varchar(64), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2013 PREP'::varchar(64)]))) THEN '400|Free Military'::varchar(17) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB FED - FREE NON-FFA'::varchar(31), 'TURBOTAX WEB FREE PLUS BUNDLE'::varchar(29)])) THEN '200|Free TTO'::varchar(12) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB BASIC'::varchar(18))) THEN '500|Paid Basic'::varchar(14) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) THEN '600|Paid Deluxe'::varchar(15) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER'::varchar(20)) THEN '800|Paid Premier'::varchar(16) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER HOME & BUSINESS'::varchar(36)) THEN '900|Paid Home and Business'::varchar(26) WHEN (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX DESKTOP - FEDERAL DOWNLOAD'::varchar(35), 'TURBOTAX DESKTOP FEDERAL'::varchar(24), 'TURBOTAX DESKTOP FEDERAL - IN PRODUCT UPGRADE'::varchar(45), 'TURBOTAX DESKTOP FEDERAL MULTIPLE RETURN'::varchar(40), 'TURBOTAX DESKTOP BIZ FEDERAL'::varchar(28)])) THEN '990|Desktop (Any)'::varchar(17) ELSE ('000|Unknown Edt Desc|'::varchar(21) || DP.PRODUCT_EDITION_DESCRIPTION) END AS PY_MAX_PRODUCT_HYBRID
 FROM ((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED AGC JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((AGC.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT DP ON (((DPA.PRODUCT_ID = DP.PRODUCT_ID) AND (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB - FEDERAL'::varchar(22), 'TURBOTAX WEB - FEDERAL ITFP'::varchar(27), 'TURBOTAX DESKTOP - FEDERAL DOWNLOAD'::varchar(35), 'TURBOTAX DESKTOP FEDERAL'::varchar(24), 'TURBOTAX DESKTOP FEDERAL - IN PRODUCT UPGRADE'::varchar(45), 'TURBOTAX DESKTOP FEDERAL MULTIPLE RETURN'::varchar(40), 'TURBOTAX DESKTOP BIZ FEDERAL'::varchar(28)])))))) PCSH ON (((AGC.CUSTOMER_KEY = PCSH.CUSTOMER_KEY) AND (AGC.TAX_YEAR = (PCSH.TAX_YEAR + 1)))))
 WHERE (AGC.AUTH_ID IS NOT NULL)
 GROUP BY AGC.AUTH_ID,
          AGC.TAX_YEAR) CK LEFT JOIN ( SELECT AGC.AUTH_ID,
        AGC.TAX_YEAR,
        max(CASE WHEN (DP.PRODUCT_EDITION_DESCRIPTION IS NULL) THEN NULL WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX ITFP 1040'::varchar(18)) THEN '100|FFA'::varchar(7) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military Officers E6+'::varchar(21), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2013 PREP'::varchar(68), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2012 PREP'::varchar(68), 'TURBOTAX ONLINE DELUXE MILITARY EDITION TY2012 UPGRADE'::varchar(54), 'TURBOTAX ONLINE DELUXE MILITARY ED E6 AND ABOVE W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(80)]))) THEN '700|Paid Military'::varchar(17) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB FED - FREE NON-FFA'::varchar(31)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military E1-E5'::varchar(14), 'TURBOTAX ONLINE DELUXE MILITARY ED E1 TO E5 W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(76), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2012 PREP'::varchar(64), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2013 PREP'::varchar(64)]))) THEN '400|Free Military'::varchar(17) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB FED - FREE NON-FFA'::varchar(31), 'TURBOTAX WEB FREE PLUS BUNDLE'::varchar(29)])) THEN '200|Free TTO'::varchar(12) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB BASIC'::varchar(18))) THEN '500|Paid Basic'::varchar(14) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) THEN '600|Paid Deluxe'::varchar(15) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER'::varchar(20)) THEN '800|Paid Premier'::varchar(16) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER HOME & BUSINESS'::varchar(36)) THEN '900|Paid Home and Business'::varchar(26) ELSE ('000|Unknown Edt Desc|'::varchar(21) || DP.PRODUCT_EDITION_DESCRIPTION) END) AS COMPLETED_SKU,
        max(PCSH.PY_MAX_PRODUCT_HYBRID) AS PY_MAX_PRODUCT_HYBRID
 FROM (((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED AGC JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((AGC.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT DP ON (((DPA.PRODUCT_ID = DP.PRODUCT_ID) AND (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB - FEDERAL'::varchar(22), 'TURBOTAX WEB - FEDERAL ITFP'::varchar(27)]))))) LEFT JOIN ( SELECT AGC.CUSTOMER_KEY,
        AGC.TAX_YEAR,
        CASE WHEN (DP.PRODUCT_EDITION_DESCRIPTION IS NULL) THEN NULL WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX ITFP 1040'::varchar(18)) THEN '100|FFA'::varchar(7) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military Officers E6+'::varchar(21), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2013 PREP'::varchar(68), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E6 AND ABOVE TY2012 PREP'::varchar(68), 'TURBOTAX ONLINE DELUXE MILITARY EDITION TY2012 UPGRADE'::varchar(54), 'TURBOTAX ONLINE DELUXE MILITARY ED E6 AND ABOVE W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(80)]))) THEN '700|Paid Military'::varchar(17) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB FED - FREE NON-FFA'::varchar(31)) AND (DP.PRODUCT_DESCRIPTION = ANY (ARRAY['Military E1-E5'::varchar(14), 'TURBOTAX ONLINE DELUXE MILITARY ED E1 TO E5 W/EASY EXTENSION TY2013 ENSEMBLE'::varchar(76), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2012 PREP'::varchar(64), 'TURBOTAX ONLINE FED DELUXE MILITARY EDITION E1 TO E5 TY2013 PREP'::varchar(64)]))) THEN '400|Free Military'::varchar(17) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB FED - FREE NON-FFA'::varchar(31), 'TURBOTAX WEB FREE PLUS BUNDLE'::varchar(29)])) THEN '200|Free TTO'::varchar(12) WHEN ((AGC.TAX_YEAR <= 2013) AND (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB BASIC'::varchar(18))) THEN '500|Paid Basic'::varchar(14) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB DELUXE'::varchar(19)) THEN '600|Paid Deluxe'::varchar(15) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER'::varchar(20)) THEN '800|Paid Premier'::varchar(16) WHEN (DP.PRODUCT_EDITION_DESCRIPTION = 'TURBOTAX WEB PREMIER HOME & BUSINESS'::varchar(36)) THEN '900|Paid Home and Business'::varchar(26) WHEN (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX DESKTOP - FEDERAL DOWNLOAD'::varchar(35), 'TURBOTAX DESKTOP FEDERAL'::varchar(24), 'TURBOTAX DESKTOP FEDERAL - IN PRODUCT UPGRADE'::varchar(45), 'TURBOTAX DESKTOP FEDERAL MULTIPLE RETURN'::varchar(40), 'TURBOTAX DESKTOP BIZ FEDERAL'::varchar(28)])) THEN '990|Desktop (Any)'::varchar(17) ELSE ('000|Unknown Edt Desc|'::varchar(21) || DP.PRODUCT_EDITION_DESCRIPTION) END AS PY_MAX_PRODUCT_HYBRID
 FROM ((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED AGC JOIN CTG_ANALYTICS.DIM_PRODUCT_ALIAS DPA ON ((AGC.PRODUCT_ALIAS_ID = DPA.PRODUCT_ALIAS_ID))) JOIN CTG_ANALYTICS.DIM_PRODUCT DP ON (((DPA.PRODUCT_ID = DP.PRODUCT_ID) AND (DP.PRODUCT_FAMILY_DESCRIPTION = ANY (ARRAY['TURBOTAX WEB - FEDERAL'::varchar(22), 'TURBOTAX WEB - FEDERAL ITFP'::varchar(27), 'TURBOTAX DESKTOP - FEDERAL DOWNLOAD'::varchar(35), 'TURBOTAX DESKTOP FEDERAL'::varchar(24), 'TURBOTAX DESKTOP FEDERAL - IN PRODUCT UPGRADE'::varchar(45), 'TURBOTAX DESKTOP FEDERAL MULTIPLE RETURN'::varchar(40), 'TURBOTAX DESKTOP BIZ FEDERAL'::varchar(28)])))))) PCSH ON (((AGC.CUSTOMER_KEY = PCSH.CUSTOMER_KEY) AND (AGC.TAX_YEAR = (PCSH.TAX_YEAR + 1)))))
 WHERE (AGC.AUTH_ID IS NOT NULL)
 GROUP BY AGC.AUTH_ID,
          AGC.TAX_YEAR) PY ON (((CK.AUTH_ID = PY.AUTH_ID) AND (CK.TAX_YEAR = (PY.TAX_YEAR + 1)))))) PY_CY_COMPLETED_SKU) COMBINE_AGENTS_S2C_SKU
 GROUP BY COMBINE_AGENTS_S2C_SKU.AUTH_ID,
          COMBINE_AGENTS_S2C_SKU.TAX_YEAR
 ORDER BY COMBINE_AGENTS_S2C_SKU.AUTH_ID,
          COMBINE_AGENTS_S2C_SKU.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.SUB_REFUND_TRANSFER_ORDER AS
 SELECT TAXORDER.TAXFILER_ID,
        TAXORDER.TAX_YEAR,
        sum(CASE WHEN (SUBSET.SUB_BUNDLE_NAME = 'CA'::varchar(2)) THEN 1 ELSE 0 END) AS CA_RT_NUM,
        count(TAXORDER.TAXFILER_ID) AS RT_COUNT
 FROM (CTG_ANALYTICS.FACT_TAXORDER TAXORDER JOIN ( SELECT PRODALIAS.PRODUCT_ID,
        PRODALIAS.PRODUCT_ALIAS_ID,
        PRODALIAS.ITEM_ALIAS_CODE,
        BUNDLE.BUNDLE_NAME,
        BUNDLE.SUB_BUNDLE_NAME
 FROM (CTG_ANALYTICS.DIM_PRODUCT_ALIAS PRODALIAS JOIN CTG_ANALYTICS.DIM_BUNDLE_ROLLUP BUNDLE ON ((BUNDLE.PRODUCT_ID = PRODALIAS.PRODUCT_ID)))
 WHERE (BUNDLE.BUNDLE_NAME = 'RT'::varchar(2))) SUBSET ON ((TAXORDER.PRODUCT_ALIAS_ID = SUBSET.PRODUCT_ALIAS_ID)))
 GROUP BY TAXORDER.TAXFILER_ID,
          TAXORDER.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.DIM_TAXORDER_STATUS AS
 SELECT TAXORDER_STATUS.TAXORDER_STATUS_ID,
        TAXORDER_STATUS.STATUS,
        TAXORDER_STATUS.DESCRIPTION,
        TAXORDER_STATUS.BATCH_EVENT_ID,
        TAXORDER_STATUS.CREATED_TIMESTAMP,
        TAXORDER_STATUS.UPDATED_TIMESTAMP
 FROM CTG_ANALYTICS_SRC.TAXORDER_STATUS;

CREATE  VIEW CTG_ANALYTICS.AGG_SESSIONS_TO_COMPLETE_VIEW AS
 SELECT fts.AUTH_ID AS auth_id,
        fts.TAX_YEAR AS tax_year,
        count(1) AS session_count
 FROM (CTG_ANALYTICS.FACT_TAXPREP_SESSION fts JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST stff ON (((fts.AUTH_ID = stff.AUTH_ID) AND (fts.TAX_YEAR = stff.TAX_YEAR))))
 WHERE ((fts.SESSION_TYPE = 'start'::varchar(5)) AND (fts.SESSION_TIMESTAMP < stff.FIRST_FED_TAXORDER_TIMESTAMP))
 GROUP BY fts.AUTH_ID,
          fts.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.DIM_AB_TEST_RECIPE AS
 SELECT REC.RECIPE_ID,
        REC.QB_RECIPE_ID,
        REC.RECIPE_IN_BEACON,
        TST.AB_TEST_ID,
        TST.QB_TEST_RECORD_ID,
        TST.TEST_NAME,
        TST.TEST_DESCRIPTION,
        TST.TEST_HYPOTHESIS_DESCRIPTION,
        TST.TEST_BASE_TYPE,
        TST.PRODUCT_MANAGER_NAME,
        TST.ANALYST_NAME,
        TST.TEST_START_TIMESTAMP,
        TST.TEST_END_TIMESTAMP,
        REC.EXPERIENCE_DETAIL_LOCATION,
        REC.EXPERIENCE_DETAIL_VALUE,
        REC.RECIPE_NAME,
        REC.RECIPE_HYPOTHESIS_DESCRIPTION
 FROM (CTG_ANALYTICS.DIM_RECIPE REC LEFT JOIN CTG_ANALYTICS.DIM_AB_TEST TST ON ((TST.AB_TEST_ID = REC.AB_TEST_ID)));

CREATE  VIEW CTG_ANALYTICS.SUB_VISITOR_MULTIFILER_RESTRICTED AS
 SELECT SUB_VISITOR_MULTIFILER.VISITOR_OMT_ID,
        SUB_VISITOR_MULTIFILER.TAX_YEAR,
        CASE WHEN ((SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP IS NULL) AND (SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP IS NULL)) THEN SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP WHEN ((SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP IS NULL) AND (SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP IS NULL)) THEN SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP WHEN ((SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP IS NULL) AND (SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP IS NULL)) THEN SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP WHEN ((SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP) OR (SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP)) THEN SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP WHEN ((SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP) OR (SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP)) THEN SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP WHEN ((SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP) OR (SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP <= SUB_VISITOR_MULTIFILER.AUTH_ID_TAXORDER_MULTIFILER_TIMESTAMP)) THEN SUB_VISITOR_MULTIFILER.AUTH_ID_CLICKSTREAM_MULTIFILER_TIMESTAMP ELSE NULL::timestamp END AS MULTIFILER_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_VISITOR_MULTIFILER;

CREATE  VIEW CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER_RESTRICTED AS
 SELECT SUB_AUTH_ID_MULTIFILER.AUTH_ID,
        SUB_AUTH_ID_MULTIFILER.TAX_YEAR,
        CASE WHEN (SUB_AUTH_ID_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP IS NULL) THEN SUB_AUTH_ID_MULTIFILER.TAXORDER_MULTIFILER_TIMESTAMP WHEN (SUB_AUTH_ID_MULTIFILER.TAXORDER_MULTIFILER_TIMESTAMP IS NULL) THEN SUB_AUTH_ID_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP WHEN (SUB_AUTH_ID_MULTIFILER.TAXORDER_MULTIFILER_TIMESTAMP < SUB_AUTH_ID_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP) THEN SUB_AUTH_ID_MULTIFILER.TAXORDER_MULTIFILER_TIMESTAMP ELSE SUB_AUTH_ID_MULTIFILER.CLICKSTREAM_MULTIFILER_TIMESTAMP END AS MULTIFILER_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_AUTH_ID_MULTIFILER;

CREATE  VIEW CTG_ANALYTICS.FACT_CLICKSTREAM_SKU_SELECTION AS
 SELECT FSS.AUTH_ID,
        FSS.CLICKSTREAM_ID,
        FSS.VISITOR_OMT_ID,
        FSS.TAX_YEAR,
        FSS.TAX_DATE_ID,
        FSS.SERVER_TIMESTAMP,
        FSS.RECOMMEND_REASON,
        RS.SKU_ID AS RECOMMENDED_SKU,
        RS.SKU_NAME AS RECOMMENDED_SKU_NAME,
        SS.SKU_ID AS SELECTED_SKU,
        SS.SKU_NAME AS SELECTED_SKU_NAME,
        RD.SKU_ID AS DEFAULT_RECOMMENDED_SKU,
        RD.SKU_NAME AS DEFAULT_RECOMMENDED_SKU_NAME,
        FSS.EXPERIENCE_LOCATION_SEEN,
        FSS.EXPERIENCE_SUB_LOCATION_SEEN,
        FSS.EXPERIENCE_LOCATION_RECOMMENDED,
        FSS.EXPERIENCE_SUB_LOCATION_RECOMMENDED,
        FSS.SITUATION_CHANGED,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%single%'::varchar(8)) THEN 1 ELSE 0 END) AS SINGLE_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%children%'::varchar(10)) THEN 1 ELSE 0 END) AS CHILDREN_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%homeowner%'::varchar(11)) THEN 1 ELSE 0 END) AS HOMEOWNER_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%deductions%'::varchar(12)) THEN 1 ELSE 0 END) AS DEDUCTIONS_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%stock%'::varchar(7)) THEN 1 ELSE 0 END) AS STOCKS_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%hb%'::varchar(4)) THEN 1 ELSE 0 END) AS HB_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%business%'::varchar(10)) THEN 1 ELSE 0 END) AS BUSINESS_TILE,
        max(CASE WHEN (coalesce(lower(T.TILE_NAME), '*'::varchar(1)) ~~* '%homebusiness%'::varchar(14)) THEN 1 ELSE 0 END) AS HOMEBUSINESS_TILE
 FROM ((((CTG_ANALYTICS.FACT_SKU_SELECTION FSS LEFT JOIN ( SELECT FCT.CLICKSTREAM_ID,
        DT.TILE_NAME
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM_TILE FCT JOIN CTG_ANALYTICS.DIM_TILE DT ON ((DT.TILE_ID = FCT.TILE_ID)))) T ON ((T.CLICKSTREAM_ID = FSS.CLICKSTREAM_ID))) LEFT JOIN CTG_ANALYTICS.DIM_SKU_ROLLUP RS ON ((RS.SKU_ROLLUP_ID = FSS.RECOMMENDED_SKU_ROLLUP_ID))) LEFT JOIN CTG_ANALYTICS.DIM_SKU_ROLLUP SS ON ((SS.SKU_ROLLUP_ID = FSS.SELECTED_SKU_ROLLUP_ID))) LEFT JOIN CTG_ANALYTICS.DIM_SKU_ROLLUP RD ON ((RD.SKU_ROLLUP_ID = FSS.DEFAULT_RECOMMENDED_SKU_ROLLUP_ID)))
 GROUP BY FSS.AUTH_ID,
          FSS.CLICKSTREAM_ID,
          FSS.VISITOR_OMT_ID,
          FSS.TAX_YEAR,
          FSS.TAX_DATE_ID,
          FSS.SERVER_TIMESTAMP,
          FSS.RECOMMEND_REASON,
          RS.SKU_ID,
          RS.SKU_NAME,
          SS.SKU_ID,
          SS.SKU_NAME,
          RD.SKU_ID,
          RD.SKU_NAME,
          FSS.EXPERIENCE_LOCATION_SEEN,
          FSS.EXPERIENCE_SUB_LOCATION_SEEN,
          FSS.EXPERIENCE_LOCATION_RECOMMENDED,
          FSS.EXPERIENCE_SUB_LOCATION_RECOMMENDED,
          FSS.SITUATION_CHANGED;

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_SKU_SELECTION AS
 SELECT AGG_AUTH_SKU.AUTH_ID,
        AGG_AUTH_SKU.TAX_YEAR,
        AGG_AUTH_SKU.START_SKU_TIMESTAMP,
        AGG_AUTH_SKU.FIRST_SERVER_TIMESTAMP,
        AGG_AUTH_SKU.LAST_RECOMMEND_REASON_B4_FAPD,
        AGG_AUTH_SKU.LAST_EXPERIENCE_LOCATION_SEEN_B4_FAPD,
        AGG_AUTH_SKU.LAST_EXPERIENCE_SUB_LOCATION_SEEN_B4_FAPD,
        AGG_AUTH_SKU.LAST_EXPERIENCE_LOCATION_RECOMMENDED_B4_FAPD,
        AGG_AUTH_SKU.LAST_EXPERIENCE_SUB_LOCATION_RECOMMENDED_B4_FAPD,
        AGG_AUTH_SKU.LAST_SITUATION_CHANGED_B4_FAPD,
        AGG_AUTH_SKU.LAST_SITUATION_CHANGED_TIMESTAMP_B4_FAPD,
        AGG_AUTH_SKU.LAST_SELECTED_SKU_B4_FAPD,
        AGG_AUTH_SKU.FIRST_RECOMMENDED_SKU,
        AGG_AUTH_SKU.FIRST_RECOMMENDED_SKU_B4_FAPD,
        AGG_AUTH_SKU.FIRST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        AGG_AUTH_SKU.LAST_RECOMMENDED_SKU,
        AGG_AUTH_SKU.LAST_RECOMMENDED_SKU_B4_FAPD,
        AGG_AUTH_SKU.LAST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        AGG_AUTH_SKU.SINGLE_TILE_COUNT_B4_FAPD,
        AGG_AUTH_SKU.CHILDREN_TILE_COUNT_B4_FAPD,
        AGG_AUTH_SKU.HOMEOWNER_TILE_COUNT_B4_FAPD,
        AGG_AUTH_SKU.DEDUCTIONS_TILE_COUNT_B4_FAPD,
        AGG_AUTH_SKU.STOCKS_TILE_COUNT_B4_FAPD,
        AGG_AUTH_SKU.HB_TILE_COUNT_B4_FAPD
 FROM ( SELECT SS.AUTH_ID,
        SS.TAX_YEAR,
        SCTTSF.FIRST_START_TIMESTAMP AS START_SKU_TIMESTAMP,
        row_number() OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP) AS AGG_ORDER,
        first_value(SS.SERVER_TIMESTAMP, false) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_SERVER_TIMESTAMP,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.RECOMMEND_REASON ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMEND_REASON_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_LOCATION_SEEN ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_LOCATION_SEEN_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_SUB_LOCATION_SEEN ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_SUB_LOCATION_SEEN_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_LOCATION_RECOMMENDED ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_LOCATION_RECOMMENDED_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_SUB_LOCATION_RECOMMENDED ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_SUB_LOCATION_RECOMMENDED_B4_FAPD,
        first_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.SITUATION_CHANGED ELSE NULL END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SITUATION_CHANGED_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.SITUATION_CHANGED IS NOT NULL)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SITUATION_CHANGED_TIMESTAMP_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.SELECTED_SKU > 1)) THEN SS.SELECTED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SELECTED_SKU_B4_FAPD,
        first_value(CASE WHEN (SS.RECOMMENDED_SKU > 1) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU,
        last_value(CASE WHEN (SS.RECOMMENDED_SKU > 1) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU,
        first_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU_B4_FAPD,
        first_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.SINGLE_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SINGLE_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.CHILDREN_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS CHILDREN_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.HOMEOWNER_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS HOMEOWNER_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.DEDUCTIONS_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DEDUCTIONS_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.STOCKS_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS STOCKS_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.HB_TILE ELSE NULL::int END) OVER (PARTITION BY SS.AUTH_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS HB_TILE_COUNT_B4_FAPD
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM_SKU_SELECTION SS LEFT JOIN CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST SCTTSF ON (((SCTTSF.AUTH_ID = SS.AUTH_ID) AND (SCTTSF.TAX_YEAR = SS.TAX_YEAR))))) AGG_AUTH_SKU
 WHERE (AGG_AUTH_SKU.AGG_ORDER = 1);

CREATE  VIEW CTG_ANALYTICS.AGG_VISITOR_SKU_SELECTION AS
 SELECT AGG_VISITOR_SKU.VISITOR_OMT_ID,
        AGG_VISITOR_SKU.TAX_YEAR,
        AGG_VISITOR_SKU.START_SKU_TIMESTAMP,
        AGG_VISITOR_SKU.FIRST_SERVER_TIMESTAMP,
        AGG_VISITOR_SKU.LAST_RECOMMEND_REASON_B4_FAPD,
        AGG_VISITOR_SKU.LAST_EXPERIENCE_LOCATION_SEEN_B4_FAPD,
        AGG_VISITOR_SKU.LAST_EXPERIENCE_SUB_LOCATION_SEEN_B4_FAPD,
        AGG_VISITOR_SKU.LAST_EXPERIENCE_LOCATION_RECOMMENDED_B4_FAPD,
        AGG_VISITOR_SKU.LAST_EXPERIENCE_SUB_LOCATION_RECOMMENDED_B4_FAPD,
        AGG_VISITOR_SKU.LAST_SITUATION_CHANGED_B4_FAPD,
        AGG_VISITOR_SKU.LAST_SITUATION_CHANGED_TIMESTAMP_B4_FAPD,
        AGG_VISITOR_SKU.LAST_SELECTED_SKU_B4_FAPD,
        AGG_VISITOR_SKU.FIRST_RECOMMENDED_SKU,
        AGG_VISITOR_SKU.FIRST_RECOMMENDED_SKU_B4_FAPD,
        AGG_VISITOR_SKU.FIRST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        AGG_VISITOR_SKU.LAST_RECOMMENDED_SKU,
        AGG_VISITOR_SKU.LAST_RECOMMENDED_SKU_B4_FAPD,
        AGG_VISITOR_SKU.LAST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        AGG_VISITOR_SKU.SINGLE_TILE_COUNT_B4_FAPD,
        AGG_VISITOR_SKU.CHILDREN_TILE_COUNT_B4_FAPD,
        AGG_VISITOR_SKU.HOMEOWNER_TILE_COUNT_B4_FAPD,
        AGG_VISITOR_SKU.DEDUCTIONS_TILE_COUNT_B4_FAPD,
        AGG_VISITOR_SKU.STOCKS_TILE_COUNT_B4_FAPD,
        AGG_VISITOR_SKU.HB_TILE_COUNT_B4_FAPD
 FROM ( SELECT SS.VISITOR_OMT_ID,
        SS.TAX_YEAR,
        SCTTSF.FIRST_START_TIMESTAMP AS START_SKU_TIMESTAMP,
        row_number() OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP) AS AGG_ORDER,
        first_value(SS.SERVER_TIMESTAMP, false) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_SERVER_TIMESTAMP,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.RECOMMEND_REASON ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMEND_REASON_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_LOCATION_SEEN ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_LOCATION_SEEN_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_SUB_LOCATION_SEEN ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_SUB_LOCATION_SEEN_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_LOCATION_RECOMMENDED ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_LOCATION_RECOMMENDED_B4_FAPD,
        last_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.EXPERIENCE_SUB_LOCATION_RECOMMENDED ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_EXPERIENCE_SUB_LOCATION_RECOMMENDED_B4_FAPD,
        first_value(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.SITUATION_CHANGED ELSE NULL END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SITUATION_CHANGED_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.SITUATION_CHANGED IS NOT NULL)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SITUATION_CHANGED_TIMESTAMP_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.SELECTED_SKU > 1)) THEN SS.SELECTED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SELECTED_SKU_B4_FAPD,
        first_value(CASE WHEN (SS.RECOMMENDED_SKU > 1) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU,
        last_value(CASE WHEN (SS.RECOMMENDED_SKU > 1) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU,
        first_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU_B4_FAPD,
        first_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS FIRST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.RECOMMENDED_SKU ELSE NULL::int END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU_B4_FAPD,
        last_value(CASE WHEN (((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) AND (SS.RECOMMENDED_SKU > 1)) THEN SS.SERVER_TIMESTAMP ELSE NULL::timestamp END, true) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_RECOMMENDED_SKU_TIMESTAMP_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.SINGLE_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SINGLE_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.CHILDREN_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS CHILDREN_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.HOMEOWNER_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS HOMEOWNER_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.DEDUCTIONS_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DEDUCTIONS_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.STOCKS_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS STOCKS_TILE_COUNT_B4_FAPD,
        sum(CASE WHEN ((SCTTSF.FIRST_START_TIMESTAMP IS NULL) OR (SS.SERVER_TIMESTAMP <= SCTTSF.FIRST_START_TIMESTAMP)) THEN SS.HB_TILE ELSE NULL::int END) OVER (PARTITION BY SS.VISITOR_OMT_ID, SS.TAX_YEAR ORDER BY SS.SERVER_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS HB_TILE_COUNT_B4_FAPD
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM_SKU_SELECTION SS LEFT JOIN CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST SCTTSF ON (((SCTTSF.AUTH_ID = SS.AUTH_ID) AND (SCTTSF.TAX_YEAR = SS.TAX_YEAR))))) AGG_VISITOR_SKU
 WHERE (AGG_VISITOR_SKU.AGG_ORDER = 1);

CREATE  VIEW CTG_ANALYTICS.AGG_VISITOR AS
 SELECT FC.VISITOR_OMT_ID,
        FC.VISIT_NUM AS FIRST_CAMPAIGN_VISIT_NUM,
        FC.TAX_YEAR,
        ASR.NONFFA_FLAG,
        ASR.PAGE_BOUNCE,
        ASR.BOUNCE,
        ASR.TOTAL_SESSIONS,
        ASR.MIN_SERVER_TIMESTAMP,
        ASR.MULTIFILER_FLAG,
        ASR.FIRST_MULTIFILER_TIMESTAMP,
        ASR.FIRST_CAMPAIGN_ID,
        FC.TAX_DATE_ID AS FIRST_CAMPAIGN_TAX_DATE_ID,
        FC.PAGE_ID AS FIRST_CAMPAIGN_PAGE_ID,
        FC.REFERRER_PAGE_URL_ID AS FIRST_CAMPAIGN_REFERRER_PAGE_URL_ID,
        FC.POST_KEYWORD_ID AS FIRST_CAMPAIGN_POST_KEYWORD_ID,
        FC.USER_AGENT_ID AS FIRST_CAMPAIGN_USER_AGENT_ID,
        FC.SERVER_TIMESTAMP AS FIRST_CAMPAIGN_VISIT_DATE,
        FC.CLICKSTREAM_ID AS FIRST_CAMPAIGN_CLICKSTREAM_ID
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM FC JOIN ( SELECT AGS.VISITOR_OMT_ID,
        AGS.TAX_YEAR,
        min(AGS.VISIT_NUM) AS FIRST_CAMPAIGN_VISIT_NUM,
        min(CASE AGS.NONFFA_FLAG WHEN NULLSEQUAL 'true'::varchar(4) THEN 1 ELSE 0 END) AS NONFFA_FLAG,
        CASE WHEN (sum(AGS.PAGE_COUNT) = 1) THEN true ELSE false END AS PAGE_BOUNCE,
        CASE WHEN (sum(AGS.HIT_COUNT) < 3) THEN true ELSE false END AS BOUNCE,
        count(AGS.SESSION_ID) AS TOTAL_SESSIONS,
        sum(AGS.PAGE_COUNT) AS PAGE,
        sum(AGS.HIT_COUNT) AS HIT,
        min(AGS.MIN_SERVER_TIMESTAMP) AS MIN_SERVER_TIMESTAMP,
        min(SVMR.FIRST_MULTIFILER_TIMESTAMP) AS FIRST_MULTIFILER_TIMESTAMP,
        min(CASE WHEN (AGS.FIRST_CAMPAIGN_ID = (-1)) THEN NULL::int ELSE AGS.FIRST_CAMPAIGN_ID END) AS FIRST_CAMPAIGN_ID,
        CASE WHEN (min(SVMR.FIRST_MULTIFILER_TIMESTAMP) IS NOT NULL) THEN 1 ELSE 0 END AS MULTIFILER_FLAG
 FROM (CTG_ANALYTICS.AGG_SESSION AGS LEFT JOIN ( SELECT SVMR.VISITOR_OMT_ID,
        SVMR.TAX_YEAR,
        SVMR.MULTIFILER_TIMESTAMP AS FIRST_MULTIFILER_TIMESTAMP
 FROM CTG_ANALYTICS.SUB_VISITOR_MULTIFILER_RESTRICTED SVMR) SVMR ON (((AGS.VISITOR_OMT_ID = SVMR.VISITOR_OMT_ID) AND (AGS.TAX_YEAR = SVMR.TAX_YEAR))))
 GROUP BY AGS.VISITOR_OMT_ID,
          AGS.TAX_YEAR) ASR ON (((FC.VISITOR_OMT_ID = ASR.VISITOR_OMT_ID) AND (FC.TAX_YEAR = ASR.TAX_YEAR) AND (FC.VISIT_NUM = ASR.FIRST_CAMPAIGN_VISIT_NUM))));

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_FUNNEL AS
 SELECT COMBINED.AUTH_ID,
        COMBINED.TAX_YEAR,
        max(COMBINED.START_SKU_ROLLUP_ID) AS START_SKU_ROLLUP_ID,
        max(COMBINED.START_SKU) AS START_SKU,
        max(COMBINED.START_SKU_TIMESTAMP) AS START_SKU_TIMESTAMP,
        max(COMBINED.COMPLETED_SKU_RANKED) AS COMPLETED_SKU_RANKED,
        max(COMBINED.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED) AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        max(COMBINED.PRIOR_YEAR_COMPLETED_SKU_RANKED) AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        max(COMBINED.FIRST_COMPLETED_SKU_TIMESTAMP) AS FIRST_COMPLETED_SKU_TIMESTAMP,
        max(COMBINED.FIRST_AUTHENTICATION_TIMESTAMP) AS FIRST_AUTHENTICATION_TIMESTAMP,
        max(COMBINED.FIRST_AUTHENTICATION_USER_AGENT_ID) AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        max(COMBINED.FIRST_AUTHENTICATION_DEVICE_TYPE) AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        max(COMBINED.FIRST_AUTHENTICATION_PLATFORM_TYPE) AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        max(COMBINED.FIRST_AUTHENTICATION_APP_TYPE) AS FIRST_AUTHENTICATION_APP_TYPE,
        max(COMBINED.FIRST_AUTHORIZATION_TIMESTAMP) AS FIRST_AUTHORIZATION_TIMESTAMP,
        max(COMBINED.FIRST_AUTHORIZATION_USER_AGENT_ID) AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        max(COMBINED.FIRST_AUTHORIZATION_DEVICE_TYPE) AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        max(COMBINED.FIRST_AUTHORIZATION_PLATFORM_TYPE) AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        max(COMBINED.FIRST_AUTHORIZATION_APP_TYPE) AS FIRST_AUTHORIZATION_APP_TYPE,
        max(COMBINED.START_EXPERIENCE) AS START_EXPERIENCE,
        max(COMBINED.FIRST_START_TIMESTAMP) AS FIRST_START_TIMESTAMP,
        max(COMBINED.FIRST_START_USER_AGENT_ID) AS FIRST_START_USER_AGENT_ID,
        max(COMBINED.FIRST_START_DEVICE_TYPE) AS FIRST_START_DEVICE_TYPE,
        max(COMBINED.FIRST_START_PLATFORM_TYPE) AS FIRST_START_PLATFORM_TYPE,
        max(COMBINED.FIRST_START_APP_TYPE) AS FIRST_START_APP_TYPE,
        max(COMBINED.FIRST_COMPLETED_TIMESTAMP) AS FIRST_COMPLETED_TIMESTAMP,
        max(COMBINED.FIRST_COMPLETED_USER_AGENT_ID) AS FIRST_COMPLETED_USER_AGENT_ID,
        max(COMBINED.FIRST_COMPLETED_DEVICE_TYPE) AS FIRST_COMPLETED_DEVICE_TYPE,
        max(COMBINED.FIRST_COMPLETED_PLATFORM_TYPE) AS FIRST_COMPLETED_PLATFORM_TYPE,
        max(COMBINED.FIRST_COMPLETED_APP_TYPE) AS FIRST_COMPLETED_APP_TYPE,
        max(COMBINED.AUTH_CLICKSTREAM_ID) AS AUTH_CLICKSTREAM_ID,
        max(COMBINED.AUTH_CAMPAIGN_ID) AS AUTH_CAMPAIGN_ID
 FROM (((((( SELECT FACT_AUTH_ID_START_SKU.AUTH_ID,
        FACT_AUTH_ID_START_SKU.TAX_YEAR,
        FACT_AUTH_ID_START_SKU.START_SKU_ROLLUP_ID,
        FACT_AUTH_ID_START_SKU.START_SKU,
        FACT_AUTH_ID_START_SKU.START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.FACT_AUTH_ID_START_SKU UNION  SELECT FACT_AUTH_ID_COMPLETED_SKU.AUTH_ID,
        FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.PRIOR_YEAR_COMPLETED_SKU_RANKED,
        FACT_AUTH_ID_COMPLETED_SKU.FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU) UNION  SELECT FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_TIMESTAMP,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_USER_AGENT_ID,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_DEVICE_TYPE,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_PLATFORM_TYPE,
        FACT_AUTH_ID_AUTHENTICATION_USER_AGENT.FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.FACT_AUTH_ID_AUTHENTICATION_USER_AGENT) UNION  SELECT FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_TIMESTAMP,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_USER_AGENT_ID,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_DEVICE_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_PLATFORM_TYPE,
        FACT_AUTH_ID_AUTHORIZATION_USER_AGENT.FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.FACT_AUTH_ID_AUTHORIZATION_USER_AGENT) UNION  SELECT TT.AUTH_ID,
        TT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        TT.START_EXPERIENCE,
        TT.FIRST_START_TIMESTAMP,
        TT.FIRST_START_USER_AGENT_ID,
        DUA.DEVICE_TYPE AS FIRST_START_DEVICE_TYPE,
        DUA.PLATFORM_TYPE AS FIRST_START_PLATFORM_TYPE,
        DUA.APP_TYPE AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM (CTG_ANALYTICS.SUB_CLICKSTREAM_TT_START_FIRST TT JOIN CTG_ANALYTICS.DIM_USER_AGENT DUA ON ((TT.FIRST_START_USER_AGENT_ID = DUA.USER_AGENT_ID)))) UNION  SELECT FACT_AUTH_ID_COMPLETED_USER_AGENT.AUTH_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_TIMESTAMP,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_USER_AGENT_ID,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_DEVICE_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_PLATFORM_TYPE,
        FACT_AUTH_ID_COMPLETED_USER_AGENT.FIRST_COMPLETED_APP_TYPE,
        NULL::int AS AUTH_CLICKSTREAM_ID,
        NULL::int AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_USER_AGENT) UNION  SELECT SUB_AUTH_CREDIT_CAMPAIGN.AUTH_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.TAX_YEAR,
        NULL::int AS START_SKU_ROLLUP_ID,
        NULL AS START_SKU,
        NULL::timestamp AS START_SKU_TIMESTAMP,
        NULL AS COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        NULL AS PRIOR_YEAR_COMPLETED_SKU_RANKED,
        NULL::timestamp AS FIRST_COMPLETED_SKU_TIMESTAMP,
        NULL::timestamp AS FIRST_AUTHENTICATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHENTICATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHENTICATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHENTICATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHENTICATION_APP_TYPE,
        NULL::timestamp AS FIRST_AUTHORIZATION_TIMESTAMP,
        NULL::int AS FIRST_AUTHORIZATION_USER_AGENT_ID,
        NULL AS FIRST_AUTHORIZATION_DEVICE_TYPE,
        NULL AS FIRST_AUTHORIZATION_PLATFORM_TYPE,
        NULL AS FIRST_AUTHORIZATION_APP_TYPE,
        NULL AS START_EXPERIENCE,
        NULL::timestamp AS FIRST_START_TIMESTAMP,
        NULL::int AS FIRST_START_USER_AGENT_ID,
        NULL AS FIRST_START_DEVICE_TYPE,
        NULL AS FIRST_START_PLATFORM_TYPE,
        NULL AS FIRST_START_APP_TYPE,
        NULL::timestamp AS FIRST_COMPLETED_TIMESTAMP,
        NULL::int AS FIRST_COMPLETED_USER_AGENT_ID,
        NULL AS FIRST_COMPLETED_DEVICE_TYPE,
        NULL AS FIRST_COMPLETED_PLATFORM_TYPE,
        NULL AS FIRST_COMPLETED_APP_TYPE,
        SUB_AUTH_CREDIT_CAMPAIGN.CLICKSTREAM_ID AS ASAUTH_CLICKSTREAM_ID,
        SUB_AUTH_CREDIT_CAMPAIGN.CAMPAIGN_ID AS AUTH_CAMPAIGN_ID
 FROM CTG_ANALYTICS.SUB_AUTH_CREDIT_CAMPAIGN) COMBINED
 GROUP BY COMBINED.AUTH_ID,
          COMBINED.TAX_YEAR
 ORDER BY COMBINED.AUTH_ID,
          COMBINED.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.FACT_VAUTH_CONSOLIDATED_FIRST AS
 SELECT SRC.AUTHENTICATION_ID,
        SRC.TAXPREP_SESSION_ID,
        SRC.AUTH_ID,
        SRC.TAX_YEAR,
        SRC.FIRST_VAUTH_TIMESTAMP
 FROM ( SELECT A.AUTHENTICATION_ID,
        A.TAXPREP_SESSION_ID,
        A.AUTH_ID,
        A.TAX_YEAR,
        A.FIRST_VAUTH_TIMESTAMP,
        row_number() OVER (PARTITION BY A.TAX_YEAR, A.AUTH_ID ORDER BY A.FIRST_VAUTH_TIMESTAMP, A.RANK_USING_AUTHORIZATION, A.AUTHENTICATION_ID, A.RANK_USING_TAXPREP_SESSION, A.TAXPREP_SESSION_ID) AS AUTHORIZATION_ORDER
 FROM ( SELECT SUB_AUTHORIZATION_FIRST.AUTHENTICATION_ID,
        0 AS RANK_USING_AUTHORIZATION,
        (-1) AS TAXPREP_SESSION_ID,
        1 AS RANK_USING_TAXPREP_SESSION,
        SUB_AUTHORIZATION_FIRST.AUTH_ID,
        SUB_AUTHORIZATION_FIRST.FIRST_AUTH_TIMESTAMP AS FIRST_VAUTH_TIMESTAMP,
        SUB_AUTHORIZATION_FIRST.TAX_YEAR
 FROM CTG_ANALYTICS.SUB_AUTHORIZATION_FIRST UNION  SELECT (-1) AS AUTHENTICATION_ID,
        1 AS RANK_USING_AUTHORIZATION,
        SUB_TAXPREP_SESSION_FIRST.TAXPREP_SESSION_ID,
        0 AS RANK_USING_TAXPREP_SESSION,
        SUB_TAXPREP_SESSION_FIRST.AUTH_ID,
        SUB_TAXPREP_SESSION_FIRST.FIRST_SESSION_TIMESTAMP AS FIRST_VAUTH_TIMESTAMP,
        SUB_TAXPREP_SESSION_FIRST.TAX_YEAR
 FROM CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST) A) SRC
 WHERE (SRC.AUTHORIZATION_ORDER = 1);

CREATE  VIEW CTG_ANALYTICS.CTG_ANALYTICSAUTH_ID_COMPLETED_SKU_TRANSPOSED AS
 SELECT TRANSPOSED.AUTH_ID,
        max(TRANSPOSED.TY15_COMPLETED_SKU_RANKED) AS TY15_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY14_COMPLETED_SKU_RANKED) AS TY14_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY13_COMPLETED_SKU_RANKED) AS TY13_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY12_COMPLETED_SKU_RANKED) AS TY12_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY11_COMPLETED_SKU_RANKED) AS TY11_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY10_COMPLETED_SKU_RANKED) AS TY10_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY09_COMPLETED_SKU_RANKED) AS TY09_COMPLETED_SKU_RANKED,
        max(TRANSPOSED.TY08_COMPLETED_SKU_RANKED) AS TY08_COMPLETED_SKU_RANKED
 FROM ( SELECT FACT_AUTH_ID_COMPLETED_SKU.AUTH_ID,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2015) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY15_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2014) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY14_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2013) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY13_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2012) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY12_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2011) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY11_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2010) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY10_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2009) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY09_COMPLETED_SKU_RANKED,
        CASE WHEN (FACT_AUTH_ID_COMPLETED_SKU.TAX_YEAR = 2008) THEN FACT_AUTH_ID_COMPLETED_SKU.COMPLETED_SKU_RANKED ELSE NULL END AS TY08_COMPLETED_SKU_RANKED
 FROM CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU) TRANSPOSED
 GROUP BY TRANSPOSED.AUTH_ID;

CREATE  VIEW CTG_ANALYTICS.AUTH_FORM_ACCEPTED AS
 SELECT AFA.AUTH_ID,
        coalesce(max(AFA.TY14_FORM_ID), (-1)) AS TY14_FORM_ID,
        coalesce(max(AFA.TY13_FORM_ID), (-1)) AS TY13_FORM_ID,
        coalesce(max(AFA.TY15_FORM_ID), (-1)) AS TY15_FORM_ID
 FROM (( SELECT A.AUTH_ID,
        (-1) AS TY13_FORM_ID,
        (-1) AS TY14_FORM_ID,
        coalesce(C.FORM_ID, 0) AS TY15_FORM_ID
 FROM (( SELECT DISTINCT FORM_USAGE_TRANSPOSED.AUTH_ID,
        FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
        row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE) AS RN
 FROM CAT_DWH.FORM_USAGE_TRANSPOSED
 ORDER BY FORM_USAGE_TRANSPOSED.AUTH_ID,
          FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
          row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE)) A LEFT JOIN CTG_ANALYTICS.DIM_FORM C ON ((A.FED_FORM_TYPE = C.FORM_NAME)))
 WHERE ((A.RN = 1) AND (A.AUTH_ID IS NOT NULL)) UNION  SELECT A.AUTH_ID,
        (-1) AS TY13_FORM_ID,
        coalesce(C.FORM_ID, 0) AS TY14_FORM_ID,
        (-1) AS TY15_FORM_ID
 FROM (( SELECT DISTINCT FORM_USAGE_TRANSPOSED.AUTH_ID,
        FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
        row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE) AS RN
 FROM CAT_TY14_DWH.FORM_USAGE_TRANSPOSED
 ORDER BY FORM_USAGE_TRANSPOSED.AUTH_ID,
          FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
          row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE)) A LEFT JOIN CTG_ANALYTICS.DIM_FORM C ON ((A.FED_FORM_TYPE = C.FORM_NAME)))
 WHERE ((A.RN = 1) AND (A.AUTH_ID IS NOT NULL))) UNION  SELECT A.AUTH_ID,
        coalesce(C.FORM_ID, 0) AS TY13_FORM_ID,
        (-1) AS TY14_FORM_ID,
        (-1) AS TY15_FORM_ID
 FROM (( SELECT DISTINCT FORM_USAGE_TRANSPOSED.AUTH_ID,
        FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
        row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE) AS RN
 FROM CAT_TY13_DWH.FORM_USAGE_TRANSPOSED
 ORDER BY FORM_USAGE_TRANSPOSED.AUTH_ID,
          FORM_USAGE_TRANSPOSED.FED_FORM_TYPE,
          row_number() OVER (PARTITION BY FORM_USAGE_TRANSPOSED.AUTH_ID ORDER BY FORM_USAGE_TRANSPOSED.RECEIVED_DATE)) A LEFT JOIN CTG_ANALYTICS.DIM_FORM C ON ((A.FED_FORM_TYPE = C.FORM_NAME)))
 WHERE ((A.RN = 1) AND (A.AUTH_ID IS NOT NULL))) AFA
 GROUP BY AFA.AUTH_ID;

CREATE  VIEW CTG_ANALYTICS.BRIDGE_PRS_VERBATIM AS
 SELECT PRS.PRS_ID,
        PRS.PRS_TIMESTAMP,
        PRS.AUTH_ID,
        PRS.SCORE,
        PRS.TAX_YEAR,
        VER.PRS_DATE AS VERBATIM_TIMESTAMP,
        VER.VERBATIM
 FROM (CTG_ANALYTICS.FACT_PRS PRS JOIN MATT_DWH.PRS_VERBATIM VER ON (((PRS.AUTH_ID = VER.AUTH_ID) AND (PRS.TAX_YEAR = VER.TAX_YEAR) AND (PRS.PRS_TIMESTAMP = VER.PRS_DATE))));

CREATE  VIEW CTG_ANALYTICS.FACT_CUSTOMER_STATE_ZIP AS
 SELECT TRN.CUSTOMER_KEY,
        TRN.MARKETING_CUSTOMER_ID,
        TRN.STATE_ABBREVIATION,
        TRN.ZIP_CODE,
        TRN.TAX_YEAR
 FROM (CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP TRN JOIN ( SELECT TRN_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
        TRN_CUSTOMER_STATE_ZIP.TAX_YEAR,
        min(TRN_CUSTOMER_STATE_ZIP.MARKETING_CUSTOMER_ID) AS MARKETING_CUSTOMER_ID
 FROM CTG_ANALYTICS_SRC.TRN_CUSTOMER_STATE_ZIP
 GROUP BY TRN_CUSTOMER_STATE_ZIP.CUSTOMER_KEY,
          TRN_CUSTOMER_STATE_ZIP.TAX_YEAR) SUB ON (((TRN.CUSTOMER_KEY = SUB.CUSTOMER_KEY) AND (TRN.TAX_YEAR = SUB.TAX_YEAR) AND (TRN.MARKETING_CUSTOMER_ID = SUB.MARKETING_CUSTOMER_ID))));

CREATE  VIEW CTG_ANALYTICS.AGG_CUSTOMER_LOOKUP AS
 SELECT A.CUSTOMER_KEY,
        A.PRIMARY_ID,
        A.SECONDARY_ID,
        B.AUTH_ID,
        B.PRODUCT_VERSION AS TAX_YEAR
 FROM (CTG_ANALYTICS_SRC.DIM_CUSTOMER A LEFT JOIN CTG_ANALYTICS.FACT_TAXORDER B ON ((A.CUSTOMER_KEY = B.CUSTOMER_KEY)))
 WHERE (B.PRODUCT_VERSION >= 2009)
 GROUP BY A.CUSTOMER_KEY,
          A.PRIMARY_ID,
          A.SECONDARY_ID,
          B.AUTH_ID,
          B.PRODUCT_VERSION;

CREATE  VIEW CTG_ANALYTICS.FACT_CLICKSTREAM_VISITOR AS
( SELECT FINAL_MULTI_DEVICE_BY_VISITOR.TAX_YEAR,
        FINAL_MULTI_DEVICE_BY_VISITOR.VISITOR_OMT_ID,
        FINAL_MULTI_DEVICE_BY_VISITOR.VISITOR_TYPE,
        FINAL_MULTI_DEVICE_BY_VISITOR.MULTI_DEVICE_TIMESTAMP,
        FINAL_MULTI_DEVICE_BY_VISITOR.FIRST_MULTI_DEVICE_FLAG
 FROM ( SELECT MULTI_DEVICE_BY_VISITOR.TAX_YEAR,
        MULTI_DEVICE_BY_VISITOR.VISITOR_OMT_ID,
        MULTI_DEVICE_BY_VISITOR.VISITOR_TYPE,
        MULTI_DEVICE_BY_VISITOR.MULTI_DEVICE_TIMESTAMP,
        MULTI_DEVICE_BY_VISITOR.FIRST_MULTI_DEVICE_FLAG,
        row_number() OVER (PARTITION BY MULTI_DEVICE_BY_VISITOR.TAX_YEAR, MULTI_DEVICE_BY_VISITOR.VISITOR_OMT_ID ORDER BY MULTI_DEVICE_BY_VISITOR.MULTI_DEVICE_TIMESTAMP) AS RN
 FROM ( SELECT A.TAX_YEAR,
        A.VISITOR_OMT_ID,
        'Multi-Device'::varchar(12) AS VISITOR_TYPE,
        min(B.FIRST_VISIT_TIMESTAMP) AS MULTI_DEVICE_TIMESTAMP,
        true AS FIRST_MULTI_DEVICE_FLAG
 FROM (( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP,
        row_number() OVER (PARTITION BY FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID ORDER BY FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP) AS VISIT_ORDER
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID) IN ( SELECT MULTI_VISITOR_AUTH_IDS.TAX_YEAR,
        MULTI_VISITOR_AUTH_IDS.AUTH_ID
 FROM ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0)
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.AUTH_ID
 HAVING (count(DISTINCT FACT_VISITOR_AUTHID.VISITOR_OMT_ID) > 1)) MULTI_VISITOR_AUTH_IDS))) A JOIN ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP,
        row_number() OVER (PARTITION BY FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID ORDER BY FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP) AS VISIT_ORDER
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID) IN ( SELECT MULTI_VISITOR_AUTH_IDS.TAX_YEAR,
        MULTI_VISITOR_AUTH_IDS.AUTH_ID
 FROM ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0)
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.AUTH_ID
 HAVING (count(DISTINCT FACT_VISITOR_AUTHID.VISITOR_OMT_ID) > 1)) MULTI_VISITOR_AUTH_IDS))) B ON (((B.TAX_YEAR = A.TAX_YEAR) AND (B.AUTH_ID = A.AUTH_ID) AND (B.VISITOR_OMT_ID <> A.VISITOR_OMT_ID) AND (A.VISIT_ORDER = 1) AND (B.VISIT_ORDER = 2))))
 GROUP BY A.TAX_YEAR,
          A.VISITOR_OMT_ID UNION  SELECT A.TAX_YEAR,
        A.VISITOR_OMT_ID,
        'Multi-Device'::varchar(12) AS VISITOR_TYPE,
        A.FIRST_VISIT_TIMESTAMP AS MULTI_DEVICE_TIMESTAMP,
        false AS FIRST_MULTI_DEVICE_FLAG
 FROM ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP,
        row_number() OVER (PARTITION BY FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID ORDER BY FACT_VISITOR_AUTHID.FIRST_VISIT_TIMESTAMP) AS VISIT_ORDER
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID) IN ( SELECT MULTI_VISITOR_AUTH_IDS.TAX_YEAR,
        MULTI_VISITOR_AUTH_IDS.AUTH_ID
 FROM ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0)
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.AUTH_ID
 HAVING (count(DISTINCT FACT_VISITOR_AUTHID.VISITOR_OMT_ID) > 1)) MULTI_VISITOR_AUTH_IDS))) A
 WHERE (A.VISIT_ORDER >= 2)
 GROUP BY A.TAX_YEAR,
          A.VISITOR_OMT_ID,
          'Multi-Device'::varchar(12),
          A.FIRST_VISIT_TIMESTAMP) MULTI_DEVICE_BY_VISITOR) FINAL_MULTI_DEVICE_BY_VISITOR
 WHERE (FINAL_MULTI_DEVICE_BY_VISITOR.RN = 1) UNION  SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        'Single-Device'::varchar(13) AS VISITOR_TYPE,
        NULL::timestamp AS MULTI_DEVICE_TIMESTAMP,
        NULL::boolean AS FIRST_MULTI_DEVICE_FLAG
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (((FACT_VISITOR_AUTHID.VISITOR_OMT_ID, FACT_VISITOR_AUTHID.TAX_YEAR) NOT IN ( SELECT FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        FACT_VISITOR_AUTHID.TAX_YEAR
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID) IN ( SELECT MULTI_VISITOR_AUTH_IDS.TAX_YEAR,
        MULTI_VISITOR_AUTH_IDS.AUTH_ID
 FROM ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0)
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.AUTH_ID
 HAVING (count(DISTINCT FACT_VISITOR_AUTHID.VISITOR_OMT_ID) > 1)) MULTI_VISITOR_AUTH_IDS)))) AND ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.AUTH_ID) IN ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.AUTH_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0)
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.AUTH_ID
 HAVING (count(DISTINCT FACT_VISITOR_AUTHID.VISITOR_OMT_ID) = 1))))
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
          'Single-Device'::varchar(13),
          NULL::timestamp,
          NULL::boolean) UNION  SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
        'No-Auth'::varchar(7) AS VISITOR_TYPE,
        NULL::timestamp AS MULTI_DEVICE_TIMESTAMP,
        NULL::boolean AS FIRST_MULTI_DEVICE_FLAG
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE ((FACT_VISITOR_AUTHID.AUTH_ID = (-1)) AND ((FACT_VISITOR_AUTHID.TAX_YEAR, FACT_VISITOR_AUTHID.VISITOR_OMT_ID) NOT IN ( SELECT FACT_VISITOR_AUTHID.TAX_YEAR,
        FACT_VISITOR_AUTHID.VISITOR_OMT_ID
 FROM CTG_ANALYTICS.FACT_VISITOR_AUTHID
 WHERE (FACT_VISITOR_AUTHID.AUTH_ID > 0))))
 GROUP BY FACT_VISITOR_AUTHID.TAX_YEAR,
          FACT_VISITOR_AUTHID.VISITOR_OMT_ID,
          'No-Auth'::varchar(7),
          NULL::timestamp,
          NULL::boolean;

CREATE  VIEW CTG_ANALYTICS.AGG_SESSION_CAMPAIGN AS
 SELECT /*+syntactic_join*/ FC.CLICKSTREAM_ID,
        SS.SESSION_ID,
        FC.VISITOR_OMT_ID,
        FC.VISIT_NUM,
        FC.TAX_YEAR,
        CC.CAMPAIGN_ID AS FIRST_CAMPAIGN_ID,
        FC.PAGE_ID AS FIRST_PAGE_ID,
        FC.PAGE_URL_ID AS FIRST_PAGE_URL_ID,
        FC.REFERRER_PAGE_URL_ID,
        FC.POST_KEYWORD_ID AS FIRST_POST_KEYWORD_ID,
        FC.USER_AGENT_ID AS FIRST_USER_AGENT_ID
 FROM (CTG_ANALYTICS.FACT_CLICKSTREAM FC JOIN (CTG_ANALYTICS.SUB_CLICKSTREAM_VISITOR_CREDIT_CAMPAIGN CC JOIN CTG_ANALYTICS.AGG_SESSION SS ON (((CC.VISITOR_OMT_ID = SS.VISITOR_OMT_ID) AND (CC.VISIT_NUM = SS.VISIT_NUM) AND (CC.TAX_YEAR = SS.TAX_YEAR)))) ON ((CC.CLICKSTREAM_ID = FC.CLICKSTREAM_ID)));

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_REVENUE_BAK AS
 SELECT ATR.AUTH_ID,
        ATR.TAX_YEAR,
        sum(ATR.TOTAL_REVENUE) AS TOTAL_REVENUE,
        sum(coalesce(ATR.FEDERAL_REVENUE, 0.0)) AS TOTAL_FEDERAL_REVENUE,
        sum(coalesce(ATR.STATE_REVENUE, 0.0)) AS TOTAL_STATE_REVENUE,
        sum(ATR.STATE_ATTACH_COUNT) AS NUM_STATE_ATTACH,
        sum(coalesce(ATR.MINDBENDER_REVENUE, 0.0)) AS TOTAL_MINDBENDER_REVENUE,
        sum(ATR.MINDBENDER_FLAG) AS NUM_MINDBENDER_ATTACH,
        sum(coalesce(ATR.AUDIT_DEFENSE_REVENUE, 0.0)) AS TOTAL_AUDIT_DEFENSE_REVENUE,
        sum(ATR.AUDIT_DEFENSE_FLAG) AS NUM_AUDIT_DEFENSE_ATTACH,
        sum(coalesce(ATR.REFUND_TRANSFER_REVENUE, 0.0)) AS TOTAL_REFUND_TRANSFER_REVENUE,
        sum(ATR.REFUND_TRANSFER_FLAG) AS NUM_REFUND_TRANSFER_ATTACH,
        sum(coalesce(ATR.CA_AUDIT_DEFENSE_REVENUE, 0.0)) AS TOTAL_CA_AUDIT_DEFENSE_REVENUE,
        sum(ATR.CA_AUDIT_DEFENSE_FLAG) AS NUM_CA_AUDIT_DEFENSE_ATTACH,
        sum(coalesce(ATR.CA_REFUND_TRANSFER_REVENUE, 0.0)) AS TOTAL_CA_REFUND_TRANSFER_REVENUE,
        sum(ATR.CA_REFUND_TRANSFER_FLAG) AS NUM_CA_REFUND_TRANSFER_ATTACH,
        sum(coalesce(ATR.NON_CA_REFUND_TRANSFER_REVENUE, 0.0)) AS TOTAL_NONCA_REFUND_TRANSFER_REVENUE,
        sum(ATR.NON_CA_REFUND_TRANSFER_FLAG) AS NUM_NONCA_REFUND_TRANSFER_ATTACH,
        sum(coalesce(ATR.NON_CA_AUDIT_DEFENSE_REVENUE, 0.0)) AS TOTAL_NONCA_AUDIT_DEFENSE_RREVENUE,
        sum(ATR.NON_CA_AUDIT_DEFENSE_FLAG) AS NUM_NONCA_AUDIT_DEFENSE_ATTACH,
        sum(coalesce(ATR.CA_MAX_REVENUE, 0.0)) AS TOTAL_CA_MAX_REVENUE,
        sum(ATR.CA_MAX_FLAG) AS NUM_CA_MAX_ATTACH,
        sum(coalesce(ATR.NON_CA_MAX_REVENUE, 0.0)) AS TOTAL_NON_CA_MAX_REVENUE,
        sum(ATR.NON_CA_MAX_FLAG) AS NUM_NON_CA_MAX_ATTACH,
        sum(coalesce(ATR.MAX_REVENUE, 0.0)) AS TOTAL_MAX_REVENUE,
        sum(ATR.MAX_FLAG) AS NUM_MAX_ATTACH,
        sum(coalesce(ATR.PS_REVENUE, 0.0)) AS TOTAL_PS_REVENUE,
        sum(ATR.PS_FLAG) AS NUM_PS_ATTACH,
        sum(coalesce(ATR.QB_SUBSCRIPTION_REVENUE, 0.0)) AS TOTAL_QB_SUBSCRIPTION_REVENUE,
        sum(ATR.QB_SUBSCRIPTION_FLAG) AS NUM_QB_SUBSCRIPTION_ATTACH,
        sum(coalesce(ATR.QBTT_SUBSCRIPTION_REVENUE, 0.0)) AS TOTAL_QBTT_SUBSCRIPTION_REVENUE,
        sum(ATR.QBTT_SUBSCRIPTION_FLAG) AS NUM_QBTT_SUBSCRIPTION_ATTACH,
        max(CS.COMPLETED_SKU_RANKED) AS COMPLETED_SKU_RANKED,
        max(CS.PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED) AS PRIOR_YEAR_CUSTOMER_COMPLETED_SKU_RANKED,
        min(STFF.FIRST_FED_TAXORDER_TIMESTAMP) AS FIRST_FEDERAL_COMPLETED_DATE
 FROM ((CTG_ANALYTICS.AGG_CUSTOMER_REVENUE ATR LEFT JOIN CTG_ANALYTICS.FACT_AUTH_ID_COMPLETED_SKU CS ON (((ATR.AUTH_ID = CS.AUTH_ID) AND (ATR.TAX_YEAR = CS.TAX_YEAR)))) LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_FED_FIRST STFF ON (((ATR.AUTH_ID = STFF.AUTH_ID) AND (ATR.TAX_YEAR = STFF.TAX_YEAR))))
 WHERE (ATR.AUTH_ID IS NOT NULL)
 GROUP BY ATR.AUTH_ID,
          ATR.TAX_YEAR;

CREATE  VIEW CTG_ANALYTICS.FACT_AUTH_CONSOLIDATED_FIRST AS
 SELECT SRC.AUTHENTICATION_ID,
        SRC.TAXPREP_SESSION_ID,
        SRC.AUTH_ID,
        SRC.TAX_YEAR,
        SRC.FIRST_NEAUTH_TIMESTAMP
 FROM ( SELECT A.AUTHENTICATION_ID,
        0 AS RANK_USING_AUTHENTICATION_ID,
        (-1) AS TAXPREP_SESSION_ID,
        1 AS RANK_USING_TAXPREP_SESSION_ID,
        A.AUTH_ID,
        A.FIRST_AUTH_TIMESTAMP AS FIRST_NEAUTH_TIMESTAMP,
        A.TAX_YEAR
 FROM CTG_ANALYTICS.SUB_AUTHENTICATION_FIRST A UNION ALL  SELECT (-1) AS AUTHENTICATION_ID,
        1 AS RANK_USING_AUTHENTICATION_ID,
        B.TAXPREP_SESSION_ID,
        0 AS RANK_USING_TAXPREP_SESSION_ID,
        B.AUTH_ID,
        B.FIRST_SESSION_TIMESTAMP AS FIRST_NEAUTH_TIMESTAMP,
        B.TAX_YEAR
 FROM CTG_ANALYTICS.SUB_TAXPREP_SESSION_FIRST B) SRC
 LIMIT 1
 OVER (
 PARTITION BY  SRC.TAX_YEAR,
          SRC.AUTH_ID
 ORDER BY  SRC.FIRST_NEAUTH_TIMESTAMP, SRC.RANK_USING_AUTHENTICATION_ID, SRC.AUTHENTICATION_ID, SRC.RANK_USING_TAXPREP_SESSION_ID, SRC.TAXPREP_SESSION_ID);

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_TTO_SEGMENT AS
 SELECT TTO.AUTH_ID,
        TTO.EVALUATION_TAX_YEAR,
        TTO.TTO_SEGMENT,
        TTO.TTO_SEGMENT_RUP AS TTO_SEGMENT_ROLLUP,
        TTO.TTO_SEGMENT_HYBRID,
        TTO.TTO_SEGMENT_HYBRID_RUP AS TTO_SEGMENT_HYBRID_ROLLUP,
        ACS.CUSTOMER_TYPE,
        ACS.CUSTOMER_TYPE_ROLLUP,
        TTO.PY_CUSTOMER_TYPE,
        TTO.PY_CUSTOMER_TYPE_ROLLUP
 FROM (( SELECT TT.AUTH_ID,
        TT.EVALUATION_TAX_YEAR,
        TT.TTO_SEGMENT,
        CASE WHEN ((TT.TTO_SEGMENT = 'New'::varchar(3)) OR (TT.TTO_SEGMENT = 'Skip Year'::varchar(9))) THEN 'New'::varchar(3) WHEN ((TT.TTO_SEGMENT = '1st Year Returning'::varchar(18)) OR (TT.TTO_SEGMENT = 'Veteran Returning'::varchar(17))) THEN 'Returning'::varchar(9) ELSE TT.TTO_SEGMENT END AS TTO_SEGMENT_RUP,
        CASE WHEN (CS.CUSTOMER_TYPE_ROLLUP = 'New'::varchar(3)) THEN '1st Year Returning'::varchar(18) WHEN (CS.CUSTOMER_TYPE_ROLLUP = 'Existing'::varchar(8)) THEN 'Veteran Returning'::varchar(17) ELSE TT.TTO_SEGMENT END AS TTO_SEGMENT_HYBRID,
        CASE WHEN ((CS.CUSTOMER_TYPE_ROLLUP = 'New'::varchar(3)) OR (CS.CUSTOMER_TYPE_ROLLUP = 'Existing'::varchar(8))) THEN 'Returning'::varchar(9) ELSE 'New'::varchar(3) END AS TTO_SEGMENT_HYBRID_RUP,
        CS.CUSTOMER_TYPE AS PY_CUSTOMER_TYPE,
        CS.CUSTOMER_TYPE_ROLLUP AS PY_CUSTOMER_TYPE_ROLLUP
 FROM (( SELECT COMBINE_FLAG.AUTH_ID,
        COMBINE_FLAG.EVALUATION_TAX_YEAR,
        CASE WHEN (((COMBINE_FLAG.PY2_FLAG = 1) OR (COMBINE_FLAG.PY3_FLAG = 1)) AND (COMBINE_FLAG.PY_FLAG = 0)) THEN 'Skip Year'::varchar(9) WHEN ((COMBINE_FLAG.PY2_FLAG = 1) AND (COMBINE_FLAG.PY_FLAG = 1)) THEN 'Veteran Returning'::varchar(17) WHEN ((COMBINE_FLAG.PY_FLAG = 1) AND (COMBINE_FLAG.PY2_FLAG = 0)) THEN '1st Year Returning'::varchar(18) ELSE 'New'::varchar(3) END AS TTO_SEGMENT
 FROM ( SELECT P1.AUTH_ID,
        P1.EVALUATION_TAX_YEAR,
        P1.PY_FLAG,
        P2.PY2_FLAG,
        P3.PY3_FLAG
 FROM ((( SELECT CTY.AUTH_ID,
        CTY.TAX_YEAR AS EVALUATION_TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS PY_FLAG
 FROM (( SELECT FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
        FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR
 FROM CTG_ANALYTICS.FACT_AUTH_CONSOLIDATED_FIRST
 WHERE (FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID IS NOT NULL)
 GROUP BY FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
          FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_RANKED TFF ON (((CTY.AUTH_ID = TFF.AUTH_ID) AND (CTY.TAX_YEAR = (TFF.TAX_YEAR + 1)))))
 GROUP BY CTY.AUTH_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END
 ORDER BY CTY.AUTH_ID,
          CTY.TAX_YEAR) P1 JOIN ( SELECT CTY.AUTH_ID,
        CTY.TAX_YEAR AS EVALUATION_TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS PY2_FLAG
 FROM (( SELECT FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
        FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR
 FROM CTG_ANALYTICS.FACT_AUTH_CONSOLIDATED_FIRST
 WHERE (FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID IS NOT NULL)
 GROUP BY FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
          FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_RANKED TFF ON (((CTY.AUTH_ID = TFF.AUTH_ID) AND (CTY.TAX_YEAR = (TFF.TAX_YEAR + 2)))))
 GROUP BY CTY.AUTH_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END
 ORDER BY CTY.AUTH_ID,
          CTY.TAX_YEAR) P2 ON (((P1.AUTH_ID = P2.AUTH_ID) AND (P1.EVALUATION_TAX_YEAR = P2.EVALUATION_TAX_YEAR)))) JOIN ( SELECT CTY.AUTH_ID,
        CTY.TAX_YEAR AS EVALUATION_TAX_YEAR,
        CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END AS PY3_FLAG
 FROM (( SELECT FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
        FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR
 FROM CTG_ANALYTICS.FACT_AUTH_CONSOLIDATED_FIRST
 WHERE (FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID IS NOT NULL)
 GROUP BY FACT_AUTH_CONSOLIDATED_FIRST.AUTH_ID,
          FACT_AUTH_CONSOLIDATED_FIRST.TAX_YEAR) CTY LEFT JOIN CTG_ANALYTICS.SUB_TAXORDER_RANKED TFF ON (((CTY.AUTH_ID = TFF.AUTH_ID) AND (CTY.TAX_YEAR = (TFF.TAX_YEAR + 3)))))
 GROUP BY CTY.AUTH_ID,
          CTY.TAX_YEAR,
          CASE WHEN (TFF.TAX_YEAR IS NULL) THEN 0 ELSE 1 END
 ORDER BY CTY.AUTH_ID,
          CTY.TAX_YEAR) P3 ON (((P1.AUTH_ID = P3.AUTH_ID) AND (P1.EVALUATION_TAX_YEAR = P3.EVALUATION_TAX_YEAR))))) COMBINE_FLAG) TT LEFT JOIN ( SELECT ACS.AUTH_ID,
        ACS.TAX_YEAR,
        ACS.CUSTOMER_TYPE,
        ACS.CUSTOMER_TYPE_ROLLUP
 FROM ( SELECT ACO.AUTH_ID,
        ACO.TAX_YEAR,
        DIM.CUSTOMER_TYPE,
        DIM.CUSTOMER_TYPE_ROLLUP,
        row_number() OVER (PARTITION BY ACO.AUTH_ID, ACO.TAX_YEAR ORDER BY DIM.CUSTOMER_TYPE_RANK, ACO.CUSTOMER_KEY) AS ROWNUM
 FROM ((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED ACO JOIN CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT SUB ON (((SUB.CUSTOMER_KEY = ACO.CUSTOMER_KEY) AND (SUB.TAX_YEAR = ACO.TAX_YEAR)))) JOIN CTG_ANALYTICS.DIM_CUSTOMER_TYPE DIM ON ((DIM.CUSTOMER_TYPE_ID = SUB.CUSTOMER_TYPE_ID)))
 WHERE (ACO.AUTH_ID IS NOT NULL)) ACS
 WHERE (ACS.ROWNUM = 1)) CS ON (((CS.AUTH_ID = TT.AUTH_ID) AND (TT.EVALUATION_TAX_YEAR = (CS.TAX_YEAR + 1)))))) TTO LEFT JOIN ( SELECT ACS.AUTH_ID,
        ACS.TAX_YEAR,
        ACS.CUSTOMER_TYPE,
        ACS.CUSTOMER_TYPE_ROLLUP
 FROM ( SELECT ACO.AUTH_ID,
        ACO.TAX_YEAR,
        DIM.CUSTOMER_TYPE,
        DIM.CUSTOMER_TYPE_ROLLUP,
        row_number() OVER (PARTITION BY ACO.AUTH_ID, ACO.TAX_YEAR ORDER BY DIM.CUSTOMER_TYPE_RANK, ACO.CUSTOMER_KEY) AS ROWNUM
 FROM ((CTG_ANALYTICS.AGG_COMPLETED_ORDERS_RANKED ACO JOIN CTG_ANALYTICS.SUB_CUSTOMER_SEGMENT SUB ON (((SUB.CUSTOMER_KEY = ACO.CUSTOMER_KEY) AND (SUB.TAX_YEAR = ACO.TAX_YEAR)))) JOIN CTG_ANALYTICS.DIM_CUSTOMER_TYPE DIM ON ((DIM.CUSTOMER_TYPE_ID = SUB.CUSTOMER_TYPE_ID)))
 WHERE (ACO.AUTH_ID IS NOT NULL)) ACS
 WHERE (ACS.ROWNUM = 1)) ACS ON (((ACS.AUTH_ID = TTO.AUTH_ID) AND (TTO.EVALUATION_TAX_YEAR = ACS.TAX_YEAR))));

CREATE  VIEW CTG_ANALYTICS.AGG_AUTH_ID_FED_EFILE_STATUS AS
 SELECT TMP_AGG.AUTH_ID,
        TMP_AGG.TAX_YEAR,
        TMP_AGG.FED_FIRST_ATTEMPTED_TIMESTAMP,
        TMP_AGG.FED_LAST_EFILE_STATUS_TIMESTAMP,
        TMP_AGG.FED_LAST_EFILE_STATUS_CODE_ID,
        TMP_AGG.FED_FIRST_ACCEPTED_TIMESTAMP,
        TMP_AGG.FED_LAST_ACCEPTED_TIMESTAMP,
        TMP_AGG.MAX_REJECT_COUNT,
        TMP_AGG.FED_FIRST_REJECTED_TIMESTAMP
 FROM ( SELECT PRI.AUTH_ID,
        AGG.TAX_YEAR,
        min(AGG.FED_FIRST_ATTEMPTED_TIMESTAMP) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR) AS FED_FIRST_ATTEMPTED_TIMESTAMP,
        first_value(AGG.FED_LAST_EFILE_STATUS_TIMESTAMP, false) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR ORDER BY AGG.FED_LAST_EFILE_STATUS_TIMESTAMP DESC) AS FED_LAST_EFILE_STATUS_TIMESTAMP,
        first_value(AGG.FED_LAST_EFILE_STATUS_CODE_ID, false) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR ORDER BY AGG.FED_LAST_EFILE_STATUS_TIMESTAMP DESC) AS FED_LAST_EFILE_STATUS_CODE_ID,
        min(AGG.FED_FIRST_ACCEPTED_TIMESTAMP) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR) AS FED_FIRST_ACCEPTED_TIMESTAMP,
        max(AGG.FED_LAST_ACCEPTED_TIMESTAMP) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR) AS FED_LAST_ACCEPTED_TIMESTAMP,
        sum(AGG.REJECTED_COUNT) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR) AS MAX_REJECT_COUNT,
        min(AGG.FED_FIRST_REJECTED_TIMESTAMP) OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR) AS FED_FIRST_REJECTED_TIMESTAMP,
        row_number() OVER (PARTITION BY PRI.AUTH_ID, AGG.TAX_YEAR ORDER BY AGG.FED_LAST_EFILE_STATUS_TIMESTAMP DESC) AS ROWNUM
 FROM (CTG_ANALYTICS.AGG_FED_EFILE_STATUS AGG LEFT JOIN ( SELECT TMP_TTO.AUTH_ID,
        TMP_TTO.PRIMARY_ID,
        TMP_TTO.TAX_YEAR
 FROM ( SELECT TTO.AUTH_ID,
        TTO.PRIMARY_ID,
        TTO.TAX_YEAR,
        row_number() OVER (PARTITION BY TTO.PRIMARY_ID, TTO.TAX_YEAR ORDER BY TTO.ORDER_TIMESTAMP DESC, TTO.AUTH_ID DESC) AS RN
 FROM CTG_ANALYTICS_SRC.TTO_ORDERS TTO) TMP_TTO
 WHERE (TMP_TTO.RN = 1)
 GROUP BY TMP_TTO.AUTH_ID,
          TMP_TTO.PRIMARY_ID,
          TMP_TTO.TAX_YEAR) PRI ON (((PRI.PRIMARY_ID = AGG.PRIMARY_ID) AND (PRI.TAX_YEAR = AGG.TAX_YEAR))))) TMP_AGG
 WHERE (TMP_AGG.ROWNUM = 1);

CREATE  VIEW CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP2 AS
 SELECT max(STG_NEW_ETX_RT_ORDERS.PRIMARY_ID) AS PRIMARY_ID,
        STG_NEW_ETX_RT_ORDERS.SECONDARY_ID
 FROM CTG_ANALYTICS_STG.STG_NEW_ETX_RT_ORDERS
 WHERE ((STG_NEW_ETX_RT_ORDERS.SECONDARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER)) AND (STG_NEW_ETX_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP1)) AND (STG_NEW_ETX_RT_ORDERS.SECONDARY_ID NOT IN ( SELECT ETX_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_RT_CUSTOMER_GROUP1)))
 GROUP BY STG_NEW_ETX_RT_ORDERS.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP2 AS
 SELECT max(STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID) AS PRIMARY_ID,
        STG_ETX_NEW_NON_RT_ORDERS.SECONDARY_ID
 FROM CTG_ANALYTICS_STG.STG_ETX_NEW_NON_RT_ORDERS
 WHERE ((STG_ETX_NEW_NON_RT_ORDERS.SECONDARY_ID IN ( SELECT DIM_CUSTOMER.PRIMARY_ID
 FROM CTG_ANALYTICS_SRC.DIM_CUSTOMER)) AND (STG_ETX_NEW_NON_RT_ORDERS.PRIMARY_ID NOT IN ( SELECT ETX_NON_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP1)) AND (STG_ETX_NEW_NON_RT_ORDERS.SECONDARY_ID NOT IN ( SELECT ETX_NON_RT_CUSTOMER_GROUP1.PRIMARY_ID
 FROM CTG_ANALYTICS_STG.ETX_NON_RT_CUSTOMER_GROUP1)))
 GROUP BY STG_ETX_NEW_NON_RT_ORDERS.SECONDARY_ID;

CREATE  VIEW CTG_ANALYTICS_SRC.DIM_VISITOR AS
 SELECT DIM_VISITOR.VISITOR_ID,
        DIM_VISITOR.VISITOR_ID_SRC,
        DIM_VISITOR.VISID_HIGH,
        DIM_VISITOR.VISID_LOW,
        DIM_VISITOR.VISID_HIGH_HEX,
        DIM_VISITOR.VISID_LOW_HEX,
        DIM_VISITOR.VISID_SOURCE_TYPE_ID,
        DIM_VISITOR.LOAD_DATETIME
 FROM OMT_CTG_DWH_DEV.DIM_VISITOR;

CREATE  VIEW CTG_ANALYTICS.DIM_VISITOR AS
 SELECT DIM_VISITOR.VISITOR_ID,
        DIM_VISITOR.VISITOR_ID_SRC,
        DIM_VISITOR.VISID_HIGH,
        DIM_VISITOR.VISID_LOW,
        DIM_VISITOR.VISID_HIGH_HEX,
        DIM_VISITOR.VISID_LOW_HEX,
        DIM_VISITOR.VISID_SOURCE_TYPE_ID,
        DIM_VISITOR.LOAD_DATETIME
 FROM OMT_CTG_DWH_DEV.DIM_VISITOR;

CREATE FUNCTION CTG_ANALYTICS.GET_URL_PARAMETER_VALUE(url Varchar, param Varchar)
RETURN varchar(200) AS
BEGIN
RETURN (regexp_substr(URL, (('([?&])(' || PARAM) || '=)([^&#]*)'), 1, 1, '', 3))::varchar(200);
END;

CREATE FUNCTION CTG_ANALYTICS.GET_TAX_DATE_ID(in_value Timestamp)
RETURN int AS
BEGIN
RETURN (to_char(IN_VALUE, 'YYYYMMDDHH24'))::int;
END;

CREATE FUNCTION CTG_ANALYTICS.GET_CUSTOM_CHANNEL_GROUP(channel_group Varchar)
RETURN varchar AS
BEGIN
RETURN CASE WHEN (coalesce(CHANNEL_GROUP, 'Non-Campaign') = 'Non-Campaign') THEN 'Non-Campaign' ELSE 'Paid' END;
END;

CREATE FUNCTION CTG_ANALYTICS.IS_NUMERIC(in_value Varchar)
RETURN boolean AS
BEGIN
RETURN (regexp_count(IN_VALUE, E'^[-\\+]?((\\d*\\.\\d+)|(\\d+(\\.\\d*)?))$', 1, '') > 0);
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.GET_APPLICATION_TYPE(user_agent_os_family Varchar, user_agent_device_family Varchar, user_agent_name Varchar)
RETURN varchar(255) AS
BEGIN
RETURN (CASE WHEN (USER_AGENT_NAME ~~ 'TTU|%') THEN 'Mobile App' ELSE CASE WHEN ((USER_AGENT_NAME ~~* '%bing%preview%') OR (USER_AGENT_NAME ~~* '%google%preview%') OR (lower(USER_AGENT_DEVICE_FAMILY) = 'spider')) THEN 'Spider' WHEN (((USER_AGENT_OS_FAMILY ~~* '%windows%') AND (lower(USER_AGENT_DEVICE_FAMILY) = 'generic smartphone')) OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(SM-P900|SM-P905|SGP521|SGP511|GT-P1000|
                                                              GT-P1000M|GT-P5210|GT-P3200|GT-P5200|GT-P8200|
                                                              GT-P1000|GT-P1000M|GT-P5210|GT-P3200|GT-P5200|
                                                              GT-P8200|Transformer |Transformer Prime|Transformer Pad|
                                                              ME301T|Transformer TF101|Lenovo B8000|Slate 7|HP 7 Plus|
                                                              Dell Venue|Venue Pro|A100-07U08U|A200-|A701|ME301T|ME173X|
                                                              ME172V|Nexus 10|ThinkPad Tablet|ThinkPadTablet|
                                                              SCH-I545|SPH-L720|SCH-R970|GT-I9508|SCH-I959|GT-I9502|SGH-I337M|SGH-M919V|
                                                              SCH-R970X|SCH-R970C|SM-G800H|SM-G800F|SM-G900H|SM-G900F|SM-G900R4|SM-G900V|
                                                              SM-N7500|SM-N7502|SM-N7505|SM-G7102|GT-S7262|GT-S7392|SM-G3502|GT-S7272|
                                                              SM-N9000|SM-N9002|SM-N9005|SM-G900H|SM-G900R4|SM-G900T|SM-G900V|SM-G900RZWAUSC |
                                                              SM-G900W8|SM-G900FD|D802|D803|D805|D800|LS980|D801|VS980|L-01F|LG US990|LG D850|
                                                              LG D851|LG LS990|LG VS985|LG AS985|LG F400L/K/S|LG D852G|LG D855|
                                                              GT-N7200|I9195|I9192|GT-S5312|GT-S5282|GT-i8262D|GT-I8552|GT-I9150|GT-I9152|
                                                              GT-I9200|GT-I9205|GT-S6810P|GT-I9505|GT-I9506|GT-S6312|GT-I9082|SGH-i547C|SGH-I437|
                                                              I9305|SPH-L710|SCH-I535|SCH-R530|SGH-I747|SGH-T999|SM-G900F|
                                                              iPhone|iPad|iPod|Nokia|Ericsson|HTC|LG|Windows Phone|Windows Mobile|
                                                              Motorola|Kindle|Huawei|Generic Feature Phone|
                                                              iPhone|iPad|iPod|Nokia|Ericsson|HTC|LG|Windows Phone|Windows Mobile|
                                                              Motorola|Kindle|Huawei|Generic Feature Phone|Tablet|Kindle)', 'i') OR regexp_like(USER_AGENT_OS_FAMILY, '(iOS|Android|Kindle Fire|BlackBerry|
                                                              Firefox OS|Bada|Maemo|Mandriva|Nokia|
                                                              MeeGo|Symbian|webOS|WeTab|Windows Phone|
                                                              Windows Mobile|Windows CE|Windows RT|BREW)', 'i')) THEN 'Mobile Web' ELSE 'Stationary Web' END END)::varchar(255);
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.GET_DEVICE_TYPE(user_agent_os_family Varchar, user_agent_device_family Varchar, user_agent_name Varchar)
RETURN varchar(255) AS
BEGIN
RETURN (CASE WHEN (USER_AGENT_NAME ~~ 'TTU|%') THEN CASE WHEN ((USER_AGENT_NAME ~~* '%iPad%') OR (USER_AGENT_NAME ~~* '%tablet%') OR (USER_AGENT_DEVICE_FAMILY ~~* '%iPad%') OR ((lower(USER_AGENT_OS_FAMILY) = 'android') AND (USER_AGENT_DEVICE_FAMILY ~~* '%Samsung Tablet%')) OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Tablet|Kindle|HP SlateBook|Smartfren Tab|Nexus 9|Nexus 7|HP Slate|Novo7Fire|HP Touchpad|ViewPad7)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(SM-P900|SM-P905|SGP521|SGP511|GT-P1000|GT-P1000M|GT-P5210|GT-P3200|GT-P5200|GT-P8200|GT-P1000|GT-P1000M|GT-P5210|GT-P3200|GT-P5200|GT-P8200|Transformer |Transformer Prime|Transformer Pad|ME301T|Transformer TF101|Lenovo B8000|Slate 7|HP 7 Plus|Dell Venue|Venue Pro|A100-07U08U|A200-|A701|ME301T|ME173X|ME172V|Nexus 10|ThinkPad Tablet|ThinkPadTablet|Kindle Fire)', 'i')) THEN 'Tablet' WHEN ((USER_AGENT_NAME ~~* '%iPhone%') OR (USER_AGENT_NAME ~~* '%smartphone%') OR (USER_AGENT_OS_FAMILY = 'iOS') OR regexp_like(USER_AGENT_NAME, 'AT&T|T-Mobile|cricket|MetroPCS|Sprint|Family Mobile|Verizon Wireless|Simple Mobile|Verizon|H2O|T-Mobile|GoSmart|U.S. Cellular|AT&T MicroCell|TELCEL|Boost Mobile', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(iPod|iPhone)', 'i') OR ((lower(USER_AGENT_OS_FAMILY) = 'android') AND (USER_AGENT_DEVICE_FAMILY ~~* '%Samsung%')) OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(D802|D803|D805|D800|LS980|D801|VS980|L-01F|LG US990|LG D850|LG D851|LG LS990|LG VS985|LG AS985|LG F400L/K/S|LG D852G|LG D855)', 'i') OR ((USER_AGENT_OS_FAMILY ~~* '%Windows%') AND (lower(USER_AGENT_DEVICE_FAMILY) = 'generic smartphone')) OR regexp_like(USER_AGENT_OS_FAMILY, '(BlackBerry|Firefox OS|Bada|Maemo|Mandriva|Nokia|MeeGo|Symbian|webOS|WeTab)', 'i') OR regexp_like(USER_AGENT_OS_FAMILY, '(Android|IOS|Windows Phone|Windows Mobile|Windows CE|Windows RT|Symbian OS|BREW)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Nokia|Ericsson|HTC|LG|Motorola|DROID|Huawei|Generic Feature Phone)', 'i')) THEN 'Phone' ELSE 'Unknown' END ELSE CASE WHEN ((USER_AGENT_NAME ~~* '%bing%preview%') OR (USER_AGENT_NAME ~~* '%google%preview%') OR (lower(USER_AGENT_DEVICE_FAMILY) = 'spider')) THEN 'Spider' WHEN ((USER_AGENT_NAME ~~* '%iPad%') OR ((USER_AGENT_NAME ~~* '%tablet%') AND (USER_AGENT_NAME !~~* '%tablet PC%')) OR (USER_AGENT_DEVICE_FAMILY ~~* '%iPad%') OR ((lower(USER_AGENT_OS_FAMILY) = 'android') AND (USER_AGENT_DEVICE_FAMILY ~~* '%Samsung Tablet%')) OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Tablet|Kindle|HP SlateBook|Smartfren Tab|Nexus 9|Nexus 7|HP Slate|Novo7Fire|HP Touchpad|ViewPad7)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(SM-P900|SM-P905|SGP521|SGP511|GT-P1000|GT-P1000M|GT-P5210|GT-P3200|GT-P5200|GT-P8200|GT-P1000|GT-P1000M|GT-P5210|GT-P3200|GT-P5200|GT-P8200|Transformer |Transformer Prime|Transformer Pad|ME301T|Transformer TF101|Lenovo B8000|Slate 7|HP 7 Plus|Dell Venue|Venue Pro|A100-07U08U|A200-|A701|ME301T|ME173X|ME172V|Nexus 10|ThinkPad Tablet|ThinkPadTablet|Kindle Fire)', 'i')) THEN 'Tablet' WHEN ((USER_AGENT_NAME ~~* '%iPhone%') OR (USER_AGENT_NAME ~~* '%smartphone%') OR (USER_AGENT_OS_FAMILY = 'iOS') OR regexp_like(USER_AGENT_NAME, 'AT&T|T-Mobile|cricket|MetroPCS|Sprint|Family Mobile|Verizon Wireless|Simple Mobile|Verizon|H2O|T-Mobile|GoSmart|U.S. Cellular|AT&T MicroCell|TELCEL|Boost Mobile', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(iPod|iPhone)', 'i') OR ((lower(USER_AGENT_OS_FAMILY) = 'android') AND (USER_AGENT_DEVICE_FAMILY ~~* '%Samsung%')) OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(D802|D803|D805|D800|LS980|D801|VS980|L-01F|LG US990|LG D850|LG D851|LG LS990|LG VS985|LG AS985|LG F400L/K/S|LG D852G|LG D855)', 'i') OR ((USER_AGENT_OS_FAMILY ~~* '%Windows%') AND (lower(USER_AGENT_DEVICE_FAMILY) = 'generic smartphone')) OR regexp_like(USER_AGENT_OS_FAMILY, '(BlackBerry|Firefox OS|Bada|Maemo|Mandriva|Nokia|MeeGo|Symbian|webOS|WeTab)', 'i') OR regexp_like(USER_AGENT_OS_FAMILY, '(Android|IOS|Windows Phone|Windows Mobile|Windows CE|Windows RT|Symbian OS|BREW)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Nokia|Ericsson|HTC|LG|Motorola|DROID|Huawei|Generic Feature Phone)', 'i')) THEN 'Phone' ELSE 'Stationary' END END)::varchar(255);
END;

CREATE FUNCTION CTG_ANALYTICS.TT_SCREEN_DESC(prop05 Varchar, prop06 Varchar, prop07 Varchar, channel Varchar, prop19 Varchar, page_url Varchar, pagename Varchar)
RETURN varchar(255) AS
BEGIN
RETURN (CASE WHEN (((PROP05 = ANY (ARRAY['TTO', 'GDES.Widget.pri', 'Intuit.cg.gd.taximportwidget', 'eze'])) OR ((PROP05 = 'JABBA') AND (PROP06 = 'CLASSIC')) OR ((PROP05 = 'NONFFA') AND (CHANNEL = ANY (ARRAY['GTKM', 'GTKM | Seamless', 'MyTurboTax'])))) AND (coalesce(CHANNEL, 'unknown') <> 'TT.com') AND (PAGE_URL ~~ 'http%')) THEN CASE WHEN ((PROP19 IS NULL) AND (PAGENAME = 'null -')) THEN PROP07 WHEN ((substr(PROP19, 1, 3) = 'S20') AND regexp_like("substring"(PROP19, 4, 5), E'\\d', '')) THEN split_part(split_part("substring"(PROP19, 6), 'UNRESOLVED-WAITING_FOR_SERVER', 1), '_Amend', 1) ELSE coalesce(split_part(split_part(PROP19, 'UNRESOLVED-WAITING_FOR_SERVER', 1), '_Amend', 1), PAGENAME) END ELSE 'TTCOM-to be filled' END)::varchar(255);
END;

CREATE FUNCTION CTG_ANALYTICS.TT_SCREEN_SOURCE(prop05 Varchar, channel Varchar)
RETURN varchar(255) AS
BEGIN
RETURN (CASE WHEN (((PROP05 = ANY (ARRAY['GDES.Widget.pri', 'TTO'])) OR (CHANNEL = 'GTKM')) AND (coalesce(CHANNEL, 'unknown') <> 'MyTurboTax')) THEN 'tto' WHEN ((PROP05 = 'NONFFA') AND (coalesce(CHANNEL, 'unknown') <> 'MyTurboTax')) THEN 'tt.com' WHEN (CHANNEL = 'MyTurboTax') THEN 'mytt' ELSE 'unknown' END)::varchar(255);
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.GET_PLATFORM_TYPE(user_agent_os_family Varchar, user_agent_device_family Varchar, user_agent_name Varchar)
RETURN varchar(255) AS
BEGIN
RETURN (CASE WHEN (USER_AGENT_NAME ~~ 'TTU|%') THEN CASE WHEN (((USER_AGENT_NAME ~~* '%iOS%') AND (USER_AGENT_NAME !~~* '%SiteKiosk%')) OR (USER_AGENT_OS_FAMILY = 'iOS') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(iPhone|iPad|iPod)', 'i')) THEN 'iOS' ELSE 'Android' END ELSE CASE WHEN ((USER_AGENT_NAME ~~* '%bing%preview%') OR (USER_AGENT_NAME ~~* '%google%preview%') OR (lower(USER_AGENT_DEVICE_FAMILY) = 'spider')) THEN 'Spider' WHEN ((USER_AGENT_NAME ~~* '%Android%') OR (lower(USER_AGENT_OS_FAMILY) = 'android') OR (lower(USER_AGENT_DEVICE_FAMILY) = 'kindle fire')) THEN 'Android' WHEN (((USER_AGENT_NAME ~~* '%iOS%') AND (USER_AGENT_NAME !~~* '%SiteKiosk%')) OR (USER_AGENT_OS_FAMILY = 'iOS') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(iPhone|iPad|iPod)', 'i')) THEN 'iOS' WHEN (((USER_AGENT_OS_FAMILY ~~* '%Windows%') AND (lower(USER_AGENT_DEVICE_FAMILY) = 'generic smartphone')) OR regexp_like(USER_AGENT_OS_FAMILY, '(BlackBerry|Firefox OS|Bada|Maemo|Mandriva|Nokia|MeeGo|Symbian|webOS|WeTab|Windows Phone|Windows Mobile|Windows CE|Windows RT|BREW)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Nokia|Ericsson|HTC|LG|Windows Phone|Windows Mobile|Motorola|Huawei|Kindle|Generic Feature Phone)', 'i') OR regexp_like(USER_AGENT_DEVICE_FAMILY, '(Tablet|Kindle)', 'i')) THEN 'Other Mobile OS' ELSE 'Stationary OS' END END)::varchar(255);
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.GET_DOCUMENT_CATEGORY(doc_type Varchar)
RETURN varchar(50) AS
BEGIN
RETURN (CASE WHEN (DOC_TYPE ~~* '%1095A%') THEN '1095A' WHEN (DOC_TYPE IS NULL) THEN NULL ELSE 'not categorized' END)::varchar(50);
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.FROM_EPOCH_TIME_TO_TIMESTAMP(epoch_ts Integer)
RETURN timestamp AS
BEGIN
RETURN CASE WHEN (EPOCH_TS IS NULL) THEN NULL::timestamp ELSE (to_timestamptz(((("substring"((EPOCH_TS)::varchar, 1, 10) || '.') || "substring"((EPOCH_TS)::varchar, 11)))::float))::timestamp END;
END;

CREATE FUNCTION CTG_ANALYTICS_SRC.IS_VALID_GETDATA_EVENT(tid Varchar, doc_category Varchar, document_id Varchar, auth_id Integer, alternate_id Varchar)
RETURN boolean AS
BEGIN
RETURN CASE WHEN ((TID IS NULL) OR (DOC_CATEGORY IS NULL) OR (DOCUMENT_ID IS NULL) OR ((AUTH_ID IS NULL) AND (ALTERNATE_ID IS NULL))) THEN false ELSE true END;
END;

SELECT MARK_DESIGN_KSAFE(1);
